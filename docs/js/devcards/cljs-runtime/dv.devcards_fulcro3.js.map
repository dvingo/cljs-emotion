{"version":3,"sources":["dv/devcards_fulcro3.cljs"],"mappings":"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","names":["dv.devcards-fulcro3/html","borkdude.dynaload/LazyVar","js/sablono","js/sablono.core","js/sablono.core.html","temp__5751__auto__","cljs.core/find","e__46726__auto__","cljs.core/val","js/Error","cljs.core/namespace","sablono.core/html","dv.devcards-fulcro3/r-as-element","js/reagent","js/reagent.core","js/reagent.core.as-element","reagent.core/as-element","cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/boolean?","cljs.core/map?","cljs.spec.alpha/or-spec-impl","cljs.core/fn?","js/dv","js/dv.devcards-fulcro3","js/dv.devcards-fulcro3.persistent-apps*","dv.devcards-fulcro3/persistent-apps*","cljs.core.atom","dv.devcards-fulcro3/safe-initial-state","comp","params","com.fulcrologic.fulcro.components/has-initial-app-state?","com.fulcrologic.fulcro.components/get-initial-state","dv.devcards-fulcro3/make-root","Root","generated-name","cljs.core.gensym","component-key","cljs.core.keyword","cljs.core/name","com.fulcrologic.fulcro.components/configure-component!","_","or__4253__auto__","com.fulcrologic.fulcro.components.get_query","this","map__60273","cljs.core/--destructure-map","cljs.core.get","root","com.fulcrologic.fulcro.components/props","G__60274","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.components/registry-key->class","factory","com.fulcrologic.fulcro.components.factory","computed","com.fulcrologic.fulcro.components.shared","cljs.core/seq","G__60275","G__60276","com.fulcrologic.fulcro.components/computed","p__60277","map__60278","dv.devcards-fulcro3/fulcro-initial-state","initial-state","wrap-root?","root-state","state-tree","G__60279","wrapped","cljs.core.merge","db","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db","com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform","p__60280","map__60281","dv.devcards-fulcro3/upsert-app","app","persistence-key","app-id","config","instance","and__4251__auto__","cljs.core/deref","app-options","G__60282","cljs.core/contains?","cljs.core.assoc","cljs.core.update","cljs.core/assoc","cljs.core/assoc-in","com.fulcrologic.fulcro.application.fulcro_app","cljs.core.swap_BANG_","p__60283","map__60284","dv.devcards-fulcro3/dispose-app","cljs.core/dissoc","temp__5753__auto__","app-uuid","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","p__60289","map__60291","dv.devcards-fulcro3/mount-at","node","com.fulcrologic.fulcro.application.mount_BANG_","dv.devcards-fulcro3/inspector-set-app","card-id","map__60293","nubank.workspaces.data/active-card","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","p__60294","map__60296","dv.devcards-fulcro3/fulcro-card-init","card","nubank.workspaces.card-types.util/positioned-card","js/ReactDOM.unmountComponentAtNode","com.fulcrologic.fulcro.application/force-root-render!","nubank.workspaces.data/active-cards*","com.fulcrologic.fulcro.dom.macro_create_element","G__60298","G__60299","nubank.workspaces.ui.core/button","G__60301","G__60302","nubank.workspaces.ui/restart-card"],"sourcesContent":["(ns dv.devcards-fulcro3\n  (:require-macros [dv.devcards-fulcro3 :refer [make-card]])\n  (:require\n    [borkdude.dynaload :refer [dynaload]]\n    [cljs.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.merge :as f.merge]\n    [com.fulcrologic.fulcro.algorithms.normalize :refer [tree->db]]\n    [com.fulcrologic.fulcro.application :as fa]\n    [com.fulcrologic.fulcro.components :as fc]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.guardrails.core :refer [>defn | ? =>]]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as fi.client]\n    [devcards.core]\n    [nubank.workspaces.card-types.util :as ct.util]\n    [nubank.workspaces.data :as data]\n    [nubank.workspaces.model :as wsm]\n    [nubank.workspaces.ui :as ui]\n    [nubank.workspaces.ui.core :as uc]))\n\n(def html (dynaload 'sablono.core/html))\n(def r-as-element (dynaload 'reagent.core/as-element))\n\n;; This was copied from the workspaces fulcro 3 code\n;; https://github.com/awkay/workspaces/blob/e1d3c21042229309c5df954f8156b5918b0c9a40/src/nubank/workspaces/card_types/fulcro3.cljs\n\n(s/def ::root any?)\n(s/def ::wrap-root? boolean?)\n(s/def ::app map?)\n(s/def ::persistence-key any?)\n(s/def ::initial-state (s/or :fn? fn? :factory-param any?))\n(s/def ::root-state map?)\n(s/def ::computed map?)\n(s/def ::root-node-props map?)\n\n(defonce persistent-apps* (atom {}))\n\n(defn safe-initial-state [comp params]\n  (if (fc/has-initial-app-state? comp)\n    (fc/get-initial-state comp params)\n    params))\n\n(defn make-root [Root]\n  (let [generated-name (gensym)\n        component-key  (keyword \"dv.devcards-fulcro3\" (name generated-name))]\n    (fc/configure-component! (fn *dyn-root* [])\n      component-key\n      {:initial-state (fn [_ params]\n                        {:ui/root (or (safe-initial-state Root params) {})})\n       :query         (fn [_] [:fulcro.inspect.core/app-id {:ui/root (fc/get-query Root)}])\n       :render        (fn [this]\n                        (let [{:ui/keys [root]} (fc/props this)\n                              Root     (-> Root fc/class->registry-key fc/registry-key->class)\n                              factory  (fc/factory Root)\n                              computed (fc/shared this ::computed)]\n                          (if (seq root)\n                            (factory (cond-> root computed (fc/computed computed))))))})))\n\n(defn fulcro-initial-state [{::keys [initial-state wrap-root? root root-state]\n                             :or    {wrap-root? true initial-state {}}}]\n  (let [state-tree (if (fn? initial-state)\n                     (initial-state (safe-initial-state root nil))\n                     (safe-initial-state root initial-state))\n        wrapped    (merge\n                     (if wrap-root? {:ui/root state-tree} state-tree)\n                     root-state)\n        Root       (if wrap-root? (make-root root) root)\n        db         (tree->db Root wrapped true (f.merge/pre-merge-transform {}))]\n    db))\n\n(defn upsert-app\n  [{::keys                    [app persistence-key computed]\n    :fulcro.inspect.core/keys [app-id]\n    :as                       config}]\n  (if-let [instance (and persistence-key (get @persistent-apps* persistence-key))]\n    instance\n    (let [app-options (cond-> app\n                        (not (contains? app :initial-state))\n                        (assoc :initial-db (fulcro-initial-state config))\n\n                        computed\n                        (update :shared assoc ::computed computed)\n\n                        app-id\n                        (assoc-in [:initial-db :fulcro.inspect.core/app-id] app-id))\n          ;; TASK: explicit initial state handling\n          instance    (fa/fulcro-app app-options)]\n\n      ;(println \"APP options : \" app-options)\n      (if persistence-key (swap! persistent-apps* assoc persistence-key instance))\n      instance)))\n\n(defn dispose-app [{::keys [persistence-key] :as app}]\n  (if persistence-key (swap! persistent-apps* dissoc persistence-key))\n  (when-let [app-uuid (fi.client/app-uuid app)]\n    (fi.client/dispose-app app-uuid)))\n\n(>defn mount-at\n  [app {::keys [root wrap-root? persistence-key] :or {wrap-root? true}} node]\n  [::fa/app map? some? => any?]\n  (let [instance (if wrap-root? (make-root root) root)]\n    (fa/mount! app instance node {:initialize-state? false})\n    (when persistence-key (swap! persistent-apps* assoc persistence-key app))\n    app))\n\n(defn inspector-set-app [card-id]\n  (let [{::keys [app]} (data/active-card card-id)\n        app-uuid (fi.client/app-uuid app)]\n    (when app-uuid (fi.client/set-active-app app-uuid))))\n\n(defn fulcro-card-init\n  [{::wsm/keys [card-id]\n    :as        card}\n   config]\n  (let [app (upsert-app (assoc config :fulcro.inspect.core/app-id card-id))]\n    (ct.util/positioned-card card\n      {::wsm/dispose\n       (fn [node]\n         (dispose-app app)\n         (js/ReactDOM.unmountComponentAtNode node))\n\n       ::wsm/refresh\n       (fn [_] (fa/force-root-render! app))\n\n       ::wsm/render\n       (fn [node]\n         (swap! data/active-cards* assoc-in [card-id ::app] app)\n         (mount-at app config node))\n\n       ::wsm/render-toolbar\n       (fn []\n         (dom/div\n           (uc/button {:onClick #(inspector-set-app card-id)}\n             \"Inspector\")\n           (uc/button {:onClick #(ui/restart-card card-id)}\n             \"Restart\")))\n\n       ::app\n       app})))\n\n(comment\n  ;; 2 steps\n\n  (let [config {::root SomeComponent ::wrap-root? true}\n        app    (upsert-app (assoc config :fulcro.inspect.core/app-id card-id))])\n  (mount-at app config node)\n  )\n"]}