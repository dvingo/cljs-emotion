{"version":3,"sources":["com/fulcrologic/guardrails/impl/externs.cljc"],"mappings":"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","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.impl","js/com.fulcrologic.guardrails.impl.externs","js/com.fulcrologic.guardrails.impl.externs.externs-registry","com.fulcrologic.guardrails.impl.externs/externs-registry","cljs.core.atom","js/com.fulcrologic.guardrails.impl.externs.spec-registry","com.fulcrologic.guardrails.impl.externs/spec-registry","js/com.fulcrologic.guardrails.impl.externs.function-registry","com.fulcrologic.guardrails.impl.externs/function-registry","js/com.fulcrologic.guardrails.impl.externs.external-function-registry","com.fulcrologic.guardrails.impl.externs/external-function-registry","com.fulcrologic.guardrails.impl.externs/register-externs!","NS","fn-name","externs","cljs.core.swap_BANG_","cljs.core/assoc-in","com.fulcrologic.guardrails.impl.externs/register-specs!","function","cljs.core/merge","com.fulcrologic.guardrails.impl.externs/clean-function","cljs.core.update","p1__55860#","cljs.core.partial","com.fulcrologic.guardrails.utils/map-vals","cljs.core.dissoc","com.fulcrologic.guardrails.impl.externs/register-function!","p__55866","map__55867","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.guardrails.impl.externs/record-defn!","p__55872","map__55873","com.fulcrologic.guardrails.impl.externs/register-external-function!","external-function","var-name","cljs.core/assoc","com.fulcrologic.guardrails.impl.externs/record-fdef!","com.fulcrologic.guardrails.impl.externs/function-info","qualified-symbol","spc","cljs.core/namespace","simple-name","cljs.core.symbol","cljs.core/name","or__4253__auto__","cljs.core/deref","cljs.core.get_in","com.fulcrologic.guardrails.impl.externs/pure?","arity","cljs.core/boolean","map__55879","info","has-arity?","pure","pure?","com.fulcrologic.guardrails.impl.externs/spec-system","map__55891","spec-system"],"sourcesContent":["(ns com.fulcrologic.guardrails.impl.externs\n  (:require\n    #?@(:clj [[clojure.walk :as walk]])\n    [com.fulcrologic.guardrails.registry :as gr.reg]\n    [com.fulcrologic.guardrails.utils :as utils]))\n\n(defonce externs-registry (atom {}))\n(defonce spec-registry (atom {}))\n(defonce function-registry (atom {}))\n(defonce external-function-registry (atom {}))\n\n#?(:clj (try (require 'cljs.analyzer.api) (catch Exception _)))\n\n#?(:clj\n   (defn compiling-cljs? [env]\n     (and (:ns env) (utils/compiling-cljs?))))\n\n#?(:clj\n   (defn cljc-resolve [env s]\n     (letfn [(cljs-resolve []\n               (let [rslv     (some-> (find-ns 'cljs.analyzer.api) (ns-resolve 'resolve))\n                     ast-node (when rslv (rslv env s))\n                     macro?   (boolean (:macro ast-node))]\n                 (when ast-node\n                   (cond-> {::gr.reg/extern-name `(quote ~(:name ast-node))\n                            ::gr.reg/macro?      macro?}\n                     (not macro?) (assoc ::gr.reg/extern-value s)))))\n             (clojure-resolve []\n               (if (contains? env s)\n                 {::gr.reg/extern-name  `(quote ~s)\n                  ::gr.reg/extern-value s}\n                 (let [sym-var (ns-resolve *ns* env s)\n                       cls?    (class? sym-var)\n                       macro?  (boolean (some-> sym-var meta :macro))]\n                   (when (and sym-var (not cls?))\n                     (cond-> {::gr.reg/extern-name `(quote ~(symbol sym-var))\n                              ::gr.reg/macro?      macro?}\n                       (not macro?)\n                       (assoc ::gr.reg/extern-value (symbol sym-var)))))))]\n       (if (compiling-cljs? env)\n         (cljs-resolve)\n         (clojure-resolve)))))\n\n#?(:clj\n   (defn extern-symbols [env body]\n     (let [externs (atom {})\n           record! (fn [x]\n                     (when (symbol? x)\n                       (when-let [extern (cljc-resolve env x)]\n                         (swap! externs assoc `(quote ~x) extern)))\n                     x)]\n       (walk/postwalk record! body)\n       @externs)))\n\n(defn register-externs! [NS fn-name externs]\n  (swap! externs-registry assoc-in [NS fn-name] externs))\n\n(defn register-specs! [function]\n  (swap! spec-registry merge (::gr.reg/spec-registry function)))\n\n(defn clean-function [function]\n  (-> function\n    (update ::gr.reg/arities\n      (partial utils/map-vals #(dissoc % ::gr.reg/body)))\n    (dissoc ::gr.reg/spec-registry)))\n\n(defn register-function! [NS fn-name function]\n  (register-specs! function)\n  (swap! function-registry assoc-in [NS fn-name]\n    (clean-function function)))\n\n(defn record-defn! [NS {:as function ::gr.reg/keys [fn-name]} externs]\n  (register-externs! NS fn-name externs)\n  (register-function! NS fn-name function))\n\n(defn register-external-function! [{:as external-function ::gr.reg/keys [var-name]}]\n  (swap! external-function-registry assoc var-name\n    (clean-function external-function)))\n\n(defn record-fdef! [external-function]\n  (register-specs! external-function)\n  (register-external-function! external-function))\n\n(defn function-info\n  \"Returns the information known about the given qualified symbol (if it was declared with >defn in\n  copilot mode, or has register a gspec on an external function) .\"\n  [qualified-symbol]\n  (let [spc         (namespace qualified-symbol)\n        simple-name (symbol (name qualified-symbol))]\n    (or\n      (get @external-function-registry qualified-symbol)\n      (get-in @function-registry [spc simple-name]))))\n\n(defn pure?\n  \"Returns true if the given fully-qualified symbol was declared with >defn and the arity (which is a number\n   or :n) is marked as pure.\"\n  [qualified-symbol arity]\n  (boolean\n    (let [info       (function-info qualified-symbol)\n          has-arity? (boolean (get-in info [::gr.reg/arities arity]))\n          {:keys [pure pure?]} (get-in info [::gr.reg/arities (if has-arity? arity :n) ::gr.reg/gspec ::gr.reg/metadata])]\n      (or pure pure?))))\n\n(defn spec-system\n  \"Returns the function spec system that was used in the type signature of the given symbol, or nil if that\n   function isn't registered with guardrails.\"\n  [qualified-symbol]\n  (let [{::gr.reg/keys [spec-system] :as info} (function-info qualified-symbol)]\n    (when info\n      (or spec-system :org.clojure/spec1))))\n\n#?(:clj\n   (defn run-registry-function\n     \"Run the given function defined by the qualified-symbol if and only if that arity of the function is pure.\n\n      qualified-symbol - The symbol of the function\n      args - a vector of arguments to pass to it.\n\n      Throws IllegalArgumentException if that function arity is not marked pure.\"\n     [qualified-symbol args]\n     (if (pure? qualified-symbol (count args))\n       (let [{::gr.reg/keys [fn-ref]} (function-info qualified-symbol)]\n         (apply fn-ref args))\n       (throw (IllegalArgumentException. (str qualified-symbol \" is not a pure function.\"))))))"]}