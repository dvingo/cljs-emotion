{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$rust.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkJpHD,MAAOC,CAAAA,OAAP,CAzIAC,QAAa,CAACC,IAAD,CAAO,CA2BlB,MAAO,CACLC,KAAM,MADD,CAELC,QAAS,CAAE,IAAF,CAFJ,CAGLC,SAAU,CACRC,SAAUJ,IAAKK,CAAAA,QAAfD,CAA0B,IADlB,CAERE,QA7BFC,0RA2BU;AAIRC,QACE,6BALM,CAMRC,SA3BFC,spBAqBU,CAHL;AAYLC,QAAS,OAZJ,CAaLC,SAAU,CACRZ,IAAKa,CAAAA,mBADG,CAERb,IAAKc,CAAAA,OAAL,CAAa,MAAb,CAAqB,MAArB,CAA6B,CAC3BF,SAAU,CAAE,MAAF,CADiB,CAA7B,CAFQ,CAKRZ,IAAKe,CAAAA,OAAL,CAAaf,IAAKgB,CAAAA,iBAAlB,CAAqC,CACnCC,MAAO,KAD4B,CAEnCN,QAAS,IAF0B,CAArC,CALQ,CASR,CACEO,UAAW,QADb,CAEEC,SAAU,CACR,CACEF,MAAO,wBADT,CADQ,CAIR,CACEA,MAAO,iCADT,CAJQ,CAFZ,CATQ,CAoBR,CACEC,UAAW,QADb,CAEED,MAAO,yBAFT,CApBQ,CAwBR,CACEC,UAAW,QADb,CAEEC,SAAU,CACR,CACEF,MAAO,oDADT,CADQ,CAIR,CACEA,MAAO,qDADT,CAJQ,CAOR,CACEA,MAAO,2DADT,CAPQ;AAUR,CACEA,MAAO,sFADT,CAVQ,CAFZ,CAiBEG,UAAW,CAjBb,CAxBQ,CA2CR,CACEF,UAAW,UADb,CAEEG,cAAe,IAFjB,CAGEC,IAAK,YAHP,CAIEC,WAAY,CAAA,CAJd,CAKEX,SAAU,CAAEZ,IAAKwB,CAAAA,qBAAP,CALZ,CA3CQ,CAkDR,CACEN,UAAW,MADb,CAEED,MAAO,QAFT,CAGEK,IAAK,KAHP,CAIEV,SAAU,CACR,CACEM,UAAW,aADb,CAEED,MAAO,GAFT,CAGEK,IAAK,GAHP,CADQ,CAJZ,CAlDQ,CA8DR,CACEJ,UAAW,OADb,CAEEG,cAAe,MAFjB,CAGEC,IAAK,GAHP,CAIEV,SAAU,CACRZ,IAAKe,CAAAA,OAAL,CAAaf,IAAKwB,CAAAA,qBAAlB,CAAyC,CACvCC,WAAY,CAAA,CAD2B,CAAzC,CADQ,CAJZ,CASEd,QAAS,KATX,CA9DQ,CAyER,CACEO,UAAW,OADb,CAEEG,cAAe,yBAFjB;AAGEC,IAAK,IAHP,CAIEV,SAAU,CACRZ,IAAKe,CAAAA,OAAL,CAAaf,IAAKwB,CAAAA,qBAAlB,CAAyC,CACvCC,WAAY,CAAA,CAD2B,CAAzC,CADQ,CAJZ,CASEd,QAAS,UATX,CAzEQ,CAoFR,CACEM,MAAOjB,IAAKK,CAAAA,QAAZY,CAAuB,IADzB,CAEEd,SAAU,CACRM,SAtHNC,spBAqHc,CAFZ,CApFQ;AA0FR,CACEO,MAAO,OADT,CA1FQ,CAbL,CA3BW,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/rust.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$rust\"] = function(global,require,module,exports) {\n/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\nfunction rust(hljs) {\n  const NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS =\n    'abstract as async await become box break const continue crate do dyn ' +\n    'else enum extern false final fn for if impl in let loop macro match mod ' +\n    'move mut override priv pub ref return self Self static struct super ' +\n    'trait true try type typeof unsafe unsized use virtual where while yield';\n  const BUILTINS =\n    // functions\n    'drop ' +\n    // types\n    'i8 i16 i32 i64 i128 isize ' +\n    'u8 u16 u32 u64 u128 usize ' +\n    'f32 f64 ' +\n    'str char bool ' +\n    'Box Option Result String Vec ' +\n    // traits\n    'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +\n    'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +\n    'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +\n    'SliceConcatExt ToString ' +\n    // macros\n    'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +\n    'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +\n    'include_bin! include_str! line! local_data_key! module_path! ' +\n    'option_env! print! println! select! stringify! try! unimplemented! ' +\n    'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';\n  return {\n    name: 'Rust',\n    aliases: [ 'rs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      keyword:\n        KEYWORDS,\n      literal:\n        'true false Some None Ok Err',\n      built_in:\n        BUILTINS\n    },\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', {\n        contains: [ 'self' ]\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        begin: /b?\"/,\n        illegal: null\n      }),\n      {\n        className: 'string',\n        variants: [\n          {\n            begin: /r(#*)\"(.|\\n)*?\"\\1(?!#)/\n          },\n          {\n            begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n          }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          {\n            begin: '\\\\b0b([01_]+)' + NUM_SUFFIX\n          },\n          {\n            begin: '\\\\b0o([0-7_]+)' + NUM_SUFFIX\n          },\n          {\n            begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX\n          },\n          {\n            begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\n                   NUM_SUFFIX\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'fn',\n        end: '(\\\\(|<)',\n        excludeEnd: true,\n        contains: [ hljs.UNDERSCORE_TITLE_MODE ]\n      },\n      {\n        className: 'meta',\n        begin: '#!?\\\\[',\n        end: '\\\\]',\n        contains: [\n          {\n            className: 'meta-string',\n            begin: /\"/,\n            end: /\"/\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'type',\n        end: ';',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n            endsParent: true\n          })\n        ],\n        illegal: '\\\\S'\n      },\n      {\n        className: 'class',\n        beginKeywords: 'trait enum struct union',\n        end: /\\{/,\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n            endsParent: true\n          })\n        ],\n        illegal: '[\\\\w\\\\d]'\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {\n          built_in: BUILTINS\n        }\n      },\n      {\n        begin: '->'\n      }\n    ]\n  };\n}\n\nmodule.exports = rust;\n\n};"],
"names":["shadow$provide","global","require","module","exports","rust","hljs","name","aliases","keywords","$pattern","IDENT_RE","keyword","KEYWORDS","literal","built_in","BUILTINS","illegal","contains","C_LINE_COMMENT_MODE","COMMENT","inherit","QUOTE_STRING_MODE","begin","className","variants","relevance","beginKeywords","end","excludeEnd","UNDERSCORE_TITLE_MODE","endsParent"]
}
