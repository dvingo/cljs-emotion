{"version":3,"sources":["camel_snake_kebab/internals/string_separator.cljc"],"mappings":"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","names":["camel-snake-kebab$internals$string-separator$StringSeparator$split$dyn","x__4550__auto__","m__4551__auto__","camel-snake-kebab.internals.string-separator/split","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","camel-snake-kebab.internals.string-separator/StringSeparator","this","s","cljs.core/PROTOCOL_SENTINEL","js/RegExp","clojure.string.split","camel-snake-kebab.internals.string-separator/classify-char","c","G__46813","camel-snake-kebab.internals.string-separator/generic-split","ss","cs","cljs.core.mapv","ss-length","result","cljs.core/transient","start","current","next","result+new","end","cljs.core.conj_BANG_","or__4253__auto__","cljs.core/seq","cljs.core/persistent!","cljs.core._EQ_","cljs.core.nth","vec__46866","a","b","cljs.core.subvec","cljs.core.not_EQ_","camel-snake-kebab.internals.string-separator/generic-separator","js/camel-snake-kebab","js/camel-snake-kebab.internals","js/camel-snake-kebab.internals.string-separator","js/camel-snake-kebab.internals.string-separator.t_camel_snake_kebab$internals$string_separator46877","camel-snake-kebab.internals.string-separator/t_camel_snake_kebab$internals$string_separator46877","_46879","meta46878","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","camel-snake-kebab.internals.string-separator/->t_camel_snake_kebab$internals$string_separator46877","_"],"sourcesContent":["(ns ^:no-doc camel-snake-kebab.internals.string-separator\n  (:require [clojure.string :as string])\n  #?(:clj (:import (java.util.regex Pattern))))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defprotocol StringSeparator\n  (split [this s] \": StringSeparator -> String -> NonEmptySeq[String]\"))\n\n#?(:clj\n   (letfn [(split-by-pattern [^Pattern p, ^String s]\n             (string/split s p))\n           ;; These could be optimized e.g. by using StringUtils in Apache Commons:\n           (split-by-string [^String p, ^String s]\n             (split-by-pattern (-> p Pattern/quote Pattern/compile) s))\n           (split-by-char [^Character p, ^String s]\n             (split-by-string (String/valueOf p) s))]\n     (extend Pattern   StringSeparator {:split split-by-pattern})\n     (extend String    StringSeparator {:split split-by-string})\n     (extend Character StringSeparator {:split split-by-char}))\n\n   :cljs\n   (extend-protocol StringSeparator\n     ;; Notes:\n     ;; * Characters are just strings in ClojureScript.\n     ;; * Using js/RegExp generates a warning, but what's the right way?\n\n     js/RegExp\n     (split [this s] (string/split s this))\n\n     string\n     (split [this s] (string/split s this))))\n\n(defn classify-char [c]\n  (case c\n    (\\0 \\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) :number\n    (\\- \\_ \\space \\tab \\newline \\o013 \\formfeed \\return) :whitespace\n    (\\a \\b \\c \\d \\e \\f \\g \\h \\i \\j \\k \\l \\m \\n \\o \\p \\q \\r \\s \\t \\u \\v \\w \\x \\y \\z) :lower\n    (\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z) :upper\n    :other))\n\n(defn generic-split [ss]\n  (let [cs (mapv classify-char ss)\n        ss-length #?(:clj (.length ^String ss)\n                     :cljs (.-length ss))]\n    (loop [result (transient []), start 0, current 0]\n      (let [next (inc current)\n            result+new (fn [end]\n                         (if (> end start)\n                           (conj! result (.substring ^String ss start end))\n                           result))]\n        (cond (>= current ss-length)\n              (or (seq (persistent! (result+new current)))\n                  ;; Return this instead of an empty seq:\n                  [\"\"])\n\n              (= (nth cs current) :whitespace)\n              (recur (result+new current) next next)\n\n              (let [[a b c] (subvec cs current)]\n                ;; This expression is not pretty,\n                ;; but it compiles down to sane JavaScript.\n                (or (and (not= a :upper)  (= b :upper))\n                    (and (not= a :number) (= b :number))\n                    (and (= a :upper) (= b :upper) (= c :lower))))\n              (recur (result+new next) next next)\n\n              :else\n              (recur result start next))))))\n\n(def generic-separator\n  (reify StringSeparator\n    (split [_ s] (generic-split s))))\n"]}