{
"version":3,
"file":"module$node_modules$$emotion$hash$dist$hash_browser_cjs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAwDAH,QAAQI,CAAAA,OAAR,CAnDAC,QAAgB,CAACC,GAAD,CAAM,CAYpB,IANA,IAAIC,EAAI,CAAR,CAEIC,CAFJ,CAGIC,EAAI,CAHR,CAIIC,IAAMJ,GAAIK,CAAAA,MAEd,CAAc,CAAd,EAAOD,GAAP,CAAiB,EAAED,CAAF,CAAKC,GAAL,EAAY,CAA7B,CACEF,CAOA,CAPIF,GAAIM,CAAAA,UAAJ,CAAeH,CAAf,CAOJ,CAPwB,GAOxB,EAPgCH,GAAIM,CAAAA,UAAJ,CAAe,EAAEH,CAAjB,CAOhC,CAPsD,GAOtD,GAP+D,CAO/D,EAPoEH,GAAIM,CAAAA,UAAJ,CAAe,EAAEH,CAAjB,CAOpE,CAP0F,GAO1F,GAPmG,EAOnG,EAPyGH,GAAIM,CAAAA,UAAJ,CAAe,EAAEH,CAAjB,CAOzG,CAP+H,GAO/H,GAPwI,EAOxI,CANAD,CAMA,CAJe,UAIf,EAJCA,CAID,CAJK,KAIL,GAJ0C,KAI1C,EAJ8BA,CAI9B,GAJoC,EAIpC,GAJoD,EAIpD,EAHAA,CAGA,EADAA,CACA,GADM,EACN,CAAAD,CAAA,CAEe,UAFf,EAECC,CAFD,CAEK,KAFL,GAE0C,KAF1C,EAE8BA,CAF9B,GAEoC,EAFpC,GAEoD,EAFpD,EAIe,UAJf,EAICD,CAJD,CAIK,KAJL,GAI0C,KAJ1C,EAI8BA,CAJ9B,GAIoC,EAJpC,GAIoD,EAJpD,CAQF,QAAQG,GAAR,EACE,KAAK,CAAL,CACEH,CAAA;CAAMD,GAAIM,CAAAA,UAAJ,CAAeH,CAAf,CAAmB,CAAnB,CAAN,CAA8B,GAA9B,GAAuC,EAEzC,MAAK,CAAL,CACEF,CAAA,GAAMD,GAAIM,CAAAA,UAAJ,CAAeH,CAAf,CAAmB,CAAnB,CAAN,CAA8B,GAA9B,GAAuC,CAEzC,MAAK,CAAL,CACEF,CACA,EADKD,GAAIM,CAAAA,UAAJ,CAAeH,CAAf,CACL,CADyB,GACzB,CAAAF,CAAA,CAEe,UAFf,EAECA,CAFD,CAEK,KAFL,GAE0C,KAF1C,EAE8BA,CAF9B,GAEoC,EAFpC,GAEoD,EAFpD,CATJ,CAgBAA,CAAA,EAAKA,CAAL,GAAW,EACXA,EAAA,CAEe,UAFf,EAECA,CAFD,CAEK,KAFL,GAE0C,KAF1C,EAE8BA,CAF9B,GAEoC,EAFpC,GAEoD,EAFpD,CAGA,OAA8BM,EAArBN,CAAqBM,CAAjBN,CAAiBM,GAAX,EAAWA,IAAH,CAAGA,EAAAA,QAAvB,CAAgC,EAAhC,CAhDa,CAR8F;",
"sources":["node_modules/@emotion/hash/dist/hash.browser.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$emotion$hash$dist$hash_browser_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable */\n// Inspired by https://github.com/garycourt/murmurhash-js\n// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86\nfunction murmur2(str) {\n  // 'm' and 'r' are mixing constants generated offline.\n  // They're not really 'magic', they just happen to work well.\n  // const m = 0x5bd1e995;\n  // const r = 24;\n  // Initialize the hash\n  var h = 0; // Mix 4 bytes at a time into the hash\n\n  var k,\n      i = 0,\n      len = str.length;\n\n  for (; len >= 4; ++i, len -= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k =\n    /* Math.imul(k, m): */\n    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);\n    k ^=\n    /* k >>> r: */\n    k >>> 24;\n    h =\n    /* Math.imul(k, m): */\n    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^\n    /* Math.imul(h, m): */\n    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  } // Handle the last few bytes of the input array\n\n\n  switch (len) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h =\n      /* Math.imul(h, m): */\n      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  } // Do a few final mixes of the hash to ensure the last few\n  // bytes are well-incorporated.\n\n\n  h ^= h >>> 13;\n  h =\n  /* Math.imul(h, m): */\n  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  return ((h ^ h >>> 15) >>> 0).toString(36);\n}\n\nexports.default = murmur2;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","murmur2","str","h","k","i","len","length","charCodeAt","toString"]
}
