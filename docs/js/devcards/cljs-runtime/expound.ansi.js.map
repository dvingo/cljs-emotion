{"version":3,"sources":["expound/ansi.cljc"],"mappings":"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","names":["expound.ansi/sgr-code","expound.ansi/*enable-color*","expound.ansi/esc","codes","cljs.core.map","clojure.string.join","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","expound.ansi/escape","seq55851","self__4852__auto__","cljs.core/seq","expound.ansi/sgr","seq55855","G__55856","cljs.core/first","cljs.core/next","self__4851__auto__","string","expound.ansi.escape","expound.ansi/*print-styles*","expound.ansi/resolve-styles","styles","temp__5751__auto__","res","cljs.core/not-empty","p1__55861#","cljs.core.mapcat","or__4253__auto__","temp__5753__auto__","expound.ansi/color","seq55869","G__55870","s","cljs.core.apply"],"sourcesContent":["(ns ^:no-doc expound.ansi\n  (:require [clojure.string :as string]))\n\n;; Copied from strictly-specking, since I see no reason\n;; to deviate from the colors displayed in figwheel\n;; https://github.com/bhauman/strictly-specking/blob/f102c9bd604f0c238a738ac9e2b1f6968fdfd2d8/src/strictly_specking/ansi_util.clj\n\n(def sgr-code\n  \"Map of symbols to numeric SGR (select graphic rendition) codes.\"\n  {:none        0\n   :bold        1\n   :underline   3\n   :blink       5\n   :reverse     7\n   :hidden      8\n   :strike      9\n   :black      30\n   :red        31\n   :green      32\n   :yellow     33\n   :blue       34\n   :magenta    35\n   :cyan       36\n   :white      37\n   :fg-256     38\n   :fg-reset   39\n   :bg-black   40\n   :bg-red     41\n   :bg-green   42\n   :bg-yellow  43\n   :bg-blue    44\n   :bg-magenta 45\n   :bg-cyan    46\n   :bg-white   47\n   :bg-256     48\n   :bg-reset   49})\n\n(def ^:dynamic *enable-color* false)\n\n(defn esc\n  \"Returns an ANSI escope string which will apply the given collection of SGR\n  codes.\"\n  [codes]\n  (let [codes (map sgr-code codes codes)\n        codes (string/join \\; codes)]\n    (str \\u001b \\[ codes \\m)))\n\n(defn escape\n  \"Returns an ANSI escope string which will enact the given SGR codes.\"\n  [& codes]\n  (esc codes))\n\n(defn sgr\n  \"Wraps the given string with SGR escapes to apply the given codes, then reset\n  the graphics.\"\n  [string & codes]\n  (str (esc codes) string (escape :none)))\n\n(def ^:dynamic *print-styles*\n  {:highlight   [:bold]\n   :good        [:green]\n   :good-pred   [:green]\n   :good-key    [:green]\n   :bad         [:red]\n   :bad-value   [:red]\n   :error-key   [:red]\n   :focus-key   [:bold]\n   :correct-key [:green]\n   :header      [:cyan]\n   :footer      [:cyan]\n   :warning-key [:bold]\n   :focus-path  [:magenta]\n   :message     [:magenta]\n   :pointer     [:magenta]\n   :none        [:none]})\n\n(defn resolve-styles [styles]\n  (if-let [res (not-empty\n                (mapcat #(or\n                          (when-let [res (*print-styles* %)]\n                            res)\n                          [%])\n                        styles))]\n    res\n    ;; fall back to bright\n    [:bold]))\n\n(defn color [s & styles]\n  (if *enable-color*\n    (apply sgr s (resolve-styles styles))\n    s))\n"]}