{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$ocaml.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkFrHD,MAAOC,CAAAA,OAAP,CAxEAC,QAAc,CAACC,IAAD,CAAO,CAEnB,MAAO,CACLC,KAAM,OADD,CAELC,QAAS,CAAC,IAAD,CAFJ,CAGLC,SAAU,CACRC,SAAU,cADF,CAERC,QACE,qVAHM;AAURC,SAEE,oHAZM,CAeRC,QACE,YAhBM,CAHL,CAqBLC,QAAS,SArBJ,CAsBLC,SAAU,CACR,CACEC,UAAW,SADb,CAEEC,MAAO,wBAFT,CAGEC,UAAW,CAHb,CADQ,CAMRZ,IAAKa,CAAAA,OAAL,CACE,QADF,CAEE,QAFF,CAGE,CACEJ,SAAU,CAAC,MAAD,CADZ,CAHF,CANQ,CAaR,CACEC,UAAW,QADb,CAEEC,MAAO,wBAFT,CAbQ,CAkBR,CACED,UAAW,MADb,CAEEC,MAAO,eAFT,CAlBQ,CAsBR,CACED,UAAW,MADb,CAEEC,MAAO,iBAFT,CAGEC,UAAW,CAHb,CAtBQ,CA2BR,CACED,MAAO,oBADT,CACiCC,UAAW,CAD5C,CA3BQ,CA8BRZ,IAAKc,CAAAA,OAAL,CAAad,IAAKe,CAAAA,gBAAlB;AAAoC,CAACL,UAAW,QAAZ,CAAsBE,UAAW,CAAjC,CAApC,CA9BQ,CA+BRZ,IAAKc,CAAAA,OAAL,CAAad,IAAKgB,CAAAA,iBAAlB,CAAqC,CAACR,QAAS,IAAV,CAArC,CA/BQ,CAgCR,CACEE,UAAW,QADb,CAEEC,MACE,0HAHJ,CAOEC,UAAW,CAPb,CAhCQ,CAyCR,CACED,MAAO,IADT,CAzCQ,CAtBL,CAFY,CAVgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/ocaml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$ocaml\"] = function(global,require,module,exports) {\n/*\nLanguage: OCaml\nAuthor: Mehdi Dogguy <mehdi@dogguy.org>\nContributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>\nDescription: OCaml language definition.\nWebsite: https://ocaml.org\nCategory: functional\n*/\n\nfunction ocaml(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    name: 'OCaml',\n    aliases: ['ml'],\n    keywords: {\n      $pattern: '[a-z_]\\\\w*!?',\n      keyword:\n        'and as assert asr begin class constraint do done downto else end ' +\n        'exception external for fun function functor if in include ' +\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\n        'mod module mutable new object of open! open or private rec sig struct ' +\n        'then to try type val! val virtual when while with ' +\n        /* camlp4 */\n        'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n        /* (some) types in Pervasives */\n        'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /->/ // relevance booster\n      }\n    ]\n  }\n}\n\nmodule.exports = ocaml;\n\n};"],
"names":["shadow$provide","global","require","module","exports","ocaml","hljs","name","aliases","keywords","$pattern","keyword","built_in","literal","illegal","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE"]
}
