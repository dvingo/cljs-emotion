{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$hy.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6GlHD,MAAOC,CAAAA,OAAP,CApGAC,QAAW,CAACC,IAAD,CAAO,CA4ChB,IAAIC,OAAS,CACXC,UAAW,QADA,CACUC,MAPAC,qBAMV,CAEXC,UAAW,CAFA,CAAb,CAIIC,OAASN,IAAKO,CAAAA,OAAL,CAAaP,IAAKQ,CAAAA,iBAAlB,CAAqC,CAACC,QAAS,IAAV,CAArC,CAJb,CAKIC,QAAUV,IAAKU,CAAAA,OAAL,CACZ,GADY,CAEZ,GAFY,CAGZ,CACEL,UAAW,CADb,CAHY,CALd,CAYIM,QAAU,CACZT,UAAW,SADC,CAEZC,MAAO,iCAFK,CAZd,CAgBIS,WAAa,CACfT,MAAO,UADQ,CACIU,IAAK,UADT,CAhBjB,CAmBIC,KAAO,CACTZ,UAAW,SADF,CAETC,MAAO,kFAFE,CAnBX;AAuBIY,SAAWf,IAAKU,CAAAA,OAAL,CAAa,QAAb,CAAuB,KAAvB,CAvBf,CAwBIM,IAAM,CACRd,UAAW,QADH,CAERC,MAAO,uFAFC,CAxBV,CA4BIc,KAAO,CACTd,MAAO,KADE,CACKU,IAAK,KADV,CA5BX,CA+BIK,KAAO,CACTC,eAAgB,CAAA,CADP,CAETd,UAAW,CAFF,CA/BX,CAmCIe,KAAO,CACTlB,UAAW,MADF,CAETG,UAAW,CAFF,CAGTgB,SA/EaA,CACbC,SAFcC,+EACDF,CAEb,eAEE,kqEAJWA,CA4EJ;AAITlB,MAjFcoB,+EA6EL,CAKTC,OAAQN,IALC,CAnCX,CA0CIO,iBAAmB,CAACR,IAAD,CAAOX,MAAP,CAAeQ,IAAf,CAAqBC,QAArB,CAA+BL,OAA/B,CAAwCM,GAAxC,CAA6CJ,UAA7C,CAAyDX,MAAzD,CAAiEU,OAAjE,CA9CVe,CACXvB,MAvCcoB,+EAsCHG,CAEXrB,UAAW,CAFAqB,CA8CU,CAEvBT,KAAKU,CAAAA,QAAL,CAAgB,CAAC3B,IAAKU,CAAAA,OAAL,CAAa,SAAb,CAAwB,EAAxB,CAAD,CAA8BU,IAA9B,CAAoCF,IAApC,CAChBA,KAAKS,CAAAA,QAAL,CAAgBF,gBAChBb,WAAWe,CAAAA,QAAX,CAAsBF,gBAEtB,OAAO,CACLG,KAAM,IADD,CAELC,QAAS,CAAC,QAAD,CAFJ,CAGLpB,QAAS,IAHJ,CAILkB,SAAU,CAAC3B,IAAK8B,CAAAA,OAAL,EAAD,CAAiBb,IAAjB,CAAuBX,MAAvB,CAA+BQ,IAA/B,CAAqCC,QAArC;AAA+CL,OAA/C,CAAwDM,GAAxD,CAA6DJ,UAA7D,CAAyEX,MAAzE,CAAiFU,OAAjF,CAJL,CA5FS,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/hy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$hy\"] = function(global,require,module,exports) {\n/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp that\u2019s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\n\nfunction hy(hljs) {\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n      // keywords\n      '!= % %= & &= * ** **= *= *map ' +\n      '+ += , --build-class-- --import-- -= . / // //= ' +\n      '/= < << <<= <= = > >= >> >>= ' +\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\n      'compress cond cons cons? continue count curry cut cycle dec ' +\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\n      'identity if if* if-not if-python2 import in inc input instance? ' +\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\n   };\n\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    className: 'name',\n    relevance: 0,\n    keywords: keywords,\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Hy',\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [hljs.SHEBANG(), LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = hy;\n\n};"],
"names":["shadow$provide","global","require","module","exports","hy","hljs","NUMBER","className","begin","SIMPLE_NUMBER_RE","relevance","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","keywords","$pattern","SYMBOL_RE","starts","DEFAULT_CONTAINS","SYMBOL","contains","name","aliases","SHEBANG"]
}
