{"version":3,"sources":["devcards/util/edn_renderer.cljs"],"mappings":"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","names":["js/devcards","js/devcards.util","js/devcards.util.edn-renderer","js/devcards.util.edn-renderer.*key-counter*","devcards.util.edn-renderer/*key-counter*","devcards.util.edn-renderer/get-key","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","devcards.util.edn-renderer/literal?","x","cljs.core/map-entry?","cljs.core/seq?","cljs.core/coll?","devcards.util.edn-renderer/separator*","s","G__51397","G__51398","G__51399","sablono.interpreter/interpret","sablono.core/create-element","devcards.util.edn-renderer/clearfix-separator*","G__51416","G__51417","G__51418","G__51419","G__51420","G__51421","devcards.util.edn-renderer/separate-fn","coll","e51424","cljs.core/every?","js/Error","e","devcards.util.edn-renderer/interpose-separator","rct-coll","sep-fn","cljs.core/rest","cljs.core.interleave","cljs.core.repeatedly","cljs.core/cons","cljs.core/first","cljs.core/to-array","devcards.util.edn-renderer/literal","class","G__51439","G__51440","G__51441","devcards.util.utils/pprint-str","devcards.util.edn-renderer/html-val","index","v","G__51447","G__51448","G__51449","devcards.util.edn-renderer/html","devcards.util.edn-renderer/join-html","separator","cljs.core.into","cljs.core.map_indexed","p__51455","vec__51460","cljs.core.nth","devcards.util.edn-renderer/html-keyval","k","G__51466","G__51467","G__51468","G__51469","cljs.core.prn_str","devcards.util.edn-renderer/html-keyvals","cljs.core.mapv","cljs.core/vals","devcards.util.edn-renderer/open-close","class-str","opener","closer","G__51477","G__51478","G__51479","G__51488","G__51489","G__51490","G__51480","G__51492","G__51493","G__51494","G__51481","G__51496","G__51497","G__51498","cljs.core/hash","devcards.util.edn-renderer/html-collection","devcards.util.edn-renderer/html-map","devcards.util.edn-renderer/html-string","cljs.core/Keyword","cljs.core/Symbol","cljs.core/map?","cljs.core/set?","cljs.core/vector?","devcards.util.edn-renderer/html-edn","*key-counter*-orig-val__51510","*key-counter*-temp-val__51511","cljs.core.atom","G__51514","G__51515","G__51516"],"sourcesContent":["(ns devcards.util.edn-renderer\n  (:require\n   [sablono.core :as sab]\n   [devcards.util.utils :as utils]))\n\n(defonce ^:dynamic *key-counter* nil)\n\n(defn get-key []\n  (swap! *key-counter* inc)\n  (str \"k-\" @*key-counter*))\n\n(declare html)\n\n(defn literal? [x]\n  (and\n   (not (map-entry? x))\n   (not (seq? x))\n   (not (coll? x))))\n\n(defn separator* [s]\n  (sab/html [:span.seperator {:key (get-key)} s]))\n\n(defn clearfix-separator* [s]\n  (sab/html [:span {:key (get-key)} (separator* s) [:span.clearfix]]))\n\n(defn separate-fn [coll]\n  (try\n    (if (not (every? literal? coll)) clearfix-separator* separator*)\n    (catch js/Error e\n      clearfix-separator*)))\n\n(defn interpose-separator [rct-coll s sep-fn]\n  (->> (rest rct-coll)\n       (interleave (repeatedly #(sep-fn s))) \n       (cons (first rct-coll))\n       to-array))\n\n(defn literal [class x]\n  (sab/html [:span { :className class :key (get-key)} (utils/pprint-str x)]))\n\n(defn html-val [index v]\n  (sab/html [:span {:key index} (html v)]))\n\n(defn join-html [separator coll]\n  (interpose-separator (into [] (map-indexed html-val coll))\n                       separator\n                       (separate-fn coll)))\n\n(defn html-keyval [[k v]]\n  (sab/html\n   [:span.keyval { :key (prn-str k)} (html k) (html v)]))\n\n(defn html-keyvals [coll]\n  (interpose-separator (mapv html-keyval coll)\n                       \" \"\n                       (separate-fn (vals coll))))\n\n(defn open-close [class-str opener closer rct-coll]\n  (sab/html\n   [:span {:className class-str :key (str (hash rct-coll))}\n    [:span.opener {:key 1} opener]\n    [:span.contents {:key 2} rct-coll]\n    [:span.closer {:key 3} closer]]))\n\n(defn html-collection [class opener closer coll]\n  (open-close (str \"collection \" class ) opener closer (join-html \" \" coll))\n    ;; this speeds things up but fails in om\n  #_(rct/pure coll ...)\n  )\n\n(defn html-map [coll]\n  (open-close \"collection map\" \"{\" \"}\" (html-keyvals coll))\n  ;; this speeds things up but fails in om\n  #_(rct/pure coll ...))\n\n(defn html-string [s]\n  (open-close \"string\" \"\\\"\" \"\\\"\" s))\n\n(defn html [x]\n  (cond\n   (number? x)  (literal \"number\" x)\n   (keyword? x) (literal \"keyword\" x)\n   (symbol? x)  (literal \"symbol\" x)\n   (string? x)  (html-string x)\n   (map? x)     (html-map x)\n   (set? x)     (html-collection \"set\"    \"#{\" \"}\" x)\n   (vector? x)  (html-collection \"vector\" \"[\" \"]\" x)\n   (seq? x)     (html-collection \"seq\"    \"(\" \")\" x)\n   :else        (literal \"literal\" x)))\n\n(defn html-edn [e]\n  (binding [*key-counter* (atom 0)]\n    (sab/html [:div.com-rigsomelight-rendered-edn.com-rigsomelight-devcards-typog\n               {:key \"devcards-edn-block\"} (html e)])))\n"]}