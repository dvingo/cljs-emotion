{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$smalltalk.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+DzHD,MAAOC,CAAAA,OAAP,CAvDAC,QAAkB,CAACC,IAAD,CAAO,CAEvB,MAAMC,KAAO,CACXC,UAAW,QADA,CAEXC,MAAO,SAFI,CAAb,CAIMC,OAAS,CACbF,UAAW,QADE,CAEbC,MAAO,GAAPA,CAAaH,IAAKK,CAAAA,mBAFL,CAIf,OAAO,CACLC,KAAM,WADD,CAELC,QAAS,CAAE,IAAF,CAFJ,CAGLC,SAAU,uCAHL,CAILC,SAAU,CACRT,IAAKU,CAAAA,OAAL,CAAa,GAAb,CAAkB,GAAlB,CADQ,CAERV,IAAKW,CAAAA,gBAFG,CAGR,CACET,UAAW,MADb,CAEEC,MAAO,uBAFT,CAGES,UAAW,CAHb,CAHQ,CAQR,CACET,MAAO,qBADT,CAEES,UAAW,CAFb,CARQ;AAYRZ,IAAKa,CAAAA,aAZG,CAaRT,MAbQ,CAcRH,IAdQ,CAeR,CAIEE,MAAO,2DAJT,CAKEW,YAAa,CAAA,CALf,CAMEC,IAAK,IANP,CAOEC,QAAS,IAPX,CAQEP,SAAU,CAAE,CACVN,MAAO,8BADG,CAAF,CARZ,CAfQ,CA2BR,CACEA,MAAO,MADT,CAEEY,IAAK,KAFP,CAGEN,SAAU,CACRT,IAAKW,CAAAA,gBADG,CAERV,IAFQ,CAGRD,IAAKa,CAAAA,aAHG,CAIRT,MAJQ,CAHZ,CA3BQ,CAJL,CAVgB,CARgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/smalltalk.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$smalltalk\"] = function(global,require,module,exports) {\n/*\nLanguage: Smalltalk\nDescription: Smalltalk is an object-oriented, dynamically typed reflective programming language.\nAuthor: Vladimir Gubarkov <xonixx@gmail.com>\nWebsite: https://en.wikipedia.org/wiki/Smalltalk\n*/\n\nfunction smalltalk(hljs) {\n  const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';\n  const CHAR = {\n    className: 'string',\n    begin: '\\\\$.{1}'\n  };\n  const SYMBOL = {\n    className: 'symbol',\n    begin: '#' + hljs.UNDERSCORE_IDENT_RE\n  };\n  return {\n    name: 'Smalltalk',\n    aliases: [ 'st' ],\n    keywords: 'self super nil true false thisContext', // only 6\n    contains: [\n      hljs.COMMENT('\"', '\"'),\n      hljs.APOS_STRING_MODE,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n        relevance: 0\n      },\n      {\n        begin: VAR_IDENT_RE + ':',\n        relevance: 0\n      },\n      hljs.C_NUMBER_MODE,\n      SYMBOL,\n      CHAR,\n      {\n        // This looks more complicated than needed to avoid combinatorial\n        // explosion under V8. It effectively means `| var1 var2 ... |` with\n        // whitespace adjacent to `|` being optional.\n        begin: '\\\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\\\|',\n        returnBegin: true,\n        end: /\\|/,\n        illegal: /\\S/,\n        contains: [ {\n          begin: '(\\\\|[ ]*)?' + VAR_IDENT_RE\n        } ]\n      },\n      {\n        begin: '#\\\\(',\n        end: '\\\\)',\n        contains: [\n          hljs.APOS_STRING_MODE,\n          CHAR,\n          hljs.C_NUMBER_MODE,\n          SYMBOL\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = smalltalk;\n\n};"],
"names":["shadow$provide","global","require","module","exports","smalltalk","hljs","CHAR","className","begin","SYMBOL","UNDERSCORE_IDENT_RE","name","aliases","keywords","contains","COMMENT","APOS_STRING_MODE","relevance","C_NUMBER_MODE","returnBegin","end","illegal"]
}
