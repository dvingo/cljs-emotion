{"version":3,"sources":["expound/printer.cljc"],"mappings":"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","names":["expound.printer/indent-level","expound.printer/anon-fn-str","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha/or-spec-impl","cljs.core/qualified-keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","G__56089","cljs.core/coll?","cljs.core/keyword?","expound.printer/str-width","lines","cljs.core.apply","cljs.core/max","cljs.core.map","cljs.core/count","expound.printer/max-column-width","rows","i","p1__56099#","clojure.string/split-lines","cljs.core.nth","expound.printer/max-row-height","row","p1__56100#","expound.printer/indented-multirows","column-widths","multi-rows","multi-row","cljs.core.map_indexed","v","G__56102","G__56103","expound.printer/format","expound.printer/formatted-row","edge","spacer","middle","clojure.string.join","expound.printer/table","multirows","header","cljs.core/first","columns-dividers","p1__56104#","cljs.core/str","cljs.core.repeat","header-columns-dividers","p1__56105#","header-divider","row-divider","formatted-multirows","multirow","cljs.core.concat","cljs.core.mapcat","cljs.core/vector","cljs.core/butlast","cljs.core/seq","expound.printer/multirow","row-height","split-row-contents","cljs.core.mapv","iter__4652__auto__","s__56113","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__56115","cljs.core/chunk-buffer","i__56114","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56112","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","row-idx","cljs.core.range","s__56119","b__56121","i__56120","iter__56118","s__56134","b__56136","i__56135","iter__56133","col-idx","cljs.core.get_in","expound.printer/multirows","row-heights","idx","cljs.core.get","expound.printer/formatted-multirows","column-keys","map-rows","cljs.core/empty?","cljs.core.into","p1__56141#","_","expound.printer/table-str","line","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/maybe-impl","G__56170","G__56174","cljs.core/map?","var_args","G__56176","expound.printer/print-table","js/Error","expound.printer.print_table","cljs.core/keys","cljs.core.print","expound.printer/keywords","form","cljs.core/tree-seq","cljs.core.filter","expound.printer/singleton?","xs","cljs.core._EQ_","expound.printer/specs-from-form","via","G__56177","cljs.core/last","cljs.spec.alpha/form","conformed","cljs.spec.alpha/conform","and__4251__auto__","cljs.core.not_EQ_","x","cljs.core/vector?","cljs.core/second","cljs.core/set","expound.printer/key->spec","keys","problems","seq__56180","chunk__56181","count__56182","i__56183","c__4679__auto__","cljs.core/chunk-first","cljs.core/next","p","expound.util/assert-message","vias","specs","cljs.core/every?","temp__5751__auto__","clojure.set/union","cljs.core.reduce","m","k","cljs.core.assoc","or__4253__auto__","p1__56178#","cljs.core/name","p__56191","vec__56192","expound.printer/summarize-key-clause","branch","match","G__56195","cljs.core/Keyword","cljs.core/list","cljs.core.symbol","expound.printer/missing-key","vec__56204","G__56210","expound.printer/elide-core-ns","s","clojure.string/replace","expound.printer/elide-spec-ns","expound.printer/pprint-fn","f","fn-parts","clojure.string.split","cljs.core/re-find","cljs.core.pr_str","ns-n","fn-n","cljs.core/demunge","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","seq56211","G__56213","self__4851__auto__","fmt","args","goog.string/format","cljs.core/string?","expound.printer/pprint-str","cljs.core/fn?","cljs.pprint.write","expound.printer/expand-spec","spec","expanded-spec","cljs.spec.alpha/get-spec","expound.printer/simple-spec-or-name","spec-name","expanded","spec-str","expound.printer/print-spec-keys*","p1__56222#","cljs.core/some","cljs.core/simple-keyword?","p__56226","vec__56227","p1__56223#","cljs.core.sort_by","expound.printer/print-spec-keys","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__56231","cljs.core/*print-newline*","*print-fn*-orig-val__56232","cljs.core/*print-fn*","*print-newline*-temp-val__56233","*print-fn*-temp-val__56234","x__4796__auto__","clojure.string/trim","expound.printer/print-missing-keys","keys-clauses","cljs.core.distinct","cljs.core.comp","p1__56240#","expound.ansi.color","cljs.core.sort","expound.printer/no-trailing-whitespace","s'","clojure.string/trimr","cljs.core/nat-int?","G__56280","expound.printer/indent","expound.printer.indent","indent-level","first-line-indent","rest-lines-indent","vec__56281","seq__56282","first__56283","p1__56277#","expound.printer/escape-replacement","_pattern","expound.printer/blank-form","cljs.core/zipmap","cljs.core/vec","cljs.core/set?","cljs.core/list?","cljs.core/seq?","cljs.core/boolean?","expound.printer/summary-form","show-valid-values?","in","vec__56303","seq__56304","first__56305","rst","displayed-form","expound.paths/kps?","cljs.core.dissoc","G__56310","G__56311","G__56312","expound.paths/kvps?","cljs.core/associative?","G__56318","G__56319","G__56320","cljs.core/int?","G__56322","G__56323","G__56324","G__56325","G__56326","G__56327","G__56330","G__56331","G__56332","cljs.core.ex_info","expound.printer/highlight-line","prefix","replacement","max-width","p1__56333#","expound.printer/highlighted-value","opts","problem","map__56343","cljs.core/--destructure-map","map__56344","vec__56345","seq__56346","first__56347","printed-val","expound.paths/value-in","relevant","regex","cljs.core/re-pattern","*print-namespace-maps*-orig-val__56349","*print-namespace-maps*-temp-val__56350","cljs.core/*print-namespace-maps*","clojure.walk/prewalk-replace","_more","highlighted-line"],"sourcesContent":["(ns ^:no-doc expound.printer\n  (:require [clojure.string :as string]\n            [clojure.spec.alpha :as s]\n            [clojure.pprint :as pprint]\n            [clojure.set :as set]\n            [expound.util :as util]\n            [expound.ansi :as ansi]\n            [expound.paths :as paths]\n            [clojure.walk :as walk]\n            #?(:cljs [goog.string.format]) ; https://github.com/bhb/expound/issues/183\n            #?(:cljs [goog.string])        ; https://github.com/bhb/expound/issues/183\n            #?(:clj [clojure.main :as main]))\n  (:refer-clojure :exclude [format]))\n\n(def indent-level 2)\n(def anon-fn-str \"<anonymous function>\")\n\n(s/def :expound.spec/spec-conjunction\n  (s/cat\n   :op #{'or 'and}\n   :specs (s/+ :expound.spec/kw-or-conjunction)))\n(s/def :expound.spec/kw-or-conjunction\n  (s/or\n   :kw qualified-keyword?\n   :conj :expound.spec/spec-conjunction))\n(s/def :expound.spec/key-spec\n  (s/cat :keys #{'clojure.spec.alpha/keys\n                 'cljs.spec.alpha/keys}\n         :clauses (s/*\n                   (s/cat :qualifier #{:req-un :req :opt-un :opt}\n                          :specs (s/coll-of :expound.spec/kw-or-conjunction)))))\n(s/def :expound.spec/contains-key-pred (s/or\n                                        :simple (s/cat\n                                                 :contains #{`contains? 'contains?}\n                                                 :arg #{'%}\n                                                 :kw keyword?)\n                                        :compound (s/cat\n                                                   :op #{`or `and}\n                                                   :clauses (s/+ :expound.spec/contains-key-pred))))\n\n(declare format)\n\n(defn ^:private str-width [lines]\n  (apply max (map count lines)))\n\n(defn ^:private max-column-width [rows i]\n  (apply max 0 (map #(str-width (string/split-lines (str (nth % i)))) rows)))\n\n(defn ^:private max-row-height [row]\n  (apply max 0\n         (map #(count (string/split-lines (str %))) row)))\n\n(defn ^:private indented-multirows [column-widths multi-rows]\n  (->> multi-rows\n       (map\n        (fn [multi-row]\n          (map\n           (fn [row]\n             (map-indexed\n              (fn [i v]\n                (format (str \"%-\" (nth column-widths i) \"s\") v))\n              row))\n           multi-row)))))\n\n(defn ^:private formatted-row [row edge spacer middle]\n  (str edge spacer\n       (string/join (str spacer middle spacer) row)\n       spacer edge))\n\n(defn ^:private table [multirows]\n  (let [header (first (first multirows))\n        columns-dividers (map #(apply str (repeat (count (str %)) \"-\")) header)\n        header-columns-dividers (map #(apply str (repeat (count (str %)) \"=\")) header)\n        header-divider (formatted-row header-columns-dividers \"|\" \"=\" \"+\")\n        row-divider (formatted-row columns-dividers \"|\" \"-\" \"+\")\n        formatted-multirows (->> multirows\n                                 (map\n                                  (fn [multirow]\n                                    (map (fn [row] (formatted-row row \"|\" \" \" \"|\")) multirow))))]\n\n    (->>\n     (concat [[header-divider]] (repeat [row-divider]))\n     (mapcat vector formatted-multirows)\n     (butlast) ;; remove the trailing row-divider\n     (mapcat seq))))\n\n(defn ^:private multirow [row-height row]\n  (let [split-row-contents (mapv (fn [v] (string/split-lines (str v))) row)]\n    (for [row-idx (range row-height)]\n      (for [col-idx (range (count row))]\n        (get-in split-row-contents [col-idx row-idx] \"\")))))\n\n(defn ^:private multirows [row-heights rows]\n  (map-indexed (fn [idx row] (multirow (get row-heights idx) row)) rows))\n\n(defn ^:private formatted-multirows [column-keys map-rows]\n  (when-not (empty? map-rows)\n    (let [rows (into [column-keys] (map #(map % column-keys) map-rows))\n          row-heights (mapv max-row-height rows)\n          column-widths (map-indexed\n                         (fn [i _] (max-column-width rows i))\n                         (first rows))]\n\n      (->>\n       rows\n       (multirows row-heights)\n       (indented-multirows column-widths)))))\n\n(defn table-str [column-keys map-rows]\n  (str\n   \"\\n\"\n   (apply str\n          (map\n           (fn [line] (str line \"\\n\"))\n           (table (formatted-multirows column-keys map-rows))))))\n\n(s/fdef print-table\n  :args (s/cat\n         :columns (s/? (s/coll-of any?))\n         :map-rows (s/coll-of map?)))\n(defn print-table\n  ([map-rows]\n   (print-table (keys (first map-rows)) map-rows))\n  ([column-keys map-rows]\n   (print (table-str column-keys map-rows))))\n\n;;;; private\n\n\n(defn keywords [form]\n  (->> form\n       (tree-seq coll? seq)\n       (filter keyword?)))\n\n(defn singleton? [xs]\n  (= 1 (count xs)))\n\n(defn specs-from-form [via]\n  (let [form (some-> via last s/form)\n        conformed (s/conform :expound.spec/key-spec form)]\n    ;; The containing spec might not be\n    ;; a simple 'keys' call, in which case we give up\n    (if (and form\n             (not= ::s/invalid conformed))\n      (->> (:clauses conformed)\n           (map :specs)\n           (tree-seq coll? seq)\n           (filter\n            (fn [x]\n              (and (vector? x) (= :kw (first x)))))\n           (map second)\n           set)\n      #{})))\n\n(defn key->spec [keys problems]\n  (doseq [p problems]\n    (assert (some? (:expound/via p)) util/assert-message))\n  (let [vias (map :expound/via problems)\n        specs (if (every? qualified-keyword? keys)\n                keys\n                (if-let [specs (apply set/union (map specs-from-form vias))]\n                  specs\n                  keys))]\n    (reduce\n     (fn [m k]\n       (assoc m\n              k\n              (if (qualified-keyword? k)\n                k\n                (or (->> specs\n                         (filter #(= (name k) (name %)))\n                         first)\n                    \"<can't find spec for unqualified spec identifier>\"))))\n     {}\n     keys)))\n\n(defn summarize-key-clause [[branch match]]\n  (case branch\n    :simple\n    (:kw match)\n\n    :compound\n    (apply list\n           (symbol (name (:op match)))\n           (map summarize-key-clause (:clauses match)))))\n\n(defn missing-key [form]\n  (let [[branch match] (s/conform :expound.spec/contains-key-pred (nth form 2))]\n    (case branch\n      :simple\n      (:kw match)\n\n      :compound\n      (summarize-key-clause [branch match]))))\n\n;;;; public\n\n(defn elide-core-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.core/\" \"\")\n               (string/replace \"cljs/core/\" \"\"))\n     :clj (string/replace s \"clojure.core/\" \"\")))\n\n(defn elide-spec-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.spec.alpha/\" \"\")\n               (string/replace \"cljs/spec/alpha\" \"\"))\n     :clj (string/replace s \"clojure.spec.alpha/\" \"\")))\n\n(defn pprint-fn [f]\n  (-> #?(:clj\n         (let [[_ ns-n f-n] (re-matches #\"(.*)\\$(.*?)(__[0-9]+)?\" (str f))]\n           (if (re-matches #\"^fn__\\d+\\@.*$\" f-n)\n             anon-fn-str\n             (str\n              (main/demunge ns-n) \"/\"\n              (main/demunge f-n))))\n         :cljs\n         (let [fn-parts (string/split (second (re-find\n                                               #\"object\\[([^\\( \\]]+).*(\\n|\\])?\"\n                                               (pr-str f)))\n                                      #\"\\$\")\n               ns-n (string/join \".\" (butlast fn-parts))\n               fn-n  (last fn-parts)]\n           (if (empty? ns-n)\n             anon-fn-str\n             (str\n              (demunge ns-n) \"/\"\n              (demunge fn-n)))))\n      (elide-core-ns)\n      (string/replace #\"--\\d+\" \"\")\n      (string/replace #\"@[a-zA-Z0-9]+\" \"\")))\n\n#?(:cljs\n   (defn format [fmt & args]\n     (apply goog.string/format fmt args))\n   :clj (def format clojure.core/format))\n\n(s/fdef pprint-str\n  :args (s/cat :x any?)\n  :ret string?)\n(defn pprint-str\n  \"Returns the pretty-printed string\"\n  [x]\n  (if (fn? x)\n    (pprint-fn x)\n    (pprint/write x :stream nil)))\n\n(defn expand-spec [spec]\n  (let [expanded-spec (if (s/get-spec spec)\n                        (s/form spec)\n                        spec)]\n    (if (string? expanded-spec)\n      expanded-spec\n      (pprint-str expanded-spec))))\n\n(defn simple-spec-or-name [spec-name]\n  (let [expanded (expand-spec spec-name)\n        spec-str (elide-spec-ns (elide-core-ns\n                                 (if (nil? expanded)\n                                   \"nil\"\n                                   expanded)))]\n\n    spec-str))\n\n(defn print-spec-keys* [problems]\n  (let [keys (keywords (map #(missing-key (:pred %)) problems))]\n    (if (and (empty? (:expound/via (first problems)))\n             (some simple-keyword? keys))\n      ;; The containing spec is not present in the problems\n      ;; and at least one key is not namespaced, so we can't figure out\n      ;; the spec they intended.\n      nil\n\n      (->> (key->spec keys problems)\n           (map (fn [[k v]] {\"key\" k \"spec\" (simple-spec-or-name v)}))\n           (sort-by #(get % \"key\"))))))\n\n(defn print-spec-keys [problems]\n  (->>\n   (print-spec-keys* problems)\n   (print-table [\"key\" \"spec\"])\n   with-out-str\n   string/trim))\n\n(defn print-missing-keys [problems]\n  (let [keys-clauses (distinct (map (comp missing-key :pred) problems))]\n    (if (every? keyword? keys-clauses)\n      (string/join \", \" (map #(ansi/color % :correct-key) (sort keys-clauses)))\n      (str \"\\n\\n\"\n           (ansi/color (pprint-str\n                        (if (singleton? keys-clauses)\n                          (first keys-clauses)\n                          (apply list\n                                 'and\n                                 keys-clauses))) :correct-key)))))\n\n(s/fdef no-trailing-whitespace\n  :args (s/cat :s string?)\n  :ret string?)\n(defn no-trailing-whitespace\n  \"Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed.\"\n  [s]\n  (let [s' (->> s\n                string/split-lines\n                (map string/trimr)\n                (string/join \"\\n\"))]\n    (if (= \\newline (last s))\n      (str s' \"\\n\")\n      s')))\n\n(s/fdef indent\n  :args (s/cat\n         :first-line-indent-level (s/? nat-int?)\n         :indent-level (s/? nat-int?)\n         :s string?)\n  :ret string?)\n(defn indent\n  \"Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts.\"\n  ([s]\n   (indent indent-level s))\n  ([indent-level s]\n   (indent indent-level indent-level s))\n  ([first-line-indent rest-lines-indent s]\n   (let [[line & lines] (string/split-lines (str s))]\n     (->> lines\n          (map #(str (apply str (repeat rest-lines-indent \" \")) %))\n          (into [(str (apply str (repeat first-line-indent \" \")) line)])\n          (string/join \"\\n\")))))\n\n(defn escape-replacement [#?(:clj pattern :cljs _pattern) s]\n  #?(:clj (if (string? pattern)\n            s\n            (string/re-quote-replacement s))\n     :cljs (string/replace s #\"\\$\" \"$$$$\")))\n\n(defn blank-form [form]\n  (cond\n    (map? form)\n    (zipmap (keys form) (repeat :expound.problems/irrelevant))\n\n    (vector? form)\n    (vec (repeat (count form) :expound.problems/irrelevant))\n\n    (set? form)\n    form\n\n    (or (list? form)\n        (seq? form))\n    (apply list (repeat (count form) :expound.problems/irrelevant))\n\n    :else\n    :expound.problems/irrelevant))\n\n(s/fdef summary-form\n  :args (s/cat :show-valid-values? boolean?\n               :form any?\n               :highlighted-path :expound/path))\n(defn summary-form [show-valid-values? form in]\n  (let [[k & rst] in\n        rst (or rst [])\n        displayed-form (if show-valid-values? form (blank-form form))]\n    (cond\n      (empty? in)\n      :expound.problems/relevant\n\n      (and (map? form) (paths/kps? k))\n      (-> displayed-form\n          (dissoc (:key k))\n          (assoc (summary-form show-valid-values? (:key k) rst)\n                 :expound.problems/irrelevant))\n\n      (and (map? form) (paths/kvps? k))\n      (recur show-valid-values? (nth (seq form) (:idx k)) rst)\n\n      (associative? form)\n      (assoc displayed-form\n             k\n             (summary-form show-valid-values? (get form k) rst))\n\n      (and (int? k) (seq? form))\n      (apply list (-> displayed-form\n                      vec\n                      (assoc k (summary-form show-valid-values? (nth form k) rst))))\n\n      (and (int? k) (set? form))\n      (into #{} (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (list? form))\n      (into '() (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (string? form))\n      (string/join (assoc (vec form) k :expound.problems/relevant))\n\n      :else\n      (throw (ex-info \"Cannot find path segment in form. This can be caused by using conformers to transform values, which is not supported in Expound\"\n                      {:form form\n                       :in in})))))\n\n;; FIXME - this function is not intuitive.\n(defn highlight-line\n  [prefix replacement]\n  (let [max-width (apply max (map #(count (str %)) (string/split-lines replacement)))]\n    (indent (count (str prefix))\n            (apply str (repeat max-width \"^\")))))\n\n(defn highlighted-value\n  \"Given a problem, returns a pretty printed\n   string that highlights the problem value\"\n  [opts problem]\n  (let [{:keys [:expound/form :expound/in]} problem\n        {:keys [show-valid-values?] :or {show-valid-values? false}} opts\n        printed-val (pprint-str (paths/value-in form in))\n        relevant (str \"(\" :expound.problems/relevant \"|(\" :expound.problems/kv-relevant \"\\\\s+\" :expound.problems/kv-relevant \"))\")\n        regex (re-pattern (str \"(.*)\" relevant \".*\"))\n        s (binding [*print-namespace-maps* false]\n            (if (:show-valid-values? opts)\n              (pprint-str (summary-form show-valid-values? form in))\n              (pprint-str (walk/prewalk-replace {:expound.problems/irrelevant '...} (summary-form show-valid-values? form in)))))\n        [line prefix & _more] (re-find regex s)\n        highlighted-line (-> line\n                             (string/replace (re-pattern relevant) (escape-replacement\n                                                                    (re-pattern relevant)\n                                                                    (indent 0 (count prefix) (ansi/color printed-val :bad-value))))\n                             (str \"\\n\" (ansi/color (highlight-line prefix printed-val)\n                                                   :pointer)))]\n    ;;highlighted-line\n    (no-trailing-whitespace (string/replace s line (escape-replacement line highlighted-line)))))\n"]}