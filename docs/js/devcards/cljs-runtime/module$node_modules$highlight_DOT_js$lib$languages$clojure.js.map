{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$clojure.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8JvHD,MAAOC,CAAAA,OAAP,CApJAC,QAAgB,CAACC,IAAD,CAAO,CA4CrB,MAAMC,OAAS,CACbC,UAAW,QADE,CAEbC,MARuBC,qBAMV,CAGbC,UAAW,CAHE,CAAf,CAKMC,OAASN,IAAKO,CAAAA,OAAL,CAAaP,IAAKQ,CAAAA,iBAAlB,CAAqC,CAClDC,QAAS,IADyC,CAArC,CALf,CAQMC,QAAUV,IAAKU,CAAAA,OAAL,CACd,GADc,CAEd,GAFc,CAGd,CACEL,UAAW,CADb,CAHc,CARhB,CAeMM,QAAU,CACdT,UAAW,SADG,CAEdC,MAAO,sBAFO,CAfhB,CAmBMS,WAAa,CACjBT,MAAO,UADU,CAEjBU,IAAK,UAFY,CAnBnB,CAuBMC,KAAO,CACXZ,UAAW,SADA,CAEXC,MAAO,kFAFI,CAvBb;AA2BMY,SAAWf,IAAKU,CAAAA,OAAL,CAAa,QAAb,CAAuB,KAAvB,CA3BjB,CA4BMM,IAAM,CACVd,UAAW,QADD,CAEVC,MAAO,uFAFG,CA5BZ,CAgCMc,KAAO,CACXd,MAAO,KADI,CAEXU,IAAK,KAFM,CAhCb,CAoCMK,KAAO,CACXC,eAAgB,CAAA,CADL,CAEXd,UAAW,CAFA,CApCb,CAwCMe,KAAO,CACXC,SAjFeA,CACfC,SAHgBC,+EAEDF,CAEf,eAEE,4mFAJaA,CAgFJ;AAEXnB,UAAW,MAFA,CAGXC,MArFgBoB,+EAkFL,CAIXlB,UAAW,CAJA,CAKXmB,OAAQN,IALG,CAxCb,CA+CMO,iBAAmB,CACvBR,IADuB,CAEvBX,MAFuB,CAGvBQ,IAHuB,CAIvBC,QAJuB,CAKvBL,OALuB,CAMvBM,GANuB,CAOvBJ,UAPuB,CAQvBX,MARuB,CASvBU,OATuB,CAnDVe,CACbvB,MAvCgBoB,+EAsCHG,CAEbrB,UAAW,CAFEqB,CAmDU,CA/CzB,CA4DMC,OAAS,CACbC,cAtGcC,4FAqGD,CAEbC,QAxGgBP,+EAsGH;AAGbV,IAAK,+BAHQ,CAIbkB,SAAU,CACR,CACE7B,UAAW,OADb,CAEEC,MA7GYoB,+EA2Gd,CAGElB,UAAW,CAHb,CAIE2B,WAAY,CAAA,CAJd,CAMEC,WAAY,CAAA,CANd,CADQ,CASRC,CAAAA,MATQ,CASDT,gBATC,CAJG,CAgBfR,KAAKc,CAAAA,QAAL,CAAgB,CACd/B,IAAKU,CAAAA,OAAL,CAAa,SAAb,CAAwB,EAAxB,CADc,CAEdiB,MAFc,CAGdP,IAHc,CAIdF,IAJc,CAMhBA,KAAKa,CAAAA,QAAL,CAAgBN,gBAChBb,WAAWmB,CAAAA,QAAX,CAAsBN,gBACtBV,SAASgB,CAAAA,QAAT,CAAoB,CAAEnB,UAAF,CAEpB,OAAO,CACLuB,KAAM,SADD,CAELC,QAAS,CAAE,KAAF,CAFJ,CAGL3B,QAAS,IAHJ,CAILsB,SAAU,CACRd,IADQ,CAERX,MAFQ,CAGRQ,IAHQ,CAIRC,QAJQ,CAKRL,OALQ,CAMRM,GANQ,CAORJ,UAPQ,CAQRX,MARQ,CASRU,OATQ,CAJL,CAlIc,CAVgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/clojure.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$clojure\"] = function(global,require,module,exports) {\n/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n      // Clojure keywords\n      globals + ' ' +\n      'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' +\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]'\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [\n    LIST,\n    STRING,\n    HINT,\n    HINT_COL,\n    COMMENT,\n    KEY,\n    COLLECTION,\n    NUMBER,\n    LITERAL,\n    SYMBOL\n  ];\n\n  const GLOBAL = {\n    beginKeywords: globals,\n    lexemes: SYMBOL_RE,\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [\n      {\n        className: 'title',\n        begin: SYMBOL_RE,\n        relevance: 0,\n        excludeEnd: true,\n        // we can only have a single title\n        endsParent: true\n      }\n    ].concat(DEFAULT_CONTAINS)\n  };\n\n  LIST.contains = [\n    hljs.COMMENT('comment', ''),\n    GLOBAL,\n    NAME,\n    BODY\n  ];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [ COLLECTION ];\n\n  return {\n    name: 'Clojure',\n    aliases: [ 'clj' ],\n    illegal: /\\S/,\n    contains: [\n      LIST,\n      STRING,\n      HINT,\n      HINT_COL,\n      COMMENT,\n      KEY,\n      COLLECTION,\n      NUMBER,\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = clojure;\n\n};"],
"names":["shadow$provide","global","require","module","exports","clojure","hljs","NUMBER","className","begin","SIMPLE_NUMBER_RE","relevance","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","keywords","$pattern","SYMBOL_RE","starts","DEFAULT_CONTAINS","SYMBOL","GLOBAL","beginKeywords","globals","lexemes","contains","excludeEnd","endsParent","concat","name","aliases"]
}
