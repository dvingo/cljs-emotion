{"version":3,"sources":["com/fulcrologic/guardrails/utils.cljc"],"mappings":"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","names":["com.fulcrologic.guardrails.utils/cljs-env?","env","cljs.core/boolean","com.fulcrologic.guardrails.utils/get-ns-meta","or__4253__auto__","cljs.core/meta","cljs.core/*ns*","G__53190","com.fulcrologic.guardrails.utils/get-ns-name","G__53193","var_args","G__53199","com.fulcrologic.guardrails.utils/clj->cljs","js/Error","form","com.fulcrologic.guardrails.utils.clj__GT_cljs","strip-core-ns","p1__53195#","ns-replacements","G__53209","cljs.core.merge","replace-namespace","cljs.core/qualified-symbol?","nspace","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol","cljs.core.get","cljs.core/name","clojure.walk/postwalk","com.fulcrologic.guardrails.utils/get-file-position","map__53215","cljs.core/--destructure-map","line","column","G__53218","com.fulcrologic.guardrails.utils/get-call-context","com.fulcrologic.guardrails.utils.get_call_context","label","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","com.fulcrologic.guardrails.utils/gen-exception","msg","cljs.core/vec","cljs.core.apply","cljs.core/array-map","com.fulcrologic.guardrails.utils/devtools-config-override","com.fulcrologic.guardrails.utils/map-vals","f","m","cljs.core/reduce-kv","k","v","cljs.core.assoc","com.fulcrologic.guardrails.utils/map-keys","p!","cljs.core/persistent!","t","cljs.core/transient","com.fulcrologic.guardrails.utils/filter-vals","pred","G__53264","cljs.core.dissoc_BANG_","com.fulcrologic.guardrails.utils/atom?","x","cljs.core/Atom","G__53274","com.fulcrologic.guardrails.utils/stacktrace","err","com.fulcrologic.guardrails.utils.stacktrace","opts","com.fulcrologic.guardrails.utils/report-problem","message","js/console.error","com.fulcrologic.guardrails.utils/report-exception","e"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc com.fulcrologic.guardrails.utils\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.utils))\n  (:require\n    #?(:clj [clojure.stacktrace :as st])\n    [clojure.walk :as walk]))\n\n(defn cljs-env? [env] (boolean (:ns env)))\n\n(defn get-ns-meta [env]\n  (if (cljs-env? env)\n    (or (meta *ns*) (some-> env :ns :meta))\n    (meta *ns*)))\n\n(defn get-ns-name [env]\n  (if (cljs-env? env)\n    (or (.-name *ns*) (some-> env :ns :name))\n    (.-name *ns*)))\n\n(defn clj->cljs\n  ([form]\n   (clj->cljs form true))\n  ([form strip-core-ns]\n   (let [ns-replacements   (cond-> {\"clojure.core\"            \"cljs.core\"\n                                    \"clojure.test\"            \"cljs.test\"\n                                    \"clojure.spec.alpha\"      \"cljs.spec.alpha\"\n                                    \"clojure.spec.test.alpha\" \"cljs.spec.test.alpha\"\n                                    \"orchestra.spec.test\"     \"orchestra-cljs.spec.test\"\n                                    \"clojure.spec.gen.alpha\"  \"cljs.spec.gen.alpha\"}\n                             strip-core-ns (merge {\"clojure.core\" nil\n                                                   \"cljs.core\"    nil}))\n         replace-namespace #(if-not (qualified-symbol? %)\n                              %\n                              (let [nspace (namespace %)]\n                                (if (contains? ns-replacements nspace)\n                                  (symbol (get ns-replacements nspace) (name %))\n                                  %)))]\n     (walk/postwalk replace-namespace form))))\n\n\n(defn get-file-position\n  [env]\n  (if (cljs-env? env)\n    (let [{:keys [line column]} env]\n      (str line \":\" column))\n    ;; TODO implement for clojure\n    nil))\n\n\n(defn get-call-context\n  ([env]\n   (get-call-context env nil))\n  ([env label]\n   (str (when label (str label \" \u2013 \"))\n     (get-ns-name env)\n     \":\"\n     (get-file-position env))))\n\n\n(defn gen-exception [env msg]\n  `(throw (~(if (cljs-env? env) 'js/Error. 'Exception.) ~msg)))\n\n\n(defn devtools-config-override\n  []\n  `(let [current-config# (~'devtools.prefs/get-prefs)\n         overrides#      {:max-print-level                                    4\n                          :min-expandable-sequable-count-for-well-known-types 2}\n         left-adjust#    (str \"margin-left: -17px;\")]\n     (merge current-config#\n       (into overrides# (for [k# [:header-style]\n                              :let [v# (get current-config# k#)]]\n                          [k# (str v# left-adjust#)])))))\n\n(defn map-vals [f m] (if (nil? m) {} (reduce-kv (fn [m k v] (assoc m k (f v))) m m)))\n(defn map-keys [f m] (if (nil? m) {} (reduce-kv (fn [m k v] (assoc m (f k) v)) {} m)))\n(let [p! persistent!, t transient]                          ; Note `mapv`-like nil->{} semantics\n  (defn filter-vals [pred m] (if (nil? m) {} (p! (reduce-kv (fn [m k v] (if (pred v) m (dissoc! m k))) (t m) m)))))\n\n#?(:clj\n   (defn atom? [x] (instance? clojure.lang.Atom x))\n   :cljs\n   (defn ^boolean atom? [x] (instance? Atom x)))\n\n#?(:clj\n   (defn compiling-cljs?\n     \"Return truthy iff currently generating Cljs code.\"\n     []\n     (when-let [n (find-ns 'cljs.analyzer)]\n       (when-let [v (ns-resolve n '*cljs-file*)]\n         @v))))\n\n(defn stacktrace\n  ([err] (stacktrace err nil))\n  ([err opts]\n   #?(:cljs (str err)\n      :clj  (with-out-str (st/print-stack-trace err)))))\n\n(defn report-problem [message]\n  #?(:clj\n     (.println System/err message)\n     :cljs\n     (js/console.error message)))\n\n(defn report-exception [e message]\n  #?(:clj\n     (.println System/err (str message \\n (.getMessage ^Exception e) \"\\n\" (stacktrace e)))\n     :cljs\n     (js/console.error message e)))\n"]}