{"version":3,"sources":["com/fulcrologic/fulcro_css/css.cljc"],"mappings":";AAUA;;;AAAKA,wCAAoDC;AACzD,AAAKC,8CAAaC;AAClB;;;;AAAKC,6CAEHC;AACF,AAAKC,+CAAcC;AACnB;;;AAAKC,4CAAqEC;AAC1E;;;AAAKC,iDAAuGC;AAC5G;;;AAAKC,kDAA0GC;AAC/G;;;AAAKC,8CAAsHC;AAC3H;;;AAAKC,qDAAsHC;AAC3H;;;AAAKC,gDAAoIC;AAEzI,mDAAA,nDAAMC,8GACHC,SAASC;AADZ,AAEE,IAAMC,MAAoB,AAAA,0FAAWF;IAC/BG,sBAAoB,uDAAA,vDAACC,mDAAUF;AADrC,AAEE,OAACG,0BAAY,kDAAA,lDAACC,sDAAa,4CAAA,WAAAC,vDAACC;AAAD,AAAM,GAAI,mEAAAD,nEAACE;AACH,mEAAAF,5DAACG,6EAAmBT;;AADtBM;;GAGJJ;;AAEjC;;;8CAAA,9CAAMQ,oGAEHC;AAFH,AAGE,OAACC,sBAAc,WAAKC;AAAL,AACE,GACE,AAACC,sEAAqBD;AAAK,OAACE,0DAAeF,IAAIF;;AADjD,oBAEE,AAACK,8DAAaH;AAAK,OAACf,iDAAkBe,IAAIF;;AAF5C,AAGaE;;;;GAAM,CAACzB,+EAAAA,0FAAAA,bAAgBuB,sEAAAA;;AAEvD;;;+CAAA,/CAAMM,sGAEHN;AAFH,AAGE,OAACO,+CAAO,AAACR,4CAAaC,WACpB,CAACrB,gFAAAA,2FAAAA,bAAiBqB,uEAAAA;;AAEtB;;;yCAAA,zCAAMQ,0FAEHR;AAFH,AAGE,IAAMS,YAAsB,AAACH,6CAAcN;IACrCU,kBAAsB,AAACC,iDAAS,CAAC5B,mFAAAA,8FAAAA,bAAoBiB,0EAAAA;IACrDY,wBAAsB,+CAAA,WAAAC,iBAAAC,3EAACC;AAAD,AAAS,oDAAAF,7CAACG,8DAAQ,6CAAAF,7CAACR;GAAnB,iCAAyCI;AAFrE,AAGE,OAACH,+CAAOE,UAAUG;;AAEtB;;;;;;;yCAAA,zCAAMK,0FAMHjB;AANH,AAOE,OAACkB,uGAAM,AAACV,uCAAQR","names":["com.fulcrologic.fulcro-css.css/cssify","com.fulcrologic.fulcro-css.css-implementation/cssify","com.fulcrologic.fulcro-css.css/fq-component","com.fulcrologic.fulcro-css.css-implementation/fqname","com.fulcrologic.fulcro-css.css/local-class","com.fulcrologic.fulcro-css.css-implementation/local-class","com.fulcrologic.fulcro-css.css/set-classname","com.fulcrologic.fulcro-css.css-implementation/set-classname","com.fulcrologic.fulcro-css.css/CSS?","com.fulcrologic.fulcro-css.css-implementation/CSS?","com.fulcrologic.fulcro-css.css/get-local-rules","com.fulcrologic.fulcro-css.css-implementation/get-local-rules","com.fulcrologic.fulcro-css.css/get-global-rules","com.fulcrologic.fulcro-css.css-implementation/get-global-rules","com.fulcrologic.fulcro-css.css/get-includes","com.fulcrologic.fulcro-css.css-implementation/get-includes","com.fulcrologic.fulcro-css.css/get-nested-includes","com.fulcrologic.fulcro-css.css-implementation/get-nested-includes","com.fulcrologic.fulcro-css.css/get-classnames","com.fulcrologic.fulcro-css.css-implementation/get-classnames","com.fulcrologic.fulcro-css.css/localize-selector","selector","comp","val","split-cns-selectors","clojure.string.split","garden.selectors/selector","clojure.string.join","p1__58000#","cljs.core.map","com.fulcrologic.fulcro-css.css-implementation/prefixed-name?","com.fulcrologic.fulcro-css.css-implementation/localize-name","com.fulcrologic.fulcro-css.css/localize-css","component","clojure.walk/postwalk","ele","com.fulcrologic.fulcro-css.css-implementation/prefixed-keyword?","com.fulcrologic.fulcro-css.css-implementation/localize-kw","com.fulcrologic.fulcro-css.css-implementation/selector?","com.fulcrologic.fulcro-css.css/get-css-rules","cljs.core.concat","com.fulcrologic.fulcro-css.css/get-css","own-rules","nested-children","cljs.core.distinct","nested-children-rules","p1__58005#","p2__58006#","cljs.core.reduce","cljs.core.into","com.fulcrologic.fulcro-css.css/raw-css","garden.core.css"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css\n  (:require [cljs.tagged-literals]\n            [com.fulcrologic.fulcro-css.css-implementation :as ci]\n            [com.fulcrologic.fulcro.components :as comp]\n            [clojure.string :as str]\n            #?(:cljs [cljsjs.react.dom])\n            [clojure.walk :as walk]\n            [garden.core :as g]\n            [garden.selectors :as gs]))\n\n(def cssify \"Replaces slashes and dots with underscore.\" ci/cssify)\n(def fq-component ci/fqname)\n(def local-class \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ci/local-class)\n(def set-classname ci/set-classname)\n(def CSS? \"`(CSS? class)` : Returns true if the given component has css.\" ci/CSS?)\n(def get-local-rules \"`(get-local-rules class)` : Get the *raw* value from the local-rules of a component.\" ci/get-local-rules)\n(def get-global-rules \"`(get-global-rules class)` : Get the *raw* value from the global-rules of a component.\" ci/get-global-rules)\n(def get-includes \"`(get-inculdes class)` :Returns the list of components from the include-children method of a component\" ci/get-includes)\n(def get-nested-includes \"`(get-nested-includes class)` : Recursively finds all includes starting at the given component.\" ci/get-nested-includes)\n(def get-classnames \"`(get-classnames class)` : Returns a map from user-given CSS rule names to localized names of the given component.\" ci/get-classnames)\n\n(defn localize-selector\n  [selector comp]\n  (let [val                 (:selector selector)\n        split-cns-selectors (str/split val #\" \")]\n    (gs/selector (str/join \" \" (map #(if (ci/prefixed-name? %)\n                                       (ci/localize-name % comp)\n                                       %)\n                                 split-cns-selectors)))))\n\n(defn localize-css\n  \"Converts prefixed keywords into localized keywords and localizes the values of garden selectors\"\n  [component]\n  (walk/postwalk (fn [ele]\n                   (cond\n                     (ci/prefixed-keyword? ele) (ci/localize-kw ele component)\n                     (ci/selector? ele) (localize-selector ele component)\n                     :otherwise ele)) (get-local-rules component)))\n\n(defn get-css-rules\n  \"Gets the raw local and global rules from the given component.\"\n  [component]\n  (concat (localize-css component)\n    (get-global-rules component)))\n\n(defn get-css\n  \"Recursively gets all global and localized rules (in garden notation) starting at the given component.\"\n  [component]\n  (let [own-rules             (get-css-rules component)\n        nested-children       (distinct (get-nested-includes component))\n        nested-children-rules (reduce #(into %1 (get-css-rules %2)) [] nested-children)]\n    (concat own-rules nested-children-rules)))\n\n(defn raw-css\n  \"Returns a string that contains the raw CSS for the rules defined on the given component's sub-tree. This can be used for\n   server-side rendering of the style element, or in a `style` element as the :dangerouslySetInnerHTML/:html value:\n\n   (dom/style #js {:dangerouslySetInnerHTML #js {:__html (raw-css component)}})\n   \"\n  [component]\n  (g/css (get-css component)))\n\n"]}