{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$mizar.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6BrHD,MAAOC,CAAAA,OAAP,CApBAC,QAAc,CAACC,IAAD,CAAO,CACnB,MAAO,CACLC,KAAM,OADD,CAELC,SACE,wlBAHG;AAaLC,SAAU,CACRH,IAAKI,CAAAA,OAAL,CAAa,IAAb,CAAmB,GAAnB,CADQ,CAbL,CADY,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/mizar.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$mizar\"] = function(global,require,module,exports) {\n/*\nLanguage: Mizar\nDescription: The Mizar Language is a formal language derived from the mathematical vernacular.\nAuthor: Kelley van Evert <kelleyvanevert@gmail.com>\nWebsite: http://mizar.org/language/\nCategory: scientific\n*/\n\nfunction mizar(hljs) {\n  return {\n    name: 'Mizar',\n    keywords:\n      'environ vocabularies notations constructors definitions ' +\n      'registrations theorems schemes requirements begin end definition ' +\n      'registration cluster existence pred func defpred deffunc theorem ' +\n      'proof let take assume then thus hence ex for st holds consider ' +\n      'reconsider such that and in provided of as from be being by means ' +\n      'equals implies iff redefine define now not or attr is mode ' +\n      'suppose per cases set thesis contradiction scheme reserve struct ' +\n      'correctness compatibility coherence symmetry assymetry ' +\n      'reflexivity irreflexivity connectedness uniqueness commutativity ' +\n      'idempotence involutiveness projectivity',\n    contains: [\n      hljs.COMMENT('::', '$')\n    ]\n  };\n}\n\nmodule.exports = mizar;\n\n};"],
"names":["shadow$provide","global","require","module","exports","mizar","hljs","name","keywords","contains","COMMENT"]
}
