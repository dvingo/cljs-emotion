{"version":3,"sources":["nubank/workspaces/card_types/util.cljs"],"mappings":";;;;AAOA,sDAAA,2CAAA,2GAAA,mCAAA,sHAAA,2CAAA,0DAAA,OAAA,sDAAA,YAAA,mHAAA,2CAAA,0DAAA,OAAA,mEAAA,SAAA,4EAAA,iBAAA,6HAAA,2CAAA,0DAAA,OAAA,sDAAA,IAAA,mEAAA,SAAA,4EAAA,iBAAA,kHAAA,2CAAA,0DAAA,OAAA,sDAAA,IAAA,mEAAA,UAAA,4EAAA,xxDAAKA;AAgBL,mDAAA,2DAAAC,9GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,mGAAA,tKAAmCI;AAAnC,AACE,IAAMC,SAAO,AAACH,4CAAIJ,oDAAkBM,MAAM,qCAAA,nCAAI,AAACE,qBAAKF,QAAOA;AAA3D,AACE,8GAAA,2CAAA,iEAAA,UAAA,4EAAA,UAAA,gEAAA,nXAACG,kYAGMF;;AAEX,wDAAA,xDAAMG,wHAAqBC;AAA3B,AACE,IAAAC,WAAM,uBAAA,vBAACC;AAAP,AAAA,8DAAAD,SAAA,0BAAA,jGACGE;;AADH,oBAAAF,pBAEGG,6BAAgB,AAACC,qBAAQ,AAACX,iDAAeM;;AAF5CC;;AAIF,mDAAA,nDAAMK,8GAAgBC;AAAtB,AACE,IAAOA,WAAKA;;AAAZ,AACE,oBAAI,uEAAA,vEAACC,8DAASD;AACZ,eAAO,AAACE,0BAAsBF;;;;AAC9BA;;;;;AAEN,oDAAA,iEAAAG,rHAAME,gHAAiBZ;AAAvB,AAAA,IAAAW,aAAAD;IAAAC,iBAAA,AAAAnB,4BAAAmB;eAAAA,XAAqEK;cAArE,AAAAvB,4CAAAkB,eAAA,rEAAyCE;cAAzC,AAAApB,4CAAAkB,eAAA,rEAAiDG;aAAjD,AAAArB,4CAAAkB,eAAA,pEAAyDI;AAAzD,AACE,IAAME,YAAU,AAAClB,sDAAoBC;AAArC,AACE,qEAAA,9DAACkB,qDAAMF,gHAEL,WAAKG;AAAL,AAAQ,oBAAIN;AAAQ,QAACA,wCAAAA,mDAAAA,bAAQI,+BAAAA;;AAArB;;qDAFV,wGAKE,WAAKE;AAAL,AAAQ,oBAAIL;AAAQ,QAACA,wCAAAA,mDAAAA,bAAQG,+BAAAA;;AAArB;;GALV,qGAQE,WAAKV;AAAL,AACE,IAAMA,WAAK,AAACD,iDAAeC;AAA3B,AACE,uEAAA,YAAA,nFAACJ,8DAASI;;AACV,AAAcA,qBAAKU;;AACnB,gHAAA,8NAAA,9UAACG,mDAAMC,0CAAmBC,sGAAU,AAAA,qIAAetB,iHAAkBiB;;AACrE,QAACF,uCAAAA,kDAAAA,bAAOE,8BAAAA","names":["nubank.workspaces.card-types.util/predef-alignments","p__58118","map__58119","cljs.core/--destructure-map","cljs.core.get","nubank.workspaces.card-types.util/position-style","align","custom","cljs.core/map?","cljs.core.merge","nubank.workspaces.card-types.util/create-wrapper-node","card","G__58124","js/document.createElement","nubank.workspaces.card_types.util.goog$module$goog$object.set","goog.style/setStyle","cljs.core/clj->js","nubank.workspaces.card-types.util/find-root-node","node","nubank.workspaces.card_types.util.goog$module$goog$object.get","goog.dom/getParentElement","p__58128","map__58129","nubank.workspaces.card-types.util/positioned-card","dispose","refresh","render","instance","real-node","cljs.core.assoc","_","cljs.core.swap_BANG_","nubank.workspaces.data/active-cards*","cljs.core/assoc-in"],"sourcesContent":["(ns nubank.workspaces.card-types.util\n  (:require [goog.object :as gobj]\n            [goog.dom :as gdom]\n            [goog.style :as gstyle]\n            [nubank.workspaces.model :as wsm]\n            [nubank.workspaces.data :as data]))\n\n(def predef-alignments\n  {::wsm/align-top         {}\n   ::wsm/align-top-flex    {:display \"flex\"\n                            :flex    \"1\"}\n   ::wsm/align-center      {:display         \"flex\"\n                            :align-items     \"center\"\n                            :justify-content \"center\"}\n   ::wsm/align-center-flex {:display         \"flex\"\n                            :flex            \"1\"\n                            :align-items     \"center\"\n                            :justify-content \"center\"}\n   ::wsm/stretch-flex      {:display         \"flex\"\n                            :flex            \"1\"\n                            :align-items     \"stretch\"\n                            :justify-content \"stretch\"}})\n\n(defn position-style [{::wsm/keys [align] :or {align ::wsm/align-center}}]\n  (let [custom (get predef-alignments align (if (map? align) align {}))]\n    (merge {:align-self      \"stretch\"\n            :justify-content \"stretch\"\n            :max-width       \"100%\"}\n           custom)))\n\n(defn create-wrapper-node [card]\n  (doto (js/document.createElement \"div\")\n    (gobj/set \"WORKSPACES_WRAPPER_NODE\" true)\n    (gstyle/setStyle (clj->js (position-style card)))))\n\n(defn find-root-node [node]\n  (loop [node node]\n    (if (gobj/get node \"WORKSPACES_WRAPPER_NODE\")\n      (recur (gdom/getParentElement node))\n      node)))\n\n(defn positioned-card [card {::wsm/keys [dispose refresh render] :as instance}]\n  (let [real-node (create-wrapper-node card)]\n    (assoc instance\n      ::wsm/dispose\n      (fn [_] (if dispose (dispose real-node)))\n\n      ::wsm/refresh\n      (fn [_] (if refresh (refresh real-node)))\n\n      ::wsm/render\n      (fn [node]\n        (let [node (find-root-node node)]\n          (gobj/set node \"innerHTML\" \"\")\n          (.appendChild node real-node)\n          (swap! data/active-cards* assoc-in [(::wsm/card-id card) ::wsm/node] real-node)\n          (render real-node))))))\n"]}