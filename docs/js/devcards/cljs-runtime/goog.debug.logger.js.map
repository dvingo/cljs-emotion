{
"version":3,
"file":"goog.debug.logger.js",
"lineCount":140,
"mappings":"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",
"sources":["goog/debug/logger.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won't be\n * able to use the logging infrastructure.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug.LogManager');\ngoog.provide('goog.debug.Loggable');\ngoog.provide('goog.debug.Logger');\ngoog.provide('goog.debug.Logger.Level');\n\ngoog.require('goog.debug');\ngoog.require('goog.log');\ngoog.require('goog.log.Level');\ngoog.require('goog.log.LogRecord');\ngoog.require('goog.log.Logger');\n\n\n/**\n * A message value that can be handled by a Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n * @deprecated Use {@link goog.log.Loggable} instead.\n *\n * @typedef {string|function(): string}\n */\ngoog.debug.Loggable;\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n * @deprecated Use {@link goog.log} instead.\n *\n * @implements {goog.log.Logger}\n * @final\n */\ngoog.debug.Logger = class {\n  /**\n   * Construct a new Logger.\n   *\n   * Users should not construct their own instances of goog.debug.Logger. They\n   * should always use the {@link goog.log.getLogger} function.\n   *\n   * @param {string} name The name of the Logger.\n   */\n  constructor(name) {\n    /**\n     * @type {string}\n     * @private\n     */\n    this.name_ = name;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  getName() {\n    return this.name_;\n  }\n\n  /**\n   * Adds a handler to the logger. This doesn't use the event system because\n   * we want to be able to add logging to the event system.\n   * @param {Function} handler Handler function to add.\n   */\n  addHandler(handler) {\n    goog.log.addHandler(\n        this, /** @type {!goog.log.LogRecordHandler} */ (handler));\n  }\n\n  /**\n   * Removes a handler from the logger. This doesn't use the event system\n   * because we want to be able to add logging to the event system.\n   * @param {Function} handler Handler function to remove.\n   * @return {boolean} Whether the handler was removed.\n   */\n  removeHandler(handler) {\n    return goog.log.removeHandler(\n        this, /** @type {!goog.log.LogRecordHandler} */ (handler));\n  }\n\n  /**\n   * Set the log level specifying which message levels will be logged by this\n   * logger. Message levels lower than this value will be discarded.\n   * The level value Level.OFF can be used to turn off logging. If the new level\n   * is null, it means that this node should inherit its level from its nearest\n   * ancestor with a specific (non-null) level value.\n   *\n   * @param {!goog.log.Level|null} level The new level.\n   */\n  setLevel(level) {\n    goog.log.setLevel(this, level);\n  }\n\n  /**\n   * Gets the log level specifying which message levels will be logged by this\n   * logger. Message levels lower than this value will be discarded.\n   * The level value Level.OFF can be used to turn off logging. If the level\n   * is null, it means that this node should inherit its level from its nearest\n   * ancestor with a specific (non-null) level value.\n   *\n   * @return {!goog.log.Level|null} The level.\n   */\n  getLevel() {\n    return goog.log.getLevel(this);\n  }\n\n  /**\n   * Returns the effective level of the logger based on its ancestors' levels.\n   * @return {!goog.log.Level} The level.\n   */\n  getEffectiveLevel() {\n    return goog.log.getEffectiveLevel(this);\n  }\n\n  /**\n   * Checks if a message of the given level would actually be logged by this\n   * logger. This check is based on the Loggers effective level, which may be\n   * inherited from its parent.\n   * @param {!goog.log.Level} level The level to check.\n   * @return {boolean} Whether the message would be logged.\n   */\n  isLoggable(level) {\n    const googLogLevel = goog.log.Level[level.toString()];\n    return goog.log.isLoggable(this, googLogLevel);\n  }\n\n  /**\n   * Logs a message. If the logger is currently enabled for the\n   * given message level then the given message is forwarded to all the\n   * registered output Handler objects.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error|Object=} opt_exception An exception associated with the\n   *     message.\n   */\n  log(level, msg, opt_exception) {\n    goog.log.log(this, level, msg, opt_exception);\n  }\n\n  /**\n   * Creates a new log record and adds the exception (if present) to it.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {Error|Object=} opt_exception An exception associated with the\n   *     message.\n   * @return {!goog.log.LogRecord} A log record.\n   */\n  getLogRecord(level, msg, opt_exception) {\n    return goog.log.getLogRecord(this, level, msg, opt_exception);\n  }\n\n  /**\n   * Logs a message at the Logger.Level.SHOUT level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  shout(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a message at the Logger.Level.SEVERE level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  severe(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a message at the Logger.Level.WARNING level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  warning(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a message at the Logger.Level.INFO level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  info(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n    }\n  };\n\n\n  /**\n   * Logs a message at the Logger.Level.CONFIG level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  config(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n    }\n  };\n\n\n  /**\n   * Logs a message at the Logger.Level.FINE level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  fine(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a message at the Logger.Level.FINER level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  finer(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a message at the Logger.Level.FINEST level.\n   * If the logger is currently enabled for the given message level then the\n   * given message is forwarded to all the registered output Handler objects.\n   * @param {goog.debug.Loggable} msg The message to log.\n   * @param {Error=} opt_exception An exception associated with the message.\n   */\n  finest(msg, opt_exception) {\n    if (goog.debug.LOGGING_ENABLED) {\n      this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n    }\n  }\n\n  /**\n   * Logs a LogRecord. If the logger is currently enabled for the\n   * given message level then the given message is forwarded to all the\n   * registered output Handler objects.\n   * @param {!goog.log.LogRecord} logRecord A log record to log.\n   */\n  logRecord(logRecord) {\n    goog.log.publishLogRecord(this, logRecord);\n  }\n};\n\n\n/**\n * @deprecated Use {@link goog.log.Level} instead.\n * @constructor\n * @final\n */\ngoog.debug.Logger.Level = goog.log.Level;\n\n\n/**\n * @deprecated Use {@link goog.log.ROOT_LOGGER_NAME} instead.\n * @const\n */\ngoog.debug.Logger.ROOT_LOGGER_NAME = '';\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.debug.Logger.ENABLE_HIERARCHY =\n    goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);\n\n\n/**\n * @define {boolean} Toggles whether active log statements are also recorded\n *     to the profiler.\n */\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING =\n    goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent's handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n * @deprecated Use {@link goog.log.getLogger} instead.\n */\ngoog.debug.Logger.getLogger = function(name) {\n  'use strict';\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers = function(msg) {\n  'use strict';\n  // Some browsers also log timeStamp calls to the console, only log\n  // if actually asked.\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark = goog.global['msWriteProfilerMark'];\n    if (msWriteProfilerMark) {\n      // Logs a message to the Microsoft profiler\n      // On IE, console['timeStamp'] may output to console\n      msWriteProfilerMark(msg);\n      return;\n    }\n\n    // Using goog.global, as loggers might be used in window-less contexts.\n    var console = goog.global['console'];\n    if (console && console['timeStamp']) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      console['timeStamp'](msg);\n    }\n  }\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n * @const\n */\ngoog.debug.LogManager = {};\n\n\n/**\n * Map of logger names to logger objects.\n *\n * @type {!Object<string, !goog.debug.Logger>}\n * @private\n */\ngoog.debug.LogManager.loggers_ = {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {?goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ = null;\n\n\n/**\n * Initializes the LogManager if not already initialized.\n * @deprecated LogManager is automatically initialized when getRoot or getLogger\n * is called, and both of those methods are deprecated.\n */\ngoog.debug.LogManager.initialize = function() {\n  'use strict';\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ =\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =\n        goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers.\n * @deprecated Use {@link goog.log.getAllLoggers} instead.\n * @return {!Object<string, !goog.debug.Logger>} Map of logger names to logger\n *     objects.\n */\ngoog.debug.LogManager.getLoggers = function() {\n  'use strict';\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name.\n * @deprecated Use {@link goog.log.getRootLogger} instead.\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot = function() {\n  'use strict';\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Finds a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @deprecated Use {@link goog.log.getLogger} instead.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger = function(name) {\n  'use strict';\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {?goog.log.Logger=} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  'use strict';\n  return function(info) {\n    'use strict';\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    goog.log.error(\n        logger,\n        'Error: ' + info.message + ' (' + info.fileName +\n            ' @ Line: ' + info.line + ')');\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don't yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ = function(name) {\n  'use strict';\n  // find parent logger\n  var logger = new goog.debug.Logger(name);\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n"],
"names":["goog","provide","require","debug","Loggable","Logger","constructor","name","name_","getName","addHandler","handler","log","removeHandler","setLevel","level","getLevel","getEffectiveLevel","isLoggable","googLogLevel","Level","toString","msg","opt_exception","getLogRecord","shout","LOGGING_ENABLED","SHOUT","severe","SEVERE","warning","WARNING","info","INFO","config","CONFIG","fine","FINE","finer","FINER","finest","FINEST","logRecord","publishLogRecord","ROOT_LOGGER_NAME","ENABLE_HIERARCHY","define","ENABLE_PROFILER_LOGGING","getLogger","goog.debug.Logger.getLogger","LogManager","logToProfilers","goog.debug.Logger.logToProfilers","msWriteProfilerMark","global","console","loggers_","rootLogger_","initialize","goog.debug.LogManager.initialize","getLoggers","goog.debug.LogManager.getLoggers","getRoot","goog.debug.LogManager.getRoot","goog.debug.LogManager.getLogger","ret","createLogger_","createFunctionForCatchErrors","goog.debug.LogManager.createFunctionForCatchErrors","opt_logger","logger","error","message","fileName","line","goog.debug.LogManager.createLogger_"]
}
