{
"version":3,
"file":"module$node_modules$react_grid_layout$build$responsiveUtils.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkFxHC,QAASA,gBAAe,CAACC,WAAD,CAAc,CAEpC,MADWC,OAAOC,CAAAA,IAAPA,CAAYF,WAAZE,CACCC,CAAAA,IAAL,CAAU,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAC/B,MAAOL,YAAA,CAAYI,CAAZ,CAAP,CAAwBJ,WAAA,CAAYK,CAAZ,CADO,CAA1B,CAF6B,CA/EtCP,OAAQQ,CAAAA,UAAR,CAAqB,CAAA,CACrBR,QAAQS,CAAAA,sBAAR,CAcAA,QAA+B,CAACP,WAAD,CAAcQ,KAAd,CAAqB,CAGlD,IAFA,IAAIC,OAASV,eAAA,CAAgBC,WAAhB,CAAb,CACIU,SAAWD,MAAA,CAAO,CAAP,CADf,CAESE,EAAI,CAFb,CAEgBC,IAAMH,MAAOI,CAAAA,MAA7B,CAAqCF,CAArC,CAAyCC,GAAzC,CAA8CD,CAAA,EAA9C,CAAmD,CACjD,IAAIG,eAAiBL,MAAA,CAAOE,CAAP,CACjBH,MAAJ,CAAYR,WAAA,CAAYc,cAAZ,CAAZ,GAAyCJ,QAAzC,CAAoDI,cAApD,CAFiD,CAInD,MAAOJ,SAP2C,CAbpDZ;OAAQiB,CAAAA,qBAAR,CA+BAA,QAA8B,CAACC,UAAD,CAAaC,IAAb,CAAmB,CAC/C,GAAI,CAACA,IAAA,CAAKD,UAAL,CAAL,CACE,KAAUE,MAAJ,CAAU,yDAAV,CAAsEF,UAAtE,CAAmF,cAAnF,CAAN,CAEF,MAAOC,KAAA,CAAKD,UAAL,CAJwC,CA9BjDlB,QAAQqB,CAAAA,8BAAR,CAmDAA,QAAuC,CAACC,OAAD,CAAUpB,WAAV,CAAuBgB,UAAvB,CAAmCK,cAAnC,CAAmDJ,IAAnD,CAAyDK,WAAzD,CAAsE,CAE3G,GAAIF,OAAA,CAAQJ,UAAR,CAAJ,CAAyB,MAAO,GAAIO,MAAOC,CAAAA,WAAX,EAAwBJ,OAAA,CAAQJ,UAAR,CAAxB,CAE5BS,eAAAA,CAASL,OAAA,CAAQC,cAAR,CACTK,YAAAA,CAAoB3B,eAAA,CAAgBC,WAAhB,CACpB2B,WAAAA,CAAmBD,WAAkBE,CAAAA,KAAlB,CAAwBF,WAAkBG,CAAAA,OAAlB,CAA0Bb,UAA1B,CAAxB,CACdL;WAAAA,CAAI,CAAb,KAAK,IAAWC,IAAMe,UAAiBd,CAAAA,MAAvC,CAA+CF,WAA/C,CAAmDC,GAAnD,CAAwDD,WAAA,EAAxD,CAA6D,CAC3D,IAAIN,EAAIsB,UAAA,CAAiBhB,WAAjB,CACR,IAAIS,OAAA,CAAQf,CAAR,CAAJ,CAAgB,CACdoB,cAAA,CAASL,OAAA,CAAQf,CAAR,CACT,MAFc,CAF2C,CAO7DoB,cAAA,CAAS,GAAIF,MAAOC,CAAAA,WAAX,EAAwBC,cAAxB,EAAkC,EAAlC,CACT,OAAO,GAAIF,MAAOO,CAAAA,OAAX,EAAoB,GAAIP,MAAOQ,CAAAA,aAAX,EAA0BN,cAA1B,CAAkC,CAAQR,IAAR,CAAlC,CAApB,CAAuEK,WAAvE,CAAoFL,IAApF,CAfoG,CAlD7GnB,QAAQC,CAAAA,eAAR,CAA0BA,eAE1B,KAAIwB,OAAS3B,OAAA,CAAQ,mDAAR,CAT2G;",
"sources":["node_modules/react-grid-layout/build/responsiveUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_grid_layout$build$responsiveUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.getBreakpointFromWidth = getBreakpointFromWidth;\nexports.getColsFromBreakpoint = getColsFromBreakpoint;\nexports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;\nexports.sortBreakpoints = sortBreakpoints;\n\nvar _utils = require(\"./utils\");\n\n/**\n * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n *\n * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n * @param  {Number} width Screen width.\n * @return {String}       Highest breakpoint that is less than width.\n */\nfunction getBreakpointFromWidth(breakpoints, width) {\n  var sorted = sortBreakpoints(breakpoints);\n  var matching = sorted[0];\n  for (var i = 1, len = sorted.length; i < len; i++) {\n    var breakpointName = sorted[i];\n    if (width > breakpoints[breakpointName]) matching = breakpointName;\n  }\n  return matching;\n}\n\n/**\n * Given a breakpoint, get the # of cols set for it.\n * @param  {String} breakpoint Breakpoint name.\n * @param  {Object} cols       Map of breakpoints to cols.\n * @return {Number}            Number of cols.\n */\n\n\nfunction getColsFromBreakpoint(breakpoint, cols) {\n  if (!cols[breakpoint]) {\n    throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n  }\n  return cols[breakpoint];\n}\n\n/**\n * Given existing layouts and a new breakpoint, find or generate a new layout.\n *\n * This finds the layout above the new one and generates from it, if it exists.\n *\n * @param  {Object} layouts     Existing layouts.\n * @param  {Array} breakpoints All breakpoints.\n * @param  {String} breakpoint New breakpoint.\n * @param  {String} breakpoint Last breakpoint (for fallback).\n * @param  {Number} cols       Column count at new breakpoint.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}             New layout.\n */\nfunction findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, compactType) {\n  // If it already exists, just return it.\n  if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]);\n  // Find or generate the next layout\n  var layout = layouts[lastBreakpoint];\n  var breakpointsSorted = sortBreakpoints(breakpoints);\n  var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n  for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n    var b = breakpointsAbove[i];\n    if (layouts[b]) {\n      layout = layouts[b];\n      break;\n    }\n  }\n  layout = (0, _utils.cloneLayout)(layout || []); // clone layout so we don't modify existing items\n  return (0, _utils.compact)((0, _utils.correctBounds)(layout, { cols: cols }), compactType, cols);\n}\n\n/**\n * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n * e.g. ['xxs', 'xs', 'sm', ...]\n *\n * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n * @return {Array}              Sorted breakpoints.\n */\nfunction sortBreakpoints(breakpoints) {\n  var keys = Object.keys(breakpoints);\n  return keys.sort(function (a, b) {\n    return breakpoints[a] - breakpoints[b];\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","sortBreakpoints","breakpoints","Object","keys","sort","a","b","__esModule","getBreakpointFromWidth","width","sorted","matching","i","len","length","breakpointName","getColsFromBreakpoint","breakpoint","cols","Error","findOrGenerateResponsiveLayout","layouts","lastBreakpoint","compactType","_utils","cloneLayout","layout","breakpointsSorted","breakpointsAbove","slice","indexOf","compact","correctBounds"]
}
