{"version":3,"sources":["nubank/workspaces/ui/grid_layout.cljs"],"mappings":"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","names":["nubank.workspaces.ui.grid-layout/column-size","nubank.workspaces.ui.grid-layout/max-columns","nubank.workspaces.ui.grid-layout/columns-step","nubank.workspaces.ui.grid-layout/breakpoints","cljs.core/vec","iter__4652__auto__","s__59027","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__59029","cljs.core/chunk-buffer","i__59028","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59026","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","c","nubank.workspaces.ui.grid-layout/grid-item-css","props","G__59053","garden.selectors/&","garden.selectors/not","nubank.workspaces.ui.grid-layout/WidthProvider","js/ReactGridLayout.WidthProvider","nubank.workspaces.ui.grid-layout/Responsive","js/ReactGridLayout.Responsive","nubank.workspaces.ui.grid-layout/GridWithWidth","options__48885__auto__","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/nubank","js/nubank.workspaces","js/nubank.workspaces.ui","js/nubank.workspaces.ui.grid-layout","js/nubank.workspaces.ui.grid-layout.GridLayout","props__48886__auto__","this__48887__auto__","temp__5751__auto__","cljs.core.get","init-state__48888__auto__","obj59086","G__59088","G__59089","com.fulcrologic.fulcro.components/isoget","obj59092","com.fulcrologic.fulcro.components/configure-component!","nubank.workspaces.ui.grid-layout/GridLayout","this","nubank.workspaces.ui.core/card-border-radius","map__59065","cljs.core/--destructure-map","onBreakpointChange","width","nubank.workspaces.ui.grid_layout.goog$module$goog$object.getValueByKeys","G__59068","com.fulcrologic.fulcro-css.localized-dom/node","nubank.workspaces.ui.grid_layout.goog$module$goog$object.get","bp","cljs.core/rseq","p1__59057#","cljs.core.filter","G__59073","G__59074","G__59075","com.fulcrologic.fulcro-css.localized-dom/create-element","cljs.core/clj->js","p1__59058#","cljs.core.assoc","nubank.workspaces.ui.grid_layout.goog$module$goog$object.set","com.fulcrologic.fulcro.components/children","nubank.workspaces.ui.grid-layout/grid-layout","com.fulcrologic.fulcro.components.factory","cljs.core/chunk-first"],"sourcesContent":["(ns nubank.workspaces.ui.grid-layout\n  (:require [com.fulcrologic.fulcro.components :as fp]\n            [com.fulcrologic.fulcro-css.localized-dom :as dom]\n            [garden.selectors :as gs]\n            [goog.object :as gobj]\n            [cljsjs.react-grid-layout]\n            [nubank.workspaces.ui.core :as uc]))\n\n(def column-size 120)\n(def max-columns 20)\n(def columns-step 2)\n\n(def breakpoints\n  (vec\n    (for [i (range 0 max-columns columns-step)\n          :let [c (+ i columns-step)]]\n      {:id         (str \"c\" c)\n       :cols       c\n       :breakpoint (if (zero? i) 0 (* c column-size))})))\n\n(defn grid-item-css [props]\n  [:$react-grid-item\n   [(gs/& (gs/not :.react-grid-placeholder))\n    props]])\n\n(def WidthProvider js/ReactGridLayout.WidthProvider)\n(def Responsive js/ReactGridLayout.Responsive)\n\n(def GridWithWidth (WidthProvider Responsive))\n\n(fp/defsc GridLayout\n  [this props]\n  {:css               [[:$react-grid-layout\n                        {:position   \"relative\"\n                         :transition \"height 200ms ease\"}]\n\n                       [:$react-grid-item\n                        {:transition          \"all 200ms ease\"\n                         :transition-property \"left, top\"}\n\n                        [:&$cssTransforms\n                         {:transition-property \"transform\"}]\n\n                        [:&$resizing\n                         {:z-index     \"1\"\n                          :will-change \"width, height\"}]\n\n                        [:&$react-draggable-dragging\n                         {:transition  \"none\"\n                          :z-index     \"3\"\n                          :will-change \"transform\"}]\n\n                        [:&$react-grid-placeholder\n                         {:background          \"red\"\n                          :opacity             \"0.2\"\n                          :transition-duration \"100ms\"\n                          :z-index             \"2\"\n                          :-webkit-user-select \"none\"\n                          :-moz-user-select    \"none\"\n                          :-ms-user-select     \"none\"\n                          :-o-user-select      \"none\"\n                          :user-select         \"none\"}]\n\n                        [:> [:$react-resizable-handle\n                             {:position \"absolute\"\n                              :width    \"20px\"\n                              :height   \"20px\"\n                              :bottom   \"0\"\n                              :right    \"0\"\n                              :cursor   \"se-resize\"}\n\n                             [:&:after\n                              {:content       \"\\\"\\\"\"\n                               :position      \"absolute\"\n                               :right         \"5px\"\n                               :bottom        \"5px\"\n                               :width         \"5px\"\n                               :height        \"5px\"\n                               :border-right  \"2px solid rgba(0, 0, 0, 0.4)\"\n                               :border-bottom \"2px solid rgba(0, 0, 0, 0.4)\"}]]]]\n\n                       [:$react-resizable\n                        {:position \"relative\"}]\n\n                       [:$react-resizable-handle\n                        {:position            \"absolute\"\n                         :width               \"20px\"\n                         :height              \"20px\"\n                         :bottom              \"0\"\n                         :right               \"0\"\n                         :background-position \"bottom right\"\n                         :padding             \"0 3px 3px 0\"\n                         :background-repeat   \"no-repeat\"\n                         :background-origin   \"content-box\"\n                         :box-sizing          \"border-box\"\n                         :cursor              \"se-resize\"}]\n\n                       (grid-item-css {:background    \"#fff\"\n                                       :border-radius uc/card-border-radius\n                                       :display       \"flex\"})]\n   :componentDidMount (fn [this]\n                        (let [{:keys [onBreakpointChange]} (fp/props this)\n                              width (-> (gobj/getValueByKeys this \"grid\")\n                                        (dom/node)\n                                        (gobj/get \"offsetWidth\"))\n                              bp    (->> (rseq breakpoints)\n                                         (filter #(>= width (:breakpoint %)))\n                                         first\n                                         :id)]\n                          (onBreakpointChange bp)))}\n  (dom/create-element GridWithWidth (clj->js (assoc props :ref #(gobj/set this \"grid\" %)))\n    (fp/children this)))\n\n(def grid-layout (fp/factory GridLayout))\n"]}