{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$tcl.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqEnHD,MAAOC,CAAAA,OAAP,CA7DAC,QAAY,CAACC,IAAD,CAAO,CACjB,MAAO,CACLC,KAAM,KADD,CAELC,QAAS,CAAC,IAAD,CAFJ,CAGLC,SAAU,86BAHL;AAeLC,SAAU,CACRJ,IAAKK,CAAAA,OAAL,CAAa,WAAb,CAA0B,GAA1B,CADQ,CAERL,IAAKK,CAAAA,OAAL,CAAa,WAAb,CAA0B,GAA1B,CAFQ,CAGR,CACEC,cAAe,MADjB,CAEEC,IAAK,OAFP,CAGEC,WAAY,CAAA,CAHd,CAIEJ,SAAU,CACR,CACEK,UAAW,OADb,CAEEC,MAAO,iDAFT,CAGEH,IAAK,cAHP,CAIEI,eAAgB,CAAA,CAJlB,CAKEH,WAAY,CAAA,CALd,CADQ,CAJZ,CAHQ,CAiBR,CACEA,WAAY,CAAA,CADd,CAEEI,SAAU,CACR,CACEF,MAAO,kEADT,CAEEH,IAAK,qBAFP,CADQ,CAKR,CACEG,MAAO,6CADT,CAEEH,IAAK,2BAFP,CALQ,CAFZ,CAjBQ,CA8BR,CACEE,UAAW,QADb,CAEEL,SAAU,CAACJ,IAAKa,CAAAA,gBAAN,CAFZ;AAGED,SAAU,CACRZ,IAAKc,CAAAA,OAAL,CAAad,IAAKe,CAAAA,iBAAlB,CAAqC,CAACC,QAAS,IAAV,CAArC,CADQ,CAHZ,CA9BQ,CAqCR,CACEP,UAAW,QADb,CAEEG,SAAU,CAACZ,IAAKiB,CAAAA,kBAAN,CAA0BjB,IAAKkB,CAAAA,aAA/B,CAFZ,CArCQ,CAfL,CADU,CARgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/tcl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$tcl\"] = function(global,require,module,exports) {\n/*\nLanguage: Tcl\nDescription: Tcl is a very simple programming language.\nAuthor: Radek Liska <radekliska@gmail.com>\nWebsite: https://www.tcl.tk/about/language.html\n*/\n\nfunction tcl(hljs) {\n  return {\n    name: 'Tcl',\n    aliases: ['tk'],\n    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +\n      'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +\n      'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +\n      'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +\n      'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +\n      'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+\n      'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+\n      'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+\n      'return safe scan seek set socket source split string subst switch tcl_endOfWord '+\n      'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+\n      'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+\n      'uplevel upvar variable vwait while',\n    contains: [\n      hljs.COMMENT(';[ \\\\t]*#', '$'),\n      hljs.COMMENT('^[ \\\\t]*#', '$'),\n      {\n        beginKeywords: 'proc',\n        end: '[\\\\{]',\n        excludeEnd: true,\n        contains: [\n          {\n            className: 'title',\n            begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '[ \\\\t\\\\n\\\\r]',\n            endsWithParent: true,\n            excludeEnd: true\n          }\n        ]\n      },\n      {\n        excludeEnd: true,\n        variants: [\n          {\n            begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\\\(([a-zA-Z0-9_])*\\\\)',\n            end: '[^a-zA-Z0-9_\\\\}\\\\$]'\n          },\n          {\n            begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '(\\\\))?[^a-zA-Z0-9_\\\\}\\\\$]'\n          }\n        ]\n      },\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\n        ]\n      },\n      {\n        className: 'number',\n        variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n      }\n    ]\n  }\n}\n\nmodule.exports = tcl;\n\n};"],
"names":["shadow$provide","global","require","module","exports","tcl","hljs","name","aliases","keywords","contains","COMMENT","beginKeywords","end","excludeEnd","className","begin","endsWithParent","variants","BACKSLASH_ESCAPE","inherit","QUOTE_STRING_MODE","illegal","BINARY_NUMBER_MODE","C_NUMBER_MODE"]
}
