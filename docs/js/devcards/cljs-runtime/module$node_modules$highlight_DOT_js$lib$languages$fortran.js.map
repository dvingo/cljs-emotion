{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$fortran.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqBvHC,QAASA,OAAM,CAAC,GAAGC,IAAJ,CAAU,CAEvB,MADeA,KAAKC,CAAAA,GAAL,CAAUC,CAAD,EAAO,CAVH,CAAA,CAUUA,CAXtC,CACkB,QAAlB,GAAI,MAUkCA,EAVtC,CAUsCA,CAVtC,CAUsCA,CAR5BC,CAAAA,MAHV,CAAgB,IAWe,OAAA,EAAA,CAAhB,CAA2BC,CAAAA,IAA3BC,CAAgC,EAAhCA,CADQ,CA0IzBR,MAAOC,CAAAA,OAAP,CA7HAQ,QAAgB,CAACC,IAAD,CAAO,CAOrB,MAAMC,QAAU,CACdC,SAAU,CACRF,IAAKC,CAAAA,OAAL,CAAa,GAAb,CAAkB,GAAlB,CAAuB,CACrBE,UAAW,CADU,CAAvB,CADQ,CAKRH,IAAKC,CAAAA,OAAL,CAAa,OAAb,CAAsB,GAAtB,CAA2B,CACzBE,UAAW,CADc,CAA3B,CALQ,CAQRH,IAAKC,CAAAA,OAAL,CAAa,KAAb,CAAoB,GAApB,CAAyB,CACvBE,UAAW,CADY,CAAzB,CARQ,CADI,CAgBhB,KAAMC,uBAAyB,eAC/B,OAAMC,oBAAsB,iBACtBC,uBAAAA,CAAS,CACbC,UAAW,QADE;AAEbL,SAAU,CACR,CACEM,MAAOhB,MAAA,CAAO,OAAP,CAAgB,SAAhB,CAA2Ba,mBAA3B,CAAgDD,sBAAhD,CADT,CADQ,CAIR,CACEI,MAAOhB,MAAA,CAAO,OAAP,CAAgBa,mBAAhB,CAAqCD,sBAArC,CADT,CAJQ,CAOR,CACEI,MAAOhB,MAAA,CAAO,OAAP,CAAgBa,mBAAhB,CAAqCD,sBAArC,CADT,CAPQ,CAFG,CAabD,UAAW,CAbE,CA4Ef,OAAO,CACLM,KAAM,SADD,CAELC,iBAAkB,CAAA,CAFb,CAGLC,QAAS,CACP,KADO,CAEP,KAFO,CAHJ,CAOLC,SAhDeC,CACfC,QAAS,gBADMD,CAEfE,QAAS,6yDAFMF;AAsBfG,SAAU,6gEAtBKH,CAyCV;AAQLI,QAAS,MARJ,CASLC,SAAU,CA3DGC,CACbZ,UAAW,QADEY,CAEbhB,UAAW,CAFEgB,CAGbjB,SAAU,CACRF,IAAKoB,CAAAA,gBADG,CAERpB,IAAKqB,CAAAA,iBAFG,CAHGF,CA2DH,CArESG,CACnBf,UAAW,UADQe,CAEnBC,cAAe,6BAFID,CAGnBL,QAAS,aAHUK,CAInBJ,SAAU,CACRlB,IAAKwB,CAAAA,qBADG,CA5CGC,CACblB,UAAW,QADEkB,CAEbjB,MAAO,KAFMiB,CAGbC,IAAK,KAHQD,CA4CH,CAJSH,CAqET,CAKR,CACEd,MAAO,aADT,CAEEL,UAAW,CAFb,CALQ,CASRF,OATQ,CAURK,sBAVQ,CATL,CArGc,CAlCgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/fortran.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$fortran\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Fortran\nAuthor: Anthony Scemama <scemama@irsamc.ups-tlse.fr>\nWebsite: https://en.wikipedia.org/wiki/Fortran\nCategory: scientific\n*/\n\n/** @type LanguageFn */\nfunction fortran(hljs) {\n  const PARAMS = {\n    className: 'params',\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT('!', '$', {\n        relevance: 0\n      }),\n      // allow FORTRAN 77 style comments\n      hljs.COMMENT('^C[ ]', '$', {\n        relevance: 0\n      }),\n      hljs.COMMENT('^C$', '$', {\n        relevance: 0\n      })\n    ]\n  };\n\n  // regex in both fortran and irpf90 should match\n  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\\d]+)?/;\n  const OPTIONAL_NUMBER_EXP = /([de][+-]?\\d+)?/;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: concat(/\\b\\d+/, /\\.(\\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      },\n      {\n        begin: concat(/\\b\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      },\n      {\n        begin: concat(/\\.\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      }\n    ],\n    relevance: 0\n  };\n\n  const FUNCTION_DEF = {\n    className: 'function',\n    beginKeywords: 'subroutine function program',\n    illegal: '[${=\\\\n]',\n    contains: [\n      hljs.UNDERSCORE_TITLE_MODE,\n      PARAMS\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  const KEYWORDS = {\n    literal: '.False. .True.',\n    keyword: 'kind do concurrent local shared while private call intrinsic where elsewhere ' +\n      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then block endblock endassociate ' +\n      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +\n      'goto save else use module select case ' +\n      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +\n      'continue format pause cycle exit ' +\n      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +\n      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +\n      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +\n      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +\n      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +\n      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +\n      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +\n      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +\n      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +\n      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +\n      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure impure ' +\n      'integer real character complex logical codimension dimension allocatable|10 parameter ' +\n      'external implicit|10 none double precision assign intent optional pointer ' +\n      'target in out common equivalence data',\n    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +\n      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +\n      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +\n      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +\n      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +\n      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +\n      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +\n      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +\n      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +\n      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +\n      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +\n      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +\n      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +\n      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of ' +\n      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +\n      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +\n      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +\n      'num_images parity popcnt poppar shifta shiftl shiftr this_image sync change team co_broadcast co_max co_min co_sum co_reduce'\n  };\n  return {\n    name: 'Fortran',\n    case_insensitive: true,\n    aliases: [\n      'f90',\n      'f95'\n    ],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [\n      STRING,\n      FUNCTION_DEF,\n      // allow `C = value` for assignments so they aren't misdetected\n      // as Fortran 77 style comments\n      {\n        begin: /^C\\s*=(?!=)/,\n        relevance: 0\n      },\n      COMMENT,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = fortran;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","fortran","hljs","COMMENT","variants","relevance","OPTIONAL_NUMBER_SUFFIX","OPTIONAL_NUMBER_EXP","NUMBER","className","begin","name","case_insensitive","aliases","keywords","KEYWORDS","literal","keyword","built_in","illegal","contains","STRING","APOS_STRING_MODE","QUOTE_STRING_MODE","FUNCTION_DEF","beginKeywords","UNDERSCORE_TITLE_MODE","PARAMS","end"]
}
