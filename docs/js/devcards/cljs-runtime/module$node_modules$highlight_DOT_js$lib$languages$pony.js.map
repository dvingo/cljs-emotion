{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$pony.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyFpHD,MAAOC,CAAAA,OAAP,CAhFAC,QAAa,CAACC,IAAD,CAAO,CAgElB,MAAO,CACLC,KAAM,MADD,CAELC,SAjEeC,CACfC,QACE,gTAFaD,CAOfE,KACE,yBARaF;AASfG,QACE,iBAVaH,CA+DV,CAGLI,SAAU,CA/BMC,CAChBC,UAAW,MADKD,CAEhBE,MAAO,kBAFSF,CAGhBG,UAAW,CAHKH,CA+BN,CArDqBI,CAC/BH,UAAW,QADoBG,CAE/BF,MAAO,KAFwBE,CAG/BC,IAAK,KAH0BD,CAI/BD,UAAW,EAJoBC,CAqDrB,CA9CcE,CACxBL,UAAW,QADaK,CAExBJ,MAAO,GAFiBI,CAGxBD,IAAK,GAHmBC,CAIxBP,SAAU,CAAEP,IAAKe,CAAAA,gBAAP,CAJcD,CA8Cd,CAvCmBE,CAC7BP,UAAW,QADkBO,CAE7BN,MAAO,GAFsBM,CAG7BH,IAAK,GAHwBG,CAI7BT,SAAU,CAAEP,IAAKe,CAAAA,gBAAP,CAJmBC,CAK7BL,UAAW,CALkBK,CAuCnB,CAzBQC,CAClBP,MAAOV,IAAKkB,CAAAA,QAAZR,CAAuB,GADLO,CAElBN,UAAW,CAFOM,CAyBR,CApBQE,CAClBV,UAAW,QADOU,CAElBT,MAAO,8FAFWS,CAGlBR,UAAW,CAHOQ,CAoBR,CAORnB,IAAKoB,CAAAA,mBAPG;AAQRpB,IAAKqB,CAAAA,oBARG,CAHL,CAhEW,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/pony.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$pony\"] = function(global,require,module,exports) {\n/*\nLanguage: Pony\nAuthor: Joe Eli McIlvain <joe.eli.mac@gmail.com>\nDescription: Pony is an open-source, object-oriented, actor-model,\n             capabilities-secure, high performance programming language.\nWebsite: https://www.ponylang.io\n*/\n\nfunction pony(hljs) {\n  const KEYWORDS = {\n    keyword:\n      'actor addressof and as be break class compile_error compile_intrinsic ' +\n      'consume continue delegate digestof do else elseif embed end error ' +\n      'for fun if ifdef in interface is isnt lambda let match new not object ' +\n      'or primitive recover repeat return struct then trait try type until ' +\n      'use var where while with xor',\n    meta:\n      'iso val tag trn box ref',\n    literal:\n      'this false true'\n  };\n\n  const TRIPLE_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"\"\"',\n    end: '\"\"\"',\n    relevance: 10\n  };\n\n  const QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n\n  const SINGLE_QUOTE_CHAR_MODE = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    relevance: 0\n  };\n\n  const TYPE_NAME = {\n    className: 'type',\n    begin: '\\\\b_?[A-Z][\\\\w]*',\n    relevance: 0\n  };\n\n  const PRIMED_NAME = {\n    begin: hljs.IDENT_RE + '\\'',\n    relevance: 0\n  };\n\n  const NUMBER_MODE = {\n    className: 'number',\n    begin: '(-?)(\\\\b0[xX][a-fA-F0-9]+|\\\\b0[bB][01]+|(\\\\b\\\\d+(_\\\\d+)?(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)',\n    relevance: 0\n  };\n\n  /**\n   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify\n   * highlighting and fix cases like\n   * ```\n   * interface Iterator[A: A]\n   *   fun has_next(): Bool\n   *   fun next(): A?\n   * ```\n   * where it is valid to have a function head without a body\n   */\n\n  return {\n    name: 'Pony',\n    keywords: KEYWORDS,\n    contains: [\n      TYPE_NAME,\n      TRIPLE_QUOTE_STRING_MODE,\n      QUOTE_STRING_MODE,\n      SINGLE_QUOTE_CHAR_MODE,\n      PRIMED_NAME,\n      NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n}\n\nmodule.exports = pony;\n\n};"],
"names":["shadow$provide","global","require","module","exports","pony","hljs","name","keywords","KEYWORDS","keyword","meta","literal","contains","TYPE_NAME","className","begin","relevance","TRIPLE_QUOTE_STRING_MODE","end","QUOTE_STRING_MODE","BACKSLASH_ESCAPE","SINGLE_QUOTE_CHAR_MODE","PRIMED_NAME","IDENT_RE","NUMBER_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE"]
}
