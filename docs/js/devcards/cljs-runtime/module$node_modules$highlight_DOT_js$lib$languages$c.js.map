{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$c.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/c.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$c\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/,\n        end: /$/,\n        illegal: '\\\\n'\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [\n      'c',\n      'h'\n    ],\n    keywords: CPP_KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","c","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","FUNCTION_TYPE_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","CPP_PRIMITIVE_TYPES","className","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","name","aliases","disableAutodetect","FUNCTION_DECLARATION","returnBegin","excludeEnd","DECLTYPE_AUTO_RE","preprocessor","strings"]
}
