{"version":3,"sources":["nubank/workspaces/model.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/symbol?","cljs.core/any?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__49812","cljs.core/map?","cljs.core/contains?","G__49875","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__49921","i__13468__auto__","v__13469__auto__","cljs.core.nth","cljs.core/keyword?","cljs.core/pos-int?","cljs.core/boolean?","G__49962","cljs.spec.alpha/or-spec-impl","cljs.core/int?"],"sourcesContent":["(ns nubank.workspaces.model\n  (:require [clojure.spec.alpha :as s]))\n\n(s/def ::card-id symbol?)\n\n; card instance\n\n(s/def ::dom-node any?)\n\n(s/def ::dispose (s/fspec :args (s/cat :node ::dom-node)))\n(s/def ::refresh (s/fspec :args (s/cat :node ::dom-node)))\n(s/def ::render (s/fspec :args (s/cat :node ::dom-node)))\n(s/def ::render-toolbar (s/fspec :args (s/cat)))\n\n(s/def ::card-instance (s/keys :req [::render] :opt [::dispose ::refresh ::render-toolbar]))\n\n(s/def ::card-meta (s/keys))\n(s/def ::node-props (s/map-of keyword? any?))\n(s/def ::init (s/fspec :ret ::card-instance))\n(s/def ::card-width pos-int?)\n(s/def ::card-height pos-int?)\n(s/def ::card-resizable? boolean?)\n(s/def ::card-unlisted? boolean?)\n(s/def ::card (s/keys :req [::init] :opt [::node-props]))\n(s/def ::workspace-layouts map?)\n\n(s/def ::align (s/or :predefined keyword? :custom map?))\n(s/def ::form-hash int?)\n"]}