shadow$provide.module$node_modules$$emotion$serialize$dist$emotion_serialize_browser_cjs=function(global,require,module,exports){function _interopDefault(e){return e&&e.__esModule?e:{"default":e}}function handleInterpolation(mergedProps,registered,interpolation){if(null==interpolation)return"";if(void 0!==interpolation.__emotion_styles){if("NO_COMPONENT_SELECTOR"===interpolation.toString())throw Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");return interpolation}switch(typeof interpolation){case "boolean":return"";
case "object":if(1===interpolation.anim)return cursor={name:interpolation.name,styles:interpolation.styles,next:cursor},interpolation.name;if(void 0!==interpolation.styles){registered=interpolation.next;if(void 0!==registered)for(;void 0!==registered;)cursor={name:registered.name,styles:registered.styles,next:cursor},registered=registered.next;registered=interpolation.styles+";";void 0!==interpolation.map&&(registered+=interpolation.map);return registered}return createStringFromObject(mergedProps,
registered,interpolation);case "function":if(void 0!==mergedProps){var previousCursor=cursor;interpolation=interpolation(mergedProps);cursor=previousCursor;return handleInterpolation(mergedProps,registered,interpolation)}console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle \x3d (props) \x3d\x3e css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent \x3d styled('div')`${dynamicStyle}`");
break;case "string":var matched=[];mergedProps=interpolation.replace(animationRegex,function(match,p1,p2){match="animation"+matched.length;matched.push("const "+match+" \x3d keyframes`"+p2.replace(/^@keyframes animation-\w+/,"")+"`");return"${"+match+"}"});matched.length&&console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n"+[].concat(matched,["`"+mergedProps+"`"]).join("\n")+"\n\nYou should wrap it with `css` like this:\n\ncss`"+
(mergedProps+"`"))}if(null==registered)return interpolation;registered=registered[interpolation];return void 0!==registered?registered:interpolation}function createStringFromObject(mergedProps,registered,obj){var string="";if(Array.isArray(obj))for(var i=0;i<obj.length;i++)string+=handleInterpolation(mergedProps,registered,obj[i])+";";else for(i in obj){var value=obj[i];if("object"!==typeof value)null!=registered&&void 0!==registered[value]?string+=i+"{"+registered[value]+"}":isProcessableValue(value)&&
(string+=processStyleName(i)+":"+processStyleValue(i,value)+";");else{if("NO_COMPONENT_SELECTOR"===i)throw Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");if(!Array.isArray(value)||"string"!==typeof value[0]||null!=registered&&void 0!==registered[value[0]])switch(value=handleInterpolation(mergedProps,registered,value),i){case "animation":case "animationName":string+=processStyleName(i)+":"+value+";";break;default:"undefined"===i&&console.error("You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key)."),
string+=i+"{"+value+"}"}else for(var _i=0;_i<value.length;_i++)isProcessableValue(value[_i])&&(string+=processStyleName(i)+":"+processStyleValue(i,value[_i])+";")}}return string}Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$$emotion$hash$dist$hash_browser_cjs");module=require("module$node_modules$$emotion$unitless$dist$unitless_browser_cjs");require=require("module$node_modules$$emotion$memoize$dist$memoize_browser_cjs");var hashString__default=_interopDefault(global),
unitless__default=_interopDefault(module),hyphenateRegex=/[A-Z]|^ms/g,animationRegex=/_EMO_([^_]+?)_([^]*?)_EMO_/g,isProcessableValue=function(value){return null!=value&&"boolean"!==typeof value},processStyleName=_interopDefault(require)["default"](function(styleName){return 45===styleName.charCodeAt(1)?styleName:styleName.replace(hyphenateRegex,"-$\x26").toLowerCase()}),processStyleValue=function(key,value){switch(key){case "animation":case "animationName":if("string"===typeof value)return value.replace(animationRegex,
function(match,p1,p2){cursor={name:p1,styles:p2,next:cursor};return p1})}return 1!==unitless__default["default"][key]&&45!==key.charCodeAt(1)&&"number"===typeof value&&0!==value?value+"px":value},contentValuePattern=/(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/,contentValues=["normal","none","initial","inherit","unset"],oldProcessStyleValue=processStyleValue,msPattern=/^-ms-/,hyphenPattern=/-(.)/g,hyphenatedCache={};processStyleValue=function(key,
value){if("content"===key&&("string"!==typeof value||-1===contentValues.indexOf(value)&&!contentValuePattern.test(value)&&(value.charAt(0)!==value.charAt(value.length-1)||'"'!==value.charAt(0)&&"'"!==value.charAt(0))))throw Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\""+value+"\"'`");value=oldProcessStyleValue(key,value);""!==value&&45!==key.charCodeAt(1)&&-1!==key.indexOf("-")&&void 0===hyphenatedCache[key]&&(hyphenatedCache[key]=!0,console.error("Using kebab-case for css properties in objects is not supported. Did you mean "+
key.replace(msPattern,"ms-").replace(hyphenPattern,function(str,_char){return _char.toUpperCase()})+"?"));return value};var labelPattern=/label:\s*([^\s;\n{]+)\s*(;|$)/g;var sourceMapPattern=/\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;var cursor;exports.serializeStyles=function(args,registered,mergedProps){if(1===args.length&&"object"===typeof args[0]&&null!==args[0]&&void 0!==args[0].styles)return args[0];var stringMode=!0,styles="";cursor=void 0;var strings=args[0];null==strings||
void 0===strings.raw?(stringMode=!1,styles+=handleInterpolation(mergedProps,registered,strings)):(void 0===strings[0]&&console.error("You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences"),
styles+=strings[0]);for(var i=1;i<args.length;i++)styles+=handleInterpolation(mergedProps,registered,args[i]),stringMode&&(void 0===strings[i]&&console.error("You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences"),
styles+=strings[i]);var sourceMap;styles=styles.replace(sourceMapPattern,function(match){sourceMap=match;return""});labelPattern.lastIndex=0;for(args="";null!==(registered=labelPattern.exec(styles));)args+="-"+registered[1];return{name:hashString__default["default"](styles)+args,styles,map:sourceMap,next:cursor,toString:function(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}}}}
//# sourceMappingURL=module$node_modules$$emotion$serialize$dist$emotion_serialize_browser_cjs.js.map
