{"version":3,"sources":["com/fulcrologic/fulcro_css/localized_dom_common.cljc"],"mappings":"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","names":["s","clojure.string/replace","k","cljs.core/re-seq","cljs.core/name","com.fulcrologic.fulcro-css.localized-dom-common/parse","tokens","get-tokens","id","p1__58011#","cljs.core.filter","cljs.core/re-matches","cljs.core/first","classes","p1__58012#","global-classes","cljs.core.into","cljs.core.comp","p1__58013#","cljs.core.map","sanitized-id","remove-separators","cljs.core.ex_info","G__58018","cljs.core.keep","cljs.core.assoc","com.fulcrologic.fulcro-css.localized-dom-common/combined-classes","classes-seq","classes-str","clojure.string.join","cljs.core/seq","cljs.core.conj","p","nm","dflt","cljs.core/map?","cljs.core.get","cljs.core/object?","com.fulcrologic.fulcro_css.localized_dom_common.goog$module$goog$object.get","v","com.fulcrologic.fulcro_css.localized_dom_common.goog$module$goog$object.set","cljs.core.dissoc","com.fulcrologic.fulcro_css.localized_dom_common.goog$module$goog$object.remove","com.fulcrologic.fulcro-css.localized-dom-common/fold-in-classes","props","component","temp__5751__auto__","extra-classes","pget","old-classes","pdissoc","clz","com.fulcrologic.fulcro.components/react-type","new-classes","c","G__58041","clojure.string/starts-with?","G__58042","G__58043","com.fulcrologic.fulcro-css.css/local-class","strip-prefix","passoc","com.fulcrologic.fulcro-css.localized-dom-common/add-kwprops-to-props","kw","map__58048","cljs.core/--destructure-map","cljs.core/vec","cljs.core.concat","com.fulcrologic.fulcro.components/*parent*","p1__58047#","G__58049","G__58050","com.fulcrologic.fulcro_css.localized_dom_common.goog$module$goog$object.clone","existing-classes","G__58055","or__4253__auto__"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.localized-dom-common\n  (:refer-clojure :exclude [map meta time set symbol filter])\n  (:require\n    com.fulcrologic.fulcro-css.css\n    #?(:clj [cljs.tagged-literals :refer [->JSValue]])\n    #?@(:cljs [[cljsjs.react]\n               [cljsjs.react.dom]\n               [goog.object :as gobj]])\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str]))\n\n\n(letfn [(remove-separators [s] (when s (str/replace s #\"^[.#$]\" \"\")))\n        (get-tokens [k] (re-seq #\"[#.$]?[^#.$]+\" (name k)))]\n  (defn- parse\n    \"Parse CSS shorthand keyword and return map of id/classes.\n\n    (parse :.klass3#some-id.klass1.klass2)\n    => {:id        \\\"some-id\\\"\n        :classes [\\\"klass3\\\" \\\"klass1\\\" \\\"klass2\\\"]}\"\n    [k]\n    (if k\n      (let [tokens         (get-tokens k)\n            id             (->> tokens (clojure.core/filter #(re-matches #\"^#.*\" %)) first)\n            classes        (->> tokens (clojure.core/filter #(re-matches #\"^\\..*\" %)))\n            global-classes (into []\n                             (comp\n                               (clojure.core/filter #(re-matches #\"^[$].*\" %))\n                               (clojure.core/map (fn [k] (-> k\n                                                           name\n                                                           (str/replace \"$\" \"\")))))\n                             tokens)\n            sanitized-id   (remove-separators id)]\n        (when-not (re-matches #\"^(\\.[^.#$]+|#[^.#$]+|[$][^.#$]+)+$\" (name k))\n          (throw (ex-info \"Invalid style keyword. It contains something other than classnames and IDs.\" {})))\n        (cond-> {:global-classes global-classes\n                 :classes        (into [] (keep remove-separators classes))}\n          sanitized-id (assoc :id sanitized-id)))\n      {})))\n\n(defn- combined-classes\n  \"Takes a sequence of classname strings and a string with existing classes. Returns a string of these properly joined.\n\n  classes-str can be nil or and empty string, and classes-seq can be nil or empty.\"\n  [classes-seq classes-str]\n  (str/join \" \" (if (seq classes-str) (conj classes-seq classes-str) classes-seq)))\n\n(letfn [(pget [p nm dflt] (cond\n                            #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (get-in p [:val nm] dflt)])\n                            (map? p) (get p nm dflt)\n                            #?@(:cljs [(object? p) (gobj/get p (name nm) dflt)])))\n        (passoc [p nm v] (cond\n                           #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (assoc (.-val p) nm v))])\n                           (map? p) (assoc p nm v)\n                           #?@(:cljs [(object? p) (do (gobj/set p (name nm) v) p)])))\n        (pdissoc [p nm] (cond\n                          #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (dissoc (.-val p) nm))])\n                          (map? p) (dissoc p nm)\n                          #?@(:cljs [(object? p) (do (gobj/remove p (name nm)) p)])))\n        (strip-prefix [s] (str/replace s #\"^[:.#$]*\" \"\"))]\n  (defn fold-in-classes\n    \"Update the :className prop in the given props to include the classes in the :classes entry of props. Works on js objects and CLJ maps as props.\n    If using js props, they must be mutable.\"\n    [props component]\n    (if-let [extra-classes (pget props :classes nil)]\n      (let [old-classes (pget props :className \"\")]\n        (pdissoc\n          (if component\n            (let [clz         (comp/react-type component)\n                  new-classes (combined-classes (clojure.core/map (fn [c]\n                                                                    (let [c (some-> c name)]\n                                                                      (cond\n                                                                        (nil? c) \"\"\n                                                                        (str/starts-with? c \".\") (com.fulcrologic.fulcro-css.css/local-class clz (strip-prefix c))\n                                                                        (str/starts-with? c \"$\") (strip-prefix c)\n                                                                        :else c))) extra-classes) old-classes)]\n              (passoc props :className new-classes))\n            (let [new-classes (combined-classes (clojure.core/map strip-prefix extra-classes) old-classes)]\n              (passoc props :className new-classes)))\n          :classes))\n      props)))\n\n(defn add-kwprops-to-props\n  \"Combine a hiccup-style keyword with props that are either a JS or CLJS map.\"\n  [props kw]\n  (let [{:keys [global-classes classes id] :or {classes []}} (parse kw)\n        classes (vec (concat\n                       (if comp/*parent*\n                         (clojure.core/map #(com.fulcrologic.fulcro-css.css/local-class (comp/react-type comp/*parent*) %) classes)\n                         classes)\n                       global-classes))]\n    (fold-in-classes\n      (if #?(:clj false :cljs (or (nil? props) (object? props)))\n        #?(:clj  props\n           :cljs (let [props            (gobj/clone props)\n                       existing-classes (gobj/get props \"className\")]\n                   (when (seq classes) (gobj/set props \"className\" (combined-classes classes existing-classes)))\n                   (when id (gobj/set props \"id\" id))\n                   props))\n        (let [existing-classes (:className props)]\n          (cond-> (or props {})\n            (seq classes) (assoc :className (combined-classes classes existing-classes))\n            id (assoc :id id))))\n      comp/*parent*)))\n\n\n"]}