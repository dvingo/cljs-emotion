{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/transit.cljc"],"mappings":"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","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.transit","js/com.fulcrologic.fulcro.algorithms.transit.transit-handlers","com.fulcrologic.fulcro.algorithms.transit/transit-handlers","cljs.core.atom","com.fulcrologic.fulcro.algorithms.transit/read-handlers","cljs.core/deref","cljs.core.get","com.fulcrologic.fulcro.algorithms.transit/write-handlers","var_args","G__46757","com.fulcrologic.fulcro.algorithms.transit/writer","js/Error","com.fulcrologic.fulcro.algorithms.transit.writer","opts","cognitect.transit.writer","cljs.core.update","cljs.core/merge","G__46767","com.fulcrologic.fulcro.algorithms.transit/reader","com.fulcrologic.fulcro.algorithms.transit.reader","cognitect.transit.reader","com.fulcrologic.fulcro.algorithms.transit/serializable?","v","e46777","e","G__46785","com.fulcrologic.fulcro.algorithms.transit/transit-clj->str","data","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","write-meta","cognitect.transit/write-meta","G__46793","cljs.core.dissoc","and__4251__auto__","cljs.core.assoc","cognitect.transit/write","G__46805","com.fulcrologic.fulcro.algorithms.transit/transit-str->clj","str","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","cognitect.transit/read","cljs.spec.alpha/def-impl","cljs.core/map?","com.fulcrologic.fulcro.algorithms.transit/type-handler","type","tag","type->ground","ground->type","cognitect.transit.write_handler","_","t","r","cognitect.transit/read-handler","com.fulcrologic.fulcro.algorithms.transit/install-type-handler!","cljs.core.swap_BANG_","m","js/com.fulcrologic.fulcro.algorithms.transit.install-tempid-handler","com.fulcrologic.fulcro.algorithms.transit/install-tempid-handler","com.fulcrologic.fulcro.algorithms.tempid/TempId","com.fulcrologic.fulcro.algorithms.tempid/tag","tid","uuid","com.fulcrologic.fulcro.algorithms.tempid.tempid"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.transit\n  \"Transit functions for the on-the-wire EDN communication to common remotes. Includes support for Fulcro tempids,\n   and can be extended to support additional application-specific data types.\"\n  #?(:clj\n     (:refer-clojure :exclude [ref]))\n  (:require\n    [cognitect.transit :as t]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid #?@(:cljs [:refer [TempId]])])\n  #?(:clj\n     (:import [com.cognitect.transit\n               TransitFactory WriteHandler ReadHandler]\n              [com.fulcrologic.fulcro.algorithms.tempid TempId])))\n\n\n(defonce transit-handlers\n  (atom\n    {:writers {}\n     :readers {}}))\n\n(defn read-handlers\n  \"Returns a map that can be used for the :handlers key of a transit reader, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :readers {}))\n\n(defn write-handlers\n  \"Returns a map that can be used for the :handlers key of a transit writer, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :writers {}))\n\n\n#?(:cljs\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as handlers).\"\n     ([] (writer {}))\n     ([opts] (t/writer :json (update opts :handlers merge (write-handlers))))))\n\n#?(:clj\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as data type handlers).\"\n     ([out] (writer out {}))\n     ([out opts] (t/writer out :json (update opts :handlers merge (write-handlers))))))\n\n#?(:cljs\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([] (reader {}))\n     ([opts] (t/reader :json (update opts :handlers merge (read-handlers))))))\n\n#?(:clj\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([in] (reader in {}))\n     ([in opts] (t/reader in :json (-> opts (update :handlers merge (read-handlers)))))))\n\n(defn serializable?\n  \"Checks to see that the value in question can be serialized by the default fulcro writer by actually attempting to\n  serialize it.  This is *not* an efficient check.\"\n  [v]\n  #?(:clj  (try\n             (.write (writer (java.io.ByteArrayOutputStream.)) v)\n             true\n             (catch Exception e false))\n     :cljs (try\n             (.write (writer) v)\n             true\n             (catch :default e false))))\n\n(defn transit-clj->str\n  \"Use transit to encode clj data as a string. Useful for encoding initial app state from server-side rendering.\n\n  - `data`: Arbitrary data\n  - `opts`: (optional) Options to send when creating a `writer`. Always preserves metadata. Adding :metadata? true/false\n    will turn on/off metadata support. Defaults to on.\"\n  ([data] (transit-clj->str data {}))\n  ([data opts]\n   ;; Support for Datomic Cloud, which uses an older version of transit with no write-meta\n   (let [write-meta #?(:cljs t/write-meta\n                       :clj (resolve `t/write-meta))\n         opts               (cond-> (dissoc opts :metadata?)\n                              (and write-meta (not (false? (:metadata? opts)))) (assoc :transform write-meta))]\n     #?(:cljs (t/write (writer opts) data)\n        :clj\n              (with-open [out (java.io.ByteArrayOutputStream.)]\n                (t/write (writer out opts) data)\n                (.toString out \"UTF-8\"))))))\n\n(defn transit-str->clj\n  \"Use transit to decode a string into a clj data structure. Useful for decoding initial app state\n   when starting from a server-side rendering.\"\n  ([str] (transit-str->clj str {}))\n  ([str opts]\n   #?(:cljs (t/read (reader opts) str)\n      :clj  (t/read (reader (java.io.ByteArrayInputStream. (.getBytes str \"UTF-8\")) opts)))))\n\n(s/def ::reader map?)\n(s/def ::writer map?)\n\n(>defn type-handler\n  \"Creates a map that can be registered with Fulcro's transit support.\n\n   * `type` is a `deftype` or `defrecord` that represents your runtime data that you want to support in Transit\n   * `tag` is a string that uniquely identifies your type on the wire\n   * `type->ground` is a function that can take an instance of your `type` and turn it into something transit already\n   knows how to handle.\n   * `ground->type` is a function that can take whatever `type->ground` generated and turn it back into your `type`.\n\n   This function returns a map that contains a :reader and :writer key. The value at these keys is suitable for merging\n   at the `:handlers` key of a reader or writer's option map.\n\n   See also `install-type-handler!` for adding this to Fulcro's registry of type support.\"\n  [type tag type->ground ground->type]\n  [any? string? fn? fn? => (s/keys :req-un [::reader ::writer])]\n  {:writer {type (t/write-handler\n                   (fn [_] tag)\n                   (fn [t] (type->ground t))\n                   (fn [r] (str tag \"#\" r)))}\n   :reader {tag (t/read-handler ground->type)}})\n\n(>defn install-type-handler!\n  \"Install a type handler (generated by `type-handler`) into the global Fulcro transit support registry. This registry\n   can be used by any Fulcro-aware facility that needs to use transit for any standard purpose where app-specific type\n   support is desired.\"\n  [t]\n  [(s/keys :req-un [::reader ::writer]) => nil?]\n  (swap! transit-handlers (fn [m]\n                            (-> m\n                              (update :readers merge (:reader t))\n                              (update :writers merge (:writer t)))))\n  nil)\n\n(defonce install-tempid-handler\n  (install-type-handler! (type-handler TempId tempid/tag\n                           (fn [^TempId tid] (.-id tid))\n                           (fn [uuid] (tempid/tempid uuid)))))\n"]}