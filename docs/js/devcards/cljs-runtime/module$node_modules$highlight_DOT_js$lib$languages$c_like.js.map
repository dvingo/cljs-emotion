{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$c_like.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/c-like.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$c_like\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/,\n        end: /$/,\n        illegal: '\\\\n'\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\n/*\nLanguage: C-like (deprecated, use C and C++ instead)\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  const lang = cPlusPlus(hljs);\n\n  const C_ALIASES = [\n    \"c\",\n    \"h\"\n  ];\n\n  const CPP_ALIASES = [\n    'cc',\n    'c++',\n    'h++',\n    'hpp',\n    'hh',\n    'hxx',\n    'cxx'\n  ];\n\n  lang.disableAutodetect = true;\n  lang.aliases = [];\n  // support users only loading c-like (legacy)\n  if (!hljs.getLanguage(\"c\")) lang.aliases.push(...C_ALIASES);\n  if (!hljs.getLanguage(\"cpp\")) lang.aliases.push(...CPP_ALIASES);\n\n  // if c and cpp are loaded after then they will reclaim these\n  // aliases for themselves\n\n  return lang;\n}\n\nmodule.exports = cLike;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","cLike","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","FUNCTION_TYPE_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","CPP_PRIMITIVE_TYPES","className","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","name","aliases","FUNCTION_DECLARATION","returnBegin","excludeEnd","DECLTYPE_AUTO_RE","preprocessor","strings","C_ALIASES","CPP_ALIASES","lang","disableAutodetect","getLanguage","push"]
}
