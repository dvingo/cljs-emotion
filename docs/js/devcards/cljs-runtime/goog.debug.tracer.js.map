{
"version":3,
"file":"goog.debug.tracer.js",
"lineCount":394,
"mappings":"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",
"sources":["goog/debug/tracer.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of the Tracer class and associated classes.\n *\n * @see ../demos/tracer.html\n * @suppress {strictMissingProperties}\n */\n\ngoog.provide('goog.debug.StopTraceDetail');\ngoog.provide('goog.debug.Trace');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.debug.Logger');\ngoog.require('goog.iter');\ngoog.require('goog.log');\ngoog.require('goog.structs.Map');\ngoog.require('goog.structs.SimplePool');\n\n\n\n/**\n * Class used for singleton goog.debug.Trace.  Used for timing slow points in\n * the code. Based on the java Tracer class but optimized for javascript.\n * See com.google.common.tracing.Tracer.\n * It is also possible to bridge from this class to other tracer classes via\n * adding listeners.\n * @constructor\n * @private\n */\ngoog.debug.Trace_ = function() {\n  'use strict';\n  /**\n   * Events in order.\n   * @private {!Array<!goog.debug.Trace_.Event_>}\n   */\n  this.events_ = [];\n\n  /**\n   * Outstanding events that have started but haven't yet ended. The keys are\n   * numeric ids and the values are goog.debug.Trace_.Event_ objects.\n   * @private {!goog.structs.Map<number, !goog.debug.Trace_.Event_>}\n   */\n  this.outstandingEvents_ = new goog.structs.Map();\n\n  /**\n   * Start time of the event trace\n   * @private {number}\n   */\n  this.startTime_ = 0;\n\n  /**\n   * Cummulative overhead of calls to startTracer\n   * @private {number}\n   */\n  this.tracerOverheadStart_ = 0;\n\n  /**\n   * Cummulative overhead of calls to endTracer\n   * @private {number}\n   */\n  this.tracerOverheadEnd_ = 0;\n\n  /**\n   * Cummulative overhead of calls to addComment\n   * @private {number}\n   */\n  this.tracerOverheadComment_ = 0;\n\n  /**\n   * Keeps stats on different types of tracers. The keys are strings and the\n   * values are goog.debug.Stat\n   * @private {!goog.structs.Map}\n   */\n  this.stats_ = new goog.structs.Map();\n\n  /**\n   * Total number of traces created in the trace.\n   * @private {number}\n   */\n  this.tracerCount_ = 0;\n\n  /**\n   * Total number of comments created in the trace.\n   * @private {number}\n   */\n  this.commentCount_ = 0;\n\n  /**\n   * Next id to use for the trace.\n   * @private {number}\n   */\n  this.nextId_ = 1;\n\n  /**\n   * A pool for goog.debug.Trace_.Event_ objects so we don't keep creating and\n   * garbage collecting these (which is very expensive in IE6).\n   * @private {!goog.structs.SimplePool}\n   */\n  this.eventPool_ = new goog.structs.SimplePool(0, 4000);\n  this.eventPool_.createObject = function() {\n    'use strict';\n    return new goog.debug.Trace_.Event_();\n  };\n\n\n  /**\n   * A pool for goog.debug.Trace_.Stat_ objects so we don't keep creating and\n   * garbage collecting these (which is very expensive in IE6).\n   * @private {!goog.structs.SimplePool}\n   */\n  this.statPool_ = new goog.structs.SimplePool(0, 50);\n  this.statPool_.createObject = function() {\n    'use strict';\n    return new goog.debug.Trace_.Stat_();\n  };\n\n  var self = this;\n\n  /** @private {!goog.structs.SimplePool<number>} */\n  this.idPool_ = new goog.structs.SimplePool(0, 2000);\n  this.idPool_.setCreateObjectFn(function() {\n    'use strict';\n    return self.nextId_++;\n  });\n\n  /**\n   * Default threshold below which a tracer shouldn't be reported\n   * @private {number}\n   */\n  this.defaultThreshold_ = 3;\n\n  /**\n   * An object containing three callback functions to be called when starting or\n   * stopping a trace, or creating a comment trace.\n   * @private {!goog.debug.Trace_.TracerCallbacks}\n   */\n  this.traceCallbacks_ = {};\n};\n\n\n/**\n * Logger for the tracer\n * @private @const {?goog.log.Logger}\n */\ngoog.debug.Trace_.prototype.logger_ = goog.log.getLogger('goog.debug.Trace');\n\n\n/**\n * Maximum size of the trace before we discard events\n * @type {number}\n */\ngoog.debug.Trace_.prototype.MAX_TRACE_SIZE = 1000;\n\n\n/**\n * Event type supported by tracer\n * @enum {number}\n */\ngoog.debug.Trace_.EventType = {\n  /**\n   * Start event type\n   */\n  START: 0,\n\n  /**\n   * Stop event type\n   */\n  STOP: 1,\n\n  /**\n   * Comment event type\n   */\n  COMMENT: 2\n};\n\n\n\n/**\n * Class to keep track of a stat of a single tracer type. Stores the count\n * and cumulative time.\n * @constructor\n * @private\n */\ngoog.debug.Trace_.Stat_ = function() {\n  'use strict';\n  /**\n   * Number of tracers\n   * @type {number}\n   */\n  this.count = 0;\n\n  /**\n   * Cumulative time of traces\n   * @type {number}\n   */\n  this.time = 0;\n\n  /**\n   * Total number of allocations for this tracer type\n   * @type {number}\n   */\n  this.varAlloc = 0;\n};\n\n\n/**\n * @type {string|null|undefined}\n */\ngoog.debug.Trace_.Stat_.prototype.type;\n\n\n/**\n * @return {string} A string describing the tracer stat.\n * @override\n */\ngoog.debug.Trace_.Stat_.prototype.toString = function() {\n  'use strict';\n  var sb = [];\n  sb.push(\n      this.type, ' ', this.count, ' (', Math.round(this.time * 10) / 10,\n      ' ms)');\n  if (this.varAlloc) {\n    sb.push(' [VarAlloc = ', this.varAlloc, ']');\n  }\n  return sb.join('');\n};\n\n\n\n/**\n * Private class used to encapsulate a single event, either the start or stop\n * of a tracer.\n * @constructor\n * @private\n */\ngoog.debug.Trace_.Event_ = function() {\n  // the fields are different for different events - see usage in code\n};\n\n\n/**\n * @type {string|null|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.type;\n\n\n/**\n * @type {goog.debug.Trace_.EventType|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.eventType;\n\n\n/**\n * @type {number|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.id;\n\n\n/**\n * @type {string|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.comment;\n\n/**\n * @type {number|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.eventTime;\n\n/**\n * @type {number|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.startTime;\n\n/**\n * @type {number|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.stopTime;\n\n/**\n * @type {number|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.totalVarAlloc;\n\n\n/**\n * Returns a formatted string for the event.\n * @param {number} startTime The start time of the trace to generate relative\n * times.\n * @param {number} prevTime The completion time of the previous event or -1.\n * @param {string} indent Extra indent for the message\n *     if there was no previous event.\n * @return {string} The formatted tracer string.\n */\ngoog.debug.Trace_.Event_.prototype.toTraceString = function(\n    startTime, prevTime, indent) {\n  'use strict';\n  var sb = [];\n\n  goog.asserts.assertNumber(\n      this.eventTime, 'eventTime missing - call startTracer?');\n  goog.asserts.assertNumber(\n      this.totalVarAlloc, 'totalVarAlloc missing - call startTracer?');\n  if (prevTime == -1) {\n    sb.push('    ');\n  } else {\n    sb.push(goog.debug.Trace_.longToPaddedString_(this.eventTime - prevTime));\n  }\n\n  sb.push(' ', goog.debug.Trace_.formatTime_(this.eventTime - startTime));\n  if (this.eventType == goog.debug.Trace_.EventType.START) {\n    sb.push(' Start        ');\n  } else if (this.eventType == goog.debug.Trace_.EventType.STOP) {\n    sb.push(' Done ');\n    goog.asserts.assertNumber(\n        this.startTime, 'startTime missing - startTracer not called?');\n    goog.asserts.assertNumber(\n        this.stopTime, 'stopTime missing - stopTracer not called?');\n    var delta = this.stopTime - this.startTime;\n    sb.push(goog.debug.Trace_.longToPaddedString_(delta), ' ms ');\n  } else {\n    sb.push(' Comment      ');\n  }\n\n  sb.push(indent, this);\n  if (this.totalVarAlloc > 0) {\n    sb.push('[VarAlloc ', this.totalVarAlloc, '] ');\n  }\n  return sb.join('');\n};\n\n\n/**\n * @return {string} A string describing the tracer event.\n * @override\n */\ngoog.debug.Trace_.Event_.prototype.toString = function() {\n  'use strict';\n  if (this.type == null) {\n    return goog.asserts.assert(this.comment);\n  } else {\n    return '[' + this.type + '] ' + this.comment;\n  }\n};\n\n\n/**\n * A class to specify the types of the callback functions used by\n * `addTraceCallbacks`.\n * @record\n */\ngoog.debug.Trace_.TracerCallbacks = function() {\n  'use strict';\n  /**\n   * A callback function to be called at `startTrace` with two parameters:\n   * a number as the started trace id and a string as the comment on the trace.\n   * @type {function(number, string)|undefined}\n   */\n  this.start;\n  /**\n   * A callback function to be called when a trace should be stopped either at\n   * `startTrace` or `clearOutstandingEvents_` with two parameters:\n   * a number as the id of the trace being stopped and an object containing\n   * extra information about stopping the trace (e.g. if it is cancelled).\n   * @type {function(number, !goog.debug.StopTraceDetail)|undefined}\n   */\n  this.stop;\n  /**\n   * A callback function to be called at `addComment` with two parameters:\n   * a string as the comment on the trace and an optional time stamp number (in\n   * milliseconds since epoch) when the comment should be added as a trace.\n   * @type {function(string, number=)|undefined}\n   */\n  this.comment;\n};\n\n\n/** @private @const {!goog.debug.StopTraceDetail} */\ngoog.debug.Trace_.TRACE_CANCELLED_ = {\n  wasCancelled: true\n};\n\n\n/** @private @const {!goog.debug.StopTraceDetail} */\ngoog.debug.Trace_.NORMAL_STOP_ = {};\n\n\n/**\n * A function that combines two function with the same parameters in a sequence.\n * @param {!Function|undefined} fn1 The first function to be combined.\n * @param {!Function|undefined} fn2 The second function to be combined.\n * @return {!Function|undefined} A function that calls the inputs in sequence.\n * @private\n */\ngoog.debug.Trace_.TracerCallbacks.sequence_ = function(fn1, fn2) {\n  'use strict';\n  return !fn1 ? fn2 :\n      !fn2    ? fn1 :\n                function() {\n               'use strict';\n               fn1.apply(undefined, arguments);\n               fn2.apply(undefined, arguments);\n             };\n};\n\n\n/**\n * Removes all registered callback functions. Mainly used for testing.\n */\ngoog.debug.Trace_.prototype.removeAllListeners = function() {\n  'use strict';\n  this.traceCallbacks_ = {};\n};\n\n\n/**\n * Adds up to three callback functions which are called on `startTracer`,\n * `stopTracer`, `clearOutstandingEvents_` and `addComment` in\n * order to bridge from the Closure tracer singleton object to any tracer class.\n * @param {!goog.debug.Trace_.TracerCallbacks} callbacks An object literal\n *   containing the callback functions.\n */\ngoog.debug.Trace_.prototype.addTraceCallbacks = function(callbacks) {\n  'use strict';\n  this.traceCallbacks_.start = goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.start, callbacks.start);\n  this.traceCallbacks_.stop = goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.stop, callbacks.stop);\n  this.traceCallbacks_.comment = goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.comment, callbacks.comment);\n};\n\n\n/**\n * Add the ability to explicitly set the start time. This is useful for example\n * for measuring initial load time where you can set a variable as soon as the\n * main page of the app is loaded and then later call this function when the\n * Tracer code has been loaded.\n * @param {number} startTime The start time to set.\n */\ngoog.debug.Trace_.prototype.setStartTime = function(startTime) {\n  'use strict';\n  this.startTime_ = startTime;\n};\n\n\n/**\n * Initializes and resets the current trace\n * @param {number} defaultThreshold The default threshold below which the\n * tracer output will be suppressed. Can be overridden on a per-Tracer basis.\n */\ngoog.debug.Trace_.prototype.initCurrentTrace = function(defaultThreshold) {\n  'use strict';\n  this.reset(defaultThreshold);\n};\n\n\n/**\n * Clears the current trace\n */\ngoog.debug.Trace_.prototype.clearCurrentTrace = function() {\n  'use strict';\n  this.reset(0);\n};\n\n\n/**\n * Clears the open traces and calls stop callback for them.\n * @private\n */\ngoog.debug.Trace_.prototype.clearOutstandingEvents_ = function() {\n  'use strict';\n  if (this.traceCallbacks_.stop) {\n    goog.iter.forEach(this.outstandingEvents_, function(startEvent) {\n      'use strict';\n      this.traceCallbacks_.stop(\n          startEvent.id, goog.debug.Trace_.TRACE_CANCELLED_);\n    }, this);\n  }\n  this.outstandingEvents_.clear();\n};\n\n\n/**\n * Resets the trace.\n * @param {number} defaultThreshold The default threshold below which the\n * tracer output will be suppressed. Can be overridden on a per-Tracer basis.\n */\ngoog.debug.Trace_.prototype.reset = function(defaultThreshold) {\n  'use strict';\n  this.defaultThreshold_ = defaultThreshold;\n\n  this.clearOutstandingEvents_();\n  this.releaseEvents_();\n  this.startTime_ = goog.debug.Trace_.now();\n  this.tracerOverheadStart_ = 0;\n  this.tracerOverheadEnd_ = 0;\n  this.tracerOverheadComment_ = 0;\n  this.tracerCount_ = 0;\n  this.commentCount_ = 0;\n\n  var keys = this.stats_.getKeys();\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var stat = this.stats_.get(key);\n    stat.count = 0;\n    stat.time = 0;\n    stat.varAlloc = 0;\n    this.statPool_.releaseObject(/** @type {Object} */ (stat));\n  }\n  this.stats_.clear();\n};\n\n\n/**\n * @private\n */\ngoog.debug.Trace_.prototype.releaseEvents_ = function() {\n  'use strict';\n  for (var i = 0; i < this.events_.length; i++) {\n    var event = this.events_[i];\n    if (event.id) {  // Only start events have id.\n      // Only release the start event and its id if it is already stopped - this\n      // is to avoid having multiple traces with the same id.\n      if (!this.outstandingEvents_.containsKey(event.id)) {\n        this.idPool_.releaseObject(event.id);\n        this.eventPool_.releaseObject(event);\n      }\n    } else {  // Release stop and comment events.\n      this.eventPool_.releaseObject(event);\n    }\n  }\n  this.events_.length = 0;\n};\n\n\n/**\n * Starts a tracer\n * @param {string} comment A comment used to identify the tracer. Does not\n *     need to be unique.\n * @param {string=} opt_type Type used to identify the tracer. If a Trace is\n *     given a type (the first argument to the constructor) and multiple Traces\n *     are done on that type then a \"TOTAL line will be produced showing the\n *     total number of traces and the sum of the time\n *     (\"TOTAL Database 2 (37 ms)\" in our example). These traces should be\n *     mutually exclusive or else the sum won't make sense (the time will\n *     be double counted if the second starts before the first ends).\n * @return {number} The identifier for the tracer that should be passed to the\n *     the stopTracer method.\n */\ngoog.debug.Trace_.prototype.startTracer = function(comment, opt_type) {\n  'use strict';\n  var tracerStartTime = goog.debug.Trace_.now();\n  var varAlloc = this.getTotalVarAlloc();\n  var outstandingEventCount = this.outstandingEvents_.getCount();\n  if (this.events_.length + outstandingEventCount > this.MAX_TRACE_SIZE) {\n    // This is less likely and probably indicates that a lot of traces\n    // aren't being closed. We want to avoid unnecessarily clearing\n    // this though in case the events do eventually finish.\n    if (outstandingEventCount > this.MAX_TRACE_SIZE / 2) {\n      goog.log.warning(\n          this.logger_, 'Giant thread trace. Clearing outstanding events.');\n      this.clearOutstandingEvents_();\n    }\n    // This is the more likely case. This usually means that we\n    // either forgot to clear the trace or else we are performing a\n    // very large number of events\n    if (this.events_.length > this.MAX_TRACE_SIZE / 2) {\n      goog.log.warning(\n          this.logger_, 'Giant thread trace. Clearing to avoid memory leak.');\n      this.releaseEvents_();\n    }\n  }\n\n  goog.debug.Logger.logToProfilers('Start : ' + comment);\n\n  /** @const */\n  var event =\n      /** @type {!goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n  event.stopTime = undefined;\n  event.totalVarAlloc = varAlloc;\n  event.eventType = goog.debug.Trace_.EventType.START;\n  event.id = this.idPool_.getObject();\n  event.comment = comment;\n  event.type = opt_type;\n  this.events_.push(event);\n  this.outstandingEvents_.set(String(event.id), event);\n  this.tracerCount_++;\n  var now = goog.debug.Trace_.now();\n  event.startTime = event.eventTime = now;\n  this.tracerOverheadStart_ += now - tracerStartTime;\n  if (this.traceCallbacks_.start) {\n    this.traceCallbacks_.start(event.id, event.toString());\n  }\n  return event.id;\n};\n\n\n/**\n * Stops a tracer\n * @param {number|undefined|null} id The id of the tracer that is ending.\n * @param {number=} opt_silenceThreshold Threshold below which the tracer is\n *    silenced.\n * @return {?number} The elapsed time for the tracer or null if the tracer\n *    identitifer was not recognized.\n */\ngoog.debug.Trace_.prototype.stopTracer = function(id, opt_silenceThreshold) {\n  'use strict';\n  // this used to call goog.isDef(opt_silenceThreshold) but that causes an\n  // object allocation in IE for some reason (doh!). The following code doesn't\n  // cause an allocation\n  var now = goog.debug.Trace_.now();\n  var silenceThreshold;\n  if (opt_silenceThreshold === 0) {\n    silenceThreshold = 0;\n  } else if (opt_silenceThreshold) {\n    silenceThreshold = opt_silenceThreshold;\n  } else {\n    silenceThreshold = this.defaultThreshold_;\n  }\n\n  var startEvent = this.outstandingEvents_.get(String(id));\n  if (startEvent == null) {\n    return null;\n  }\n  goog.asserts.assertNumber(id);\n  if (this.traceCallbacks_.stop) {\n    this.traceCallbacks_.stop(Number(id), goog.debug.Trace_.NORMAL_STOP_);\n  }\n\n  this.outstandingEvents_.remove(String(id));\n\n  var stopEvent;\n  var elapsed = now - startEvent.startTime;\n  if (elapsed < silenceThreshold) {\n    var count = this.events_.length;\n    for (var i = count - 1; i >= 0; i--) {\n      var nextEvent = this.events_[i];\n      if (nextEvent == startEvent) {\n        this.events_.splice(i, 1);\n        this.idPool_.releaseObject(startEvent.id);\n        this.eventPool_.releaseObject(/** @type {Object} */ (startEvent));\n        break;\n      }\n    }\n  } else {\n    stopEvent =\n        /** @type {goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n    stopEvent.id = undefined;\n    stopEvent.eventType = goog.debug.Trace_.EventType.STOP;\n    stopEvent.startTime = startEvent.startTime;\n    stopEvent.comment = startEvent.comment;\n    stopEvent.type = startEvent.type;\n    stopEvent.stopTime = stopEvent.eventTime = now;\n\n    this.events_.push(stopEvent);\n  }\n\n  var type = startEvent.type;\n  var stat = null;\n  if (type) {\n    stat = this.getStat_(type);\n    stat.count++;\n    stat.time += elapsed;\n  }\n  if (stopEvent) {\n    goog.debug.Logger.logToProfilers('Stop : ' + stopEvent.comment);\n\n    stopEvent.totalVarAlloc = this.getTotalVarAlloc();\n\n    if (stat) {\n      stat.varAlloc += (stopEvent.totalVarAlloc - startEvent.totalVarAlloc);\n    }\n  }\n  var tracerFinishTime = goog.debug.Trace_.now();\n  this.tracerOverheadEnd_ += tracerFinishTime - now;\n  return elapsed;\n};\n\n\n/**\n * Sets the ActiveX object that can be used to get GC tracing in IE6.\n * @param {Object} gcTracer GCTracer ActiveX object.\n */\ngoog.debug.Trace_.prototype.setGcTracer = function(gcTracer) {\n  'use strict';\n  this.gcTracer_ = gcTracer;\n};\n\n\n/**\n * Returns the total number of allocations since the GC stats were reset. Only\n * works in IE.\n * @return {number} The number of allocaitons or -1 if not supported.\n */\ngoog.debug.Trace_.prototype.getTotalVarAlloc = function() {\n  'use strict';\n  var gcTracer = this.gcTracer_;\n  // isTracing is defined on the ActiveX object.\n  if (gcTracer && gcTracer['isTracing']()) {\n    return gcTracer['totalVarAlloc'];\n  }\n  return -1;\n};\n\n\n/**\n * Adds a comment to the trace. Makes it possible to see when a specific event\n * happened in relation to the traces.\n * @param {string} comment A comment that is inserted into the trace.\n * @param {?string=} opt_type Type used to identify the tracer. If a comment is\n *     given a type and multiple comments are done on that type then a \"TOTAL\n *     line will be produced showing the total number of comments of that type.\n * @param {?number=} opt_timeStamp The timestamp to insert the comment. If not\n *    specified, the current time wil be used.\n */\ngoog.debug.Trace_.prototype.addComment = function(\n    comment, opt_type, opt_timeStamp) {\n  'use strict';\n  var now = goog.debug.Trace_.now();\n  var timeStamp = opt_timeStamp ? opt_timeStamp : now;\n\n  var eventComment =\n      /** @type {goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n  eventComment.startTime = undefined;\n  eventComment.stopTime = undefined;\n  eventComment.id = undefined;\n  eventComment.eventType = goog.debug.Trace_.EventType.COMMENT;\n  eventComment.eventTime = timeStamp;\n  eventComment.type = opt_type;\n  eventComment.comment = comment;\n  eventComment.totalVarAlloc = this.getTotalVarAlloc();\n  this.commentCount_++;\n\n  if (opt_timeStamp) {\n    if (this.traceCallbacks_.comment) {\n      this.traceCallbacks_.comment(eventComment.toString(), opt_timeStamp);\n    }\n    var numEvents = this.events_.length;\n    for (var i = 0; i < numEvents; i++) {\n      var event = this.events_[i];\n      var eventTime = event.eventTime;\n\n      goog.asserts.assertNumber(\n          eventTime, 'eventTime undefined - call startTracer?');\n      if (eventTime > timeStamp) {\n        goog.array.insertAt(this.events_, eventComment, i);\n        break;\n      }\n    }\n    if (i == numEvents) {\n      this.events_.push(eventComment);\n    }\n  } else {  // No time_stamp\n    if (this.traceCallbacks_.comment) {\n      this.traceCallbacks_.comment(eventComment.toString());\n    }\n    this.events_.push(eventComment);\n  }\n\n  var type = eventComment.type;\n  if (type) {\n    var stat = this.getStat_(type);\n    stat.count++;\n  }\n\n  this.tracerOverheadComment_ += goog.debug.Trace_.now() - now;\n};\n\n\n/**\n * Gets a stat object for a particular type. The stat object is created if it\n * hasn't yet been.\n * @param {string} type The type of stat.\n * @return {goog.debug.Trace_.Stat_} The stat object.\n * @private\n */\ngoog.debug.Trace_.prototype.getStat_ = function(type) {\n  'use strict';\n  var stat = this.stats_.get(type);\n  if (!stat) {\n    stat = /** @type {goog.debug.Trace_.Event_} */ (this.statPool_.getObject());\n    stat.type = type;\n    this.stats_.set(type, stat);\n  }\n  return /** @type {goog.debug.Trace_.Stat_} */ (stat);\n};\n\n\n/**\n * Returns a formatted string for the current trace\n * @return {string} A formatted string that shows the timings of the current\n *     trace.\n */\ngoog.debug.Trace_.prototype.getFormattedTrace = function() {\n  'use strict';\n  return this.toString();\n};\n\n\n/**\n * Returns a formatted string that describes the thread trace.\n * @return {string} A formatted string.\n * @override\n */\ngoog.debug.Trace_.prototype.toString = function() {\n  'use strict';\n  var sb = [];\n  var etime = -1;\n  var indent = [];\n  for (var i = 0; i < this.events_.length; i++) {\n    var e = this.events_[i];\n    if (e.eventType == goog.debug.Trace_.EventType.STOP) {\n      indent.pop();\n    }\n    sb.push(' ', e.toTraceString(this.startTime_, etime, indent.join('')));\n    etime = /** @type {number} */ (e.eventTime);\n    sb.push('\\n');\n    if (e.eventType == goog.debug.Trace_.EventType.START) {\n      indent.push('|  ');\n    }\n  }\n\n  if (this.outstandingEvents_.getCount() != 0) {\n    var now = goog.debug.Trace_.now();\n\n    sb.push(' Unstopped timers:\\n');\n    goog.iter.forEach(this.outstandingEvents_, function(startEvent) {\n      'use strict';\n      sb.push(\n          '  ', startEvent, ' (', now - startEvent.startTime,\n          ' ms, started at ',\n          goog.debug.Trace_.formatTime_(startEvent.startTime), ')\\n');\n    });\n  }\n\n  var statKeys = this.stats_.getKeys();\n  for (var i = 0; i < statKeys.length; i++) {\n    var stat = this.stats_.get(statKeys[i]);\n    if (stat.count > 1) {\n      sb.push(' TOTAL ', stat, '\\n');\n    }\n  }\n\n  sb.push(\n      'Total tracers created ', this.tracerCount_, '\\n',\n      'Total comments created ', this.commentCount_, '\\n', 'Overhead start: ',\n      this.tracerOverheadStart_, ' ms\\n', 'Overhead end: ',\n      this.tracerOverheadEnd_, ' ms\\n', 'Overhead comment: ',\n      this.tracerOverheadComment_, ' ms\\n');\n\n  return sb.join('');\n};\n\n\n/**\n * Converts 'v' to a string and pads it with up to 3 spaces for\n * improved alignment. TODO there must be a better way\n * @param {number} v A number.\n * @return {string} A padded string.\n * @private\n */\ngoog.debug.Trace_.longToPaddedString_ = function(v) {\n  'use strict';\n  v = Math.round(v);\n  // todo (pupius) - there should be a generic string in goog.string for this\n  var space = '';\n  if (v < 1000) space = ' ';\n  if (v < 100) space = '  ';\n  if (v < 10) space = '   ';\n  return space + v;\n};\n\n\n/**\n * Return the sec.ms part of time (if time = \"20:06:11.566\",  \"11.566\n * @param {number} time The time in MS.\n * @return {string} A formatted string as sec.ms'.\n * @private\n */\ngoog.debug.Trace_.formatTime_ = function(time) {\n  'use strict';\n  time = Math.round(time);\n  var sec = (time / 1000) % 60;\n  var ms = time % 1000;\n\n  // TODO their must be a nicer way to get zero padded integers\n  return String(100 + sec).substring(1, 3) + '.' +\n      String(1000 + ms).substring(1, 4);\n};\n\n\n/**\n * Returns the current time. Done through a wrapper function so it can be\n * overridden by application code. Gmail has an ActiveX extension that provides\n * higher precision timing info.\n * @return {number} The current time in milliseconds.\n */\ngoog.debug.Trace_.now = function() {\n  'use strict';\n  return goog.now();\n};\n\n\n/**\n * Singleton trace object\n * @type {goog.debug.Trace_}\n */\ngoog.debug.Trace = new goog.debug.Trace_();\n\n\n/**\n * The detail of calling the stop callback for a trace.\n * @record\n */\ngoog.debug.StopTraceDetail = function() {\n  'use strict';\n  /**\n   * The trace should be stopped since it has been cancelled. Note that this\n   * field is optional so, not-specifying it is like setting it to false.\n   * @type {boolean|undefined}\n   */\n  this.wasCancelled;\n};\n"],
"names":["goog","provide","require","debug","Trace_","goog.debug.Trace_","events_","outstandingEvents_","structs","Map","startTime_","tracerOverheadStart_","tracerOverheadEnd_","tracerOverheadComment_","stats_","tracerCount_","commentCount_","nextId_","eventPool_","SimplePool","createObject","this.eventPool_.createObject","Event_","statPool_","this.statPool_.createObject","Stat_","self","idPool_","setCreateObjectFn","defaultThreshold_","traceCallbacks_","prototype","logger_","log","getLogger","MAX_TRACE_SIZE","EventType","START","STOP","COMMENT","goog.debug.Trace_.Stat_","count","time","varAlloc","type","toString","goog.debug.Trace_.Stat_.prototype.toString","sb","push","Math","round","join","goog.debug.Trace_.Event_","eventType","id","comment","eventTime","startTime","stopTime","totalVarAlloc","toTraceString","goog.debug.Trace_.Event_.prototype.toTraceString","prevTime","indent","asserts","assertNumber","longToPaddedString_","formatTime_","delta","goog.debug.Trace_.Event_.prototype.toString","assert","TracerCallbacks","goog.debug.Trace_.TracerCallbacks","start","stop","TRACE_CANCELLED_","wasCancelled","NORMAL_STOP_","sequence_","goog.debug.Trace_.TracerCallbacks.sequence_","fn1","fn2","apply","undefined","arguments","removeAllListeners","goog.debug.Trace_.prototype.removeAllListeners","addTraceCallbacks","goog.debug.Trace_.prototype.addTraceCallbacks","callbacks","setStartTime","goog.debug.Trace_.prototype.setStartTime","initCurrentTrace","goog.debug.Trace_.prototype.initCurrentTrace","defaultThreshold","reset","clearCurrentTrace","goog.debug.Trace_.prototype.clearCurrentTrace","clearOutstandingEvents_","goog.debug.Trace_.prototype.clearOutstandingEvents_","iter","forEach","startEvent","clear","goog.debug.Trace_.prototype.reset","releaseEvents_","now","keys","getKeys","i","length","key","stat","get","releaseObject","goog.debug.Trace_.prototype.releaseEvents_","event","containsKey","startTracer","goog.debug.Trace_.prototype.startTracer","opt_type","tracerStartTime","getTotalVarAlloc","outstandingEventCount","getCount","warning","Logger","logToProfilers","getObject","set","String","stopTracer","goog.debug.Trace_.prototype.stopTracer","opt_silenceThreshold","silenceThreshold","Number","remove","stopEvent","elapsed","nextEvent","splice","getStat_","tracerFinishTime","setGcTracer","goog.debug.Trace_.prototype.setGcTracer","gcTracer","gcTracer_","goog.debug.Trace_.prototype.getTotalVarAlloc","addComment","goog.debug.Trace_.prototype.addComment","opt_timeStamp","timeStamp","eventComment","numEvents","array","insertAt","goog.debug.Trace_.prototype.getStat_","getFormattedTrace","goog.debug.Trace_.prototype.getFormattedTrace","goog.debug.Trace_.prototype.toString","etime","e","pop","statKeys","goog.debug.Trace_.longToPaddedString_","v","space","goog.debug.Trace_.formatTime_","sec","ms","substring","goog.debug.Trace_.now","Trace","StopTraceDetail","goog.debug.StopTraceDetail"]
}
