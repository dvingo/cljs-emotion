{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$sml.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiFnHD,MAAOC,CAAAA,OAAP,CAxEAC,QAAY,CAACC,IAAD,CAAO,CACjB,MAAO,CACLC,KAAM,mBADD,CAELC,QAAS,CAAE,IAAF,CAFJ,CAGLC,SAAU,CACRC,SAAU,cADF,CAERC,QAEE,gPAJM,CAQRC,SAEE,sFAVM;AAWRC,QACE,6CAZM,CAHL,CAiBLC,QAAS,SAjBJ,CAkBLC,SAAU,CACR,CACEC,UAAW,SADb,CAEEC,MAAO,kBAFT,CAGEC,UAAW,CAHb,CADQ,CAMRZ,IAAKa,CAAAA,OAAL,CACE,QADF,CAEE,QAFF,CAGE,CACEJ,SAAU,CAAE,MAAF,CADZ,CAHF,CANQ,CAaR,CACEC,UAAW,QADb,CAEEC,MAAO,wBAFT,CAbQ,CAkBR,CACED,UAAW,MADb,CAEEC,MAAO,eAFT,CAlBQ,CAsBR,CACED,UAAW,MADb,CAEEC,MAAO,iBAFT,CAGEC,UAAW,CAHb,CAtBQ,CA2BR,CACED,MAAO,oBADT,CA3BQ,CA8BRX,IAAKc,CAAAA,OAAL,CAAad,IAAKe,CAAAA,gBAAlB,CAAoC,CAClCL,UAAW,QADuB,CAElCE,UAAW,CAFuB,CAApC,CA9BQ,CAkCRZ,IAAKc,CAAAA,OAAL,CAAad,IAAKgB,CAAAA,iBAAlB,CAAqC,CACnCR,QAAS,IAD0B,CAArC,CAlCQ,CAqCR,CACEE,UAAW,QADb;AAEEC,MACE,0HAHJ,CAOEC,UAAW,CAPb,CArCQ,CA8CR,CACED,MAAO,OADT,CA9CQ,CAlBL,CADU,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/sml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$sml\"] = function(global,require,module,exports) {\n/*\nLanguage: SML (Standard ML)\nAuthor: Edwin Dalorzo <edwin@dalorzo.org>\nDescription: SML language definition.\nWebsite: https://www.smlnj.org\nOrigin: ocaml.js\nCategory: functional\n*/\nfunction sml(hljs) {\n  return {\n    name: 'SML (Standard ML)',\n    aliases: [ 'ml' ],\n    keywords: {\n      $pattern: '[a-z_]\\\\w*!?',\n      keyword:\n        /* according to Definition of Standard ML 97  */\n        'abstype and andalso as case datatype do else end eqtype ' +\n        'exception fn fun functor handle if in include infix infixr ' +\n        'let local nonfix of op open orelse raise rec sharing sig ' +\n        'signature struct structure then type val with withtype where while',\n      built_in:\n        /* built-in types according to basis library */\n        'array bool char exn int list option order real ref string substring vector unit word',\n      literal:\n        'true false NONE SOME LESS EQUAL GREATER nil'\n    },\n    illegal: /\\/\\/|>>/,\n    contains: [\n      {\n        className: 'literal',\n        begin: /\\[(\\|\\|)?\\]|\\(\\)/,\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: [ 'self' ]\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with ' */\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*'\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null\n      }),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  };\n}\n\nmodule.exports = sml;\n\n};"],
"names":["shadow$provide","global","require","module","exports","sml","hljs","name","aliases","keywords","$pattern","keyword","built_in","literal","illegal","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE"]
}
