{"version":3,"sources":["com/wsscode/fuzzy.cljs"],"mappings":";AAIA,AAAAA,yBAAA,AAAA,wFAAA,AAAA,kFAAeC;AACf,AAAAD,yBAAA,AAAA,yFAAA,AAAA,iFAAgBE;AAChB,AAAAF,yBAAA,AAAA,qGAAA,AAAA,iFAAsBE;AACtB,AAAAF,yBAAA,AAAA,2FAAA,AAAA,ybAAiB,AAAAG,yDAAA,AAAA,kTAAW,AAAAG,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,KAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,AAAAE,0BAAAF,SAAA;4gDAAX,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAH,rvDAAW,AAAA,iCAAA,AAAA,oLAAA,AAAA,oLAAA,AAAA,oLAAA,AAAA,iCAAA,AAAA,m6BAAA,AAAA;AAAX,AAAA,OAAAC,sBAAAD;GAAA,8FAAA,KAAA,0FAAA,AAAA,icAAA;AAEjB;;;;;;;;;;;;8BAAA,sCAAAM,SAAAC,7EAAMK;AAAN,AAAA,IAAAJ,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAWYK;IAXZF,aAAAJ;IAAAI,iBAAA,AAAAF,4BAAAE;UAAAA,NAWgDI;aAXhD,AAAAL,4CAAAC,eAAA,pEAWoCG;AAXpC,AAYE,IAAAE,aAAwB,AAACK,gCAAkBR,aAAaC;mBAAxD,AAAAG,4CAAAD,WAAA,IAAA,1EAAOE;YAAP,AAAAD,4CAAAD,WAAA,IAAA,nEAAcG;SAAd,AAAAF,4CAAAD,WAAA,IAAA,hEAAoBI;AAApB,AACE,oBAAIF;AACF,gEAAA,yJAAA,2GAAA,7TAACI,qDAAMP,8FAAaG,oKAAqBC,oGAAiBC;;AAD5D;;;AAGJ;;;;;gCAAA,wCAAAG,xEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;YAAAA,RAMWI;cANX,AAAAlB,4CAAAc,eAAA,rEAIYE;mBAJZ,AAAAhB,4CAAAc,eAAA,1EAIoBX;kBAJpB,AAAAH,4CAAAc,eAAA,wFAAA,jKAIiCG;AAJjC,AAOE,GAAI,AAACE,cAAIhB;AACP,IAAMmB,QAAQ,AAACC,gDAAQrB,4BAAUgB;cAAjC,WAAAE,iBAAAC,tCACMG;AADN,AACe,yBAAAH,iBAAAD,nCAACK;;AADhB,AAEE,eAAMT,XAAQU;IAAAA,eACZ,AAACC,6CAAKL,MAAMI;AADd,AAEE,IAAAE,WAASF;AAAT,AAAA,oBACET;AACA,uDAAA,6GAAAW,7JAACC,qJAAsBL;;AAFzBI;;;AAGJZ","names":["cljs.spec.alpha/def-impl","cljs.core/boolean?","cljs.core/string?","cljs.spec.alpha.every_impl","G__56404","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__56405","cljs.core/map?","cljs.core/contains?","p__56439","p__56440","map__56443","cljs.core/--destructure-map","cljs.core.get","map__56445","com.wsscode.fuzzy/match-one","search-input","string","opt","vec__56451","cljs.core.nth","match?","score","hl","com.wsscode.fuzzyjs/fuzzy_match","cljs.core.assoc","p__56467","map__56469","com.wsscode.fuzzy/fuzzy-match","options","sort?","input","cljs.core/seq","p1__56462#","p2__56461#","fuzzy","cljs.core.partial","compare","cljs.core/compare","<>","cljs.core.keep","G__56485","cljs.core.sort_by"],"sourcesContent":["(ns com.wsscode.fuzzy\n  (:require [com.wsscode.fuzzyjs :as fuzzy]\n            [cljs.spec.alpha :as s]))\n\n(s/def ::sort? boolean?)\n(s/def ::string string?)\n(s/def ::search-input string?)\n(s/def ::options (s/coll-of (s/keys :req [::string])))\n\n(defn match-one\n  \"Matches ::search-input with ::string from map. When match is valid the map is\n  augmented with the keys ::match? ::match-score and ::match-hl.\n\n  ```clojure\n  (fuzzy/match-one {::fuzzy/search-input \\\"a\\\"} {::fuzzy/string \\\"abc\\\"})\n  ; => {::fuzzy/string      \\\"abc\\\"\n  ;     ::fuzzy/match?      true\n  ;     ::fuzzy/match-score 8\n  ;     ::fuzzy/match-hl    \\\"<b>a</b>bc\\\"}\n  ```\"\n  [{::keys [search-input]} {::keys [string] :as opt}]\n  (let [[match? score hl] (fuzzy/fuzzy_match search-input string)]\n    (if match?\n      (assoc opt ::match? match? ::match-score score ::match-hl hl))))\n\n(defn fuzzy-match\n  \"Search for all matches of ::search-input in ::options. Options must be a collection\n  of maps, the map key ::string will be used to make the lookup. By default the\n  results will be sorted by score, use ::sort? false to keep original order.\"\n  [{::keys [options search-input sort?]\n    :or    {sort? true}\n    :as    input}]\n  (if (seq search-input)\n    (let [fuzzy   (partial match-one input)\n          compare #(compare %2 %)]\n      (as-> options <>\n        (keep fuzzy <>)\n        (cond->> <>\n          sort?\n          (sort-by ::match-score compare))))\n    options))\n"]}