shadow$provide.module$node_modules$create_react_class$factory=function(global,require,module,exports){function _invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){if(void 0===format)condition=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;condition=Error(format.replace(/%s/g,function(){return args[argIndex++]}));condition.name="Invariant Violation"}condition.framesToPop=
1;throw condition;}}var _assign=require("module$node_modules$object_assign$index"),emptyObject={};Object.freeze(emptyObject);var validateFormat=function(format){};validateFormat=function(format){if(void 0===format)throw Error("invariant requires an error message argument");};var warning=function(){},printWarning=function(format){for(var _len=arguments.length,args=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];var argIndex=0;_len="Warning: "+format.replace(/%s/g,function(){return args[argIndex++]});
"undefined"!==typeof console&&console.error(_len);try{throw Error(_len);}catch(x){}};warning=function(condition,format){if(void 0===format)throw Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==format.indexOf("Failed Composite propType: ")&&!condition){for(var _len2=arguments.length,args=Array(2<_len2?_len2-2:0),_key2=2;_key2<_len2;_key2++)args[_key2-2]=arguments[_key2];printWarning.apply(void 0,[format].concat(args))}};var ReactPropTypeLocationNames={prop:"prop",
context:"context",childContext:"child context"};module.exports=function(ReactComponent,isValidElement,ReactNoopUpdateQueue){function validateTypeDef(Constructor,typeDef,location){for(var propName in typeDef)typeDef.hasOwnProperty(propName)&&warning("function"===typeof typeDef[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",Constructor.displayName||"ReactClass",ReactPropTypeLocationNames[location],propName)}function mixSpecIntoComponent(Constructor,spec){if(spec){_invariant("function"!==
typeof spec,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");_invariant(!isValidElement(spec),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var proto=Constructor.prototype,autoBindPairs=proto.__reactAutoBindPairs;spec.hasOwnProperty("mixins")&&RESERVED_SPEC_KEYS.mixins(Constructor,spec.mixins);for(var name in spec)if(spec.hasOwnProperty(name)&&"mixins"!==name){var property=spec[name],
isAlreadyDefined=proto.hasOwnProperty(name),isAlreadyDefined$jscomp$0=isAlreadyDefined,name$jscomp$0=name,specPolicy=ReactClassInterface.hasOwnProperty(name$jscomp$0)?ReactClassInterface[name$jscomp$0]:null;ReactClassMixin.hasOwnProperty(name$jscomp$0)&&_invariant("OVERRIDE_BASE"===specPolicy,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",name$jscomp$0);isAlreadyDefined$jscomp$0&&_invariant("DEFINE_MANY"===
specPolicy||"DEFINE_MANY_MERGED"===specPolicy,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name$jscomp$0);if(RESERVED_SPEC_KEYS.hasOwnProperty(name))RESERVED_SPEC_KEYS[name](Constructor,property);else isAlreadyDefined$jscomp$0=ReactClassInterface.hasOwnProperty(name),"function"!==typeof property||isAlreadyDefined$jscomp$0||isAlreadyDefined||!1===spec.autobind?isAlreadyDefined?(isAlreadyDefined=ReactClassInterface[name],
_invariant(isAlreadyDefined$jscomp$0&&("DEFINE_MANY_MERGED"===isAlreadyDefined||"DEFINE_MANY"===isAlreadyDefined),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",isAlreadyDefined,name),"DEFINE_MANY_MERGED"===isAlreadyDefined?proto[name]=createMergedResultFunction(proto[name],property):"DEFINE_MANY"===isAlreadyDefined&&(proto[name]=createChainedFunction(proto[name],property))):(proto[name]=property,"function"===typeof property&&spec.displayName&&(proto[name].displayName=
spec.displayName+"_"+name)):(autoBindPairs.push(name,property),proto[name]=property)}}else proto=typeof spec,warning("object"===proto&&null!==spec,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",Constructor.displayName||"ReactClass",null===spec?null:proto)}function mergeIntoWithNoDuplicateKeys(one,two){_invariant(one&&two&&"object"===typeof one&&"object"===
typeof two,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");for(var key in two)two.hasOwnProperty(key)&&(_invariant(void 0===one[key],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",key),one[key]=two[key]);return one}function createMergedResultFunction(one,two){return function(){var a=one.apply(this,
arguments),b=two.apply(this,arguments);if(null==a)return b;if(null==b)return a;var c={};mergeIntoWithNoDuplicateKeys(c,a);mergeIntoWithNoDuplicateKeys(c,b);return c}}function createChainedFunction(one,two){return function(){one.apply(this,arguments);two.apply(this,arguments)}}function bindAutoBindMethod(component,method){var boundMethod=method.bind(component);boundMethod.__reactBoundContext=component;boundMethod.__reactBoundMethod=method;boundMethod.__reactBoundArguments=null;var componentName=component.constructor.displayName,
_bind=boundMethod.bind;boundMethod.bind=function(newThis){for(var _len=arguments.length,args=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];if(newThis!==component&&null!==newThis)warning(!1,"bind(): React component methods may only be bound to the component instance. See %s",componentName);else if(!args.length)return warning(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",
componentName),boundMethod;_len=_bind.apply(boundMethod,arguments);_len.__reactBoundContext=component;_len.__reactBoundMethod=method;_len.__reactBoundArguments=args;return _len};return boundMethod}var injectedMixins=[],ReactClassInterface={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",
componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},ReactClassStaticInterface={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},RESERVED_SPEC_KEYS={displayName:function(Constructor,displayName){Constructor.displayName=
displayName},mixins:function(Constructor,mixins){if(mixins)for(var i=0;i<mixins.length;i++)mixSpecIntoComponent(Constructor,mixins[i])},childContextTypes:function(Constructor,childContextTypes){validateTypeDef(Constructor,childContextTypes,"childContext");Constructor.childContextTypes=_assign({},Constructor.childContextTypes,childContextTypes)},contextTypes:function(Constructor,contextTypes){validateTypeDef(Constructor,contextTypes,"context");Constructor.contextTypes=_assign({},Constructor.contextTypes,
contextTypes)},getDefaultProps:function(Constructor,getDefaultProps){Constructor.getDefaultProps=Constructor.getDefaultProps?createMergedResultFunction(Constructor.getDefaultProps,getDefaultProps):getDefaultProps},propTypes:function(Constructor,propTypes){validateTypeDef(Constructor,propTypes,"prop");Constructor.propTypes=_assign({},Constructor.propTypes,propTypes)},statics:function(Constructor,statics){a:if(statics)for(var name in statics){var property=statics[name];if(statics.hasOwnProperty(name)){_invariant(!(name in
RESERVED_SPEC_KEYS),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',name);if(name in Constructor){statics=ReactClassStaticInterface.hasOwnProperty(name)?ReactClassStaticInterface[name]:null;_invariant("DEFINE_MANY_MERGED"===statics,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",
name);Constructor[name]=createMergedResultFunction(Constructor[name],property);break a}Constructor[name]=property}}},autobind:function(){}},IsMountedPreMixin={componentDidMount:function(){this.__isMounted=!0}},IsMountedPostMixin={componentWillUnmount:function(){this.__isMounted=!1}},ReactClassMixin={replaceState:function(newState,callback){this.updater.enqueueReplaceState(this,newState,callback)},isMounted:function(){warning(this.__didWarnIsMounted,"%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
this.constructor&&this.constructor.displayName||this.name||"Component");this.__didWarnIsMounted=!0;return!!this.__isMounted}},ReactClassComponent=function(){};_assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin);return function(spec){var Constructor=function(props,context,updater){warning(this instanceof Constructor,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory");if(this.__reactAutoBindPairs.length)for(var pairs=
this.__reactAutoBindPairs,i=0;i<pairs.length;i+=2)this[pairs[i]]=bindAutoBindMethod(this,pairs[i+1]);this.props=props;this.context=context;this.refs=emptyObject;this.updater=updater||ReactNoopUpdateQueue;this.state=null;props=this.getInitialState?this.getInitialState():null;void 0===props&&this.getInitialState._isMockFunction&&(props=null);_invariant("object"===typeof props&&!Array.isArray(props),"%s.getInitialState(): must return an object or null",Constructor.displayName||"ReactCompositeComponent");
this.state=props};Constructor.prototype=new ReactClassComponent;Constructor.prototype.constructor=Constructor;Constructor.prototype.__reactAutoBindPairs=[];injectedMixins.forEach(mixSpecIntoComponent.bind(null,Constructor));mixSpecIntoComponent(Constructor,IsMountedPreMixin);mixSpecIntoComponent(Constructor,spec);mixSpecIntoComponent(Constructor,IsMountedPostMixin);Constructor.getDefaultProps&&(Constructor.defaultProps=Constructor.getDefaultProps());Constructor.getDefaultProps&&(Constructor.getDefaultProps.isReactClassApproved=
{});Constructor.prototype.getInitialState&&(Constructor.prototype.getInitialState.isReactClassApproved={});_invariant(Constructor.prototype.render,"createClass(...): Class specification must implement a `render` method.");warning(!Constructor.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",spec.displayName||"A component");warning(!Constructor.prototype.componentWillRecieveProps,
"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",spec.displayName||"A component");warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps,"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",spec.displayName||"A component");for(var methodName in ReactClassInterface)Constructor.prototype[methodName]||(Constructor.prototype[methodName]=null);return Constructor}}}
//# sourceMappingURL=module$node_modules$create_react_class$factory.js.map
