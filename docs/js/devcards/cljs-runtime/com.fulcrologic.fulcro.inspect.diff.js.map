{"version":3,"sources":["com/fulcrologic/fulcro/inspect/diff.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro.inspect.diff/updates","a","b","cljs.core.reduce","p__48914","vec__48915","cljs.core.nth","adds","k","v","va","cljs.core.get","cljs.core._EQ_","cljs.core/map?","cljs.core.assoc","com.fulcrologic.fulcro.inspect.diff/removals","p__48921","vec__48922","rems","temp__5751__auto__","vec__48926","_","vb","cljs.core/find","cljs.core.not_EQ_","childs","cljs.core/seq","cljs.core.conj","G__48931","com.fulcrologic.fulcro.inspect.diff/diff","com.fulcrologic.fulcro.inspect.diff/deep-merge","x","y","cljs.core.merge_with","p__48939","map__48943","cljs.core/--destructure-map","com.fulcrologic.fulcro.inspect.diff/patch-updates","updates","p__48946","map__48947","com.fulcrologic.fulcro.inspect.diff/patch-removals","removals","final","rem","cljs.core.dissoc","vec__48948","cljs.core/first","p1__48945#","cljs.core.update","G__48952","G__48953","com.fulcrologic.fulcro.inspect.diff/patch","diff"],"sourcesContent":["(ns ^:no-doc com.fulcrologic.fulcro.inspect.diff\n  \"Internal algorithms for sending db diffs to Inspect tool.\"\n  (:require [clojure.spec.alpha :as s]))\n\n(defn updates [a b]\n  (reduce\n    (fn [adds [k v]]\n      (let [va (get a k :fulcro.inspect.lib.diff/unset)]\n        (if (= v va)\n          adds\n          (if (and (map? v) (map? va))\n            (assoc adds k (updates va v))\n            (assoc adds k v)))))\n    {}\n    b))\n\n(defn removals [a b]\n  (reduce\n    (fn [rems [k v]]\n      (if-let [[_ vb] (find b k)]\n        (if (and (map? v) (map? vb) (not= v vb))\n          (let [childs (removals v vb)]\n            (if (seq childs)\n              (conj rems {k childs})\n              rems))\n          rems)\n        (conj rems (cond-> k (map? k) (assoc :fulcro.inspect.lib.diff/key? true)))))\n    []\n    a))\n\n(defn diff [a b]\n  {:fulcro.inspect.lib.diff/updates  (updates a b)\n   :fulcro.inspect.lib.diff/removals (removals a b)})\n\n(defn deep-merge [x y]\n  (if (and (map? x) (map? y))\n    (merge-with deep-merge x y)\n    y))\n\n(defn patch-updates [x {:fulcro.inspect.lib.diff/keys [updates]}]\n  (merge-with deep-merge x updates))\n\n(defn patch-removals [x {:fulcro.inspect.lib.diff/keys [removals]}]\n  (reduce\n    (fn [final rem]\n      (cond\n        (:fulcro.inspect.lib.diff/key? rem)\n        (dissoc final (dissoc rem :fulcro.inspect.lib.diff/key?))\n\n        (map? rem)\n        (let [[k v] (first rem)]\n          (update final k #(patch-removals % {:fulcro.inspect.lib.diff/removals v})))\n\n        :else\n        (dissoc final rem)))\n    x\n    removals))\n\n(defn patch [x diff]\n  (-> x\n      (patch-updates diff)\n      (patch-removals diff)))\n"]}