{"version":3,"sources":["com/fulcrologic/fulcro/inspect/inspect_client.cljc"],"mappings":"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","names":["js/goog.define","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.inspect","js/com.fulcrologic.fulcro.inspect.inspect-client","js/com.fulcrologic.fulcro.inspect.inspect-client.run-picker","com.fulcrologic.fulcro.inspect.inspect-client/run-picker","cljs.core.atom","js/com.fulcrologic.fulcro.inspect.inspect-client.started?*","com.fulcrologic.fulcro.inspect.inspect-client/started?*","js/com.fulcrologic.fulcro.inspect.inspect-client.tools-app*","com.fulcrologic.fulcro.inspect.inspect-client/tools-app*","js/com.fulcrologic.fulcro.inspect.inspect-client.apps*","com.fulcrologic.fulcro.inspect.inspect-client/apps*","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid-key","js/com.fulcrologic.fulcro.inspect.inspect-client.send-ch","com.fulcrologic.fulcro.inspect.inspect-client/send-ch","cljs.core.async.chan","cljs.core.async/dropping-buffer","com.fulcrologic.fulcro.inspect.inspect-client/post-message","type","data","e49124","cljs.core.async.put_BANG_","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.inspect.inspect-client/cljs?","env","cljs.core/boolean","var_args","G__49129","com.fulcrologic.fulcro.inspect.inspect-client/isoget","js/Error","obj","k","com.fulcrologic.fulcro.inspect.inspect_client.isoget","default","or__4253__auto__","com.fulcrologic.fulcro.inspect.inspect_client.goog$module$goog$object.get","G__49141","cljs.core/name","com.fulcrologic.fulcro.inspect.inspect-client/app-state","app","G__49143","cljs.core/deref","com.fulcrologic.fulcro.inspect.inspect-client/runtime-atom","G__49149","com.fulcrologic.fulcro.inspect.inspect-client/state-atom","G__49153","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","G__49155","cljs.core.get","com.fulcrologic.fulcro.inspect.inspect-client/remotes","G__49162","com.fulcrologic.fulcro.inspect.inspect-client/app-id","G__49165","com.fulcrologic.fulcro.inspect.inspect-client/fulcro-app-id","com.fulcrologic.fulcro.inspect.inspect-client/get-component-name","component","G__49174","com.fulcrologic.fulcro.inspect.inspect-client/comp-transact!","tx","options","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.inspect.inspect-client/MAX_HISTORY_SIZE","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","com.fulcrologic.fulcro.inspect.inspect-client/record-history-entry!","state","now","cljs.core.swap_BANG_","runtime","history","pruned-history","cljs.core/count","cljs.core.subvec","new-history","cljs.core.conj","cljs.core.assoc","com.fulcrologic.fulcro.inspect.inspect-client/get-history-entry","id","entry","cljs.core/first","cljs.core.filter","p__49195","map__49197","cljs.core/--destructure-map","entry-id","cljs.core._EQ_","cljs.core/seq","com.fulcrologic.fulcro.inspect.inspect-client/db-changed!","old-state","new-state","app-uuid","state-id","com.fulcrologic.fulcro.inspect.inspect-client/event-data","event","G__49202","com.fulcrologic.fulcro.inspect.inspect_client.goog$module$goog$object.getValueByKeys","com.fulcrologic.fulcro.inspect.transit/read","com.fulcrologic.fulcro.inspect.inspect-client/start-send-message-loop","c__39959__auto__","cljs.core.async.impl.dispatch/run","f__39960__auto__","switch__39823__auto__","state_49245","state_val_49246","statearr-49250","cljs.core.async.impl.ioc-helpers/take!","inst_49241","cljs.core.async.impl.ioc-helpers/return-chan","inst_49213","statearr-49254","statearr-49255","statearr-49256","inst_49220","cljs.core.nth","inst_49221","inst_49222","inst_49223","inst_49224","js/Date","inst_49225","inst_49226","cljs.core/PersistentHashMap","inst_49227","inst_49228","inst_49229","inst_49230","inst_49231","statearr-49257","statearr-49258","statearr-49259","inst_49239","statearr-49260","statearr-49261","state-machine__39824__auto__","ret-value__39825__auto__","result__39826__auto__","cljs.core/keyword-identical?","ex__39827__auto__","e49264","statearr-49266","statearr-49267","state__39961__auto__","statearr-49276","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","com.fulcrologic.fulcro.inspect.transit/write","com.fulcrologic.fulcro.inspect.inspect-client/listen-local-messages","and__4251__auto__","G__49277","com.fulcrologic.fulcro.inspect.inspect-client/handle-devtool-message","G__49279","com.fulcrologic.fulcro.inspect.inspect-client/transact-inspector!","ref","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","cljs.core/dissoc","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","remote","tx-id","txn","start","cljs.core.sequence","cljs.core.concat","cljs.core/List","com.fulcrologic.fulcro.inspect.inspect_client.transact_inspector_BANG_","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","response","finished","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","error","p__49295","map__49296","message","G__49297","cljs.core/Keyword","seq__49299","chunk__49300","count__49301","i__49302","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","cljs.core/vals","remote-names","cljs.core.sort_by","p1__49293#","cljs.core.juxt","cljs.core.not_EQ_","cljs.core/str","cljs.core/keys","map__49307","target-state","temp__5751__auto__","render!","map__49313","b2__42180__auto__","map__49316","value","cljs.core/reset!","G__49317","G__49318","map__49319","based-on","map__49320","prior-state","diff","com.fulcrologic.fulcro.inspect.diff/diff","G__49322","cljs.core/not","map__49324","tx-ref","fexpr__49329","e49330","js/alert","_e","map__49333","query","mutation","remote-name","msg-id","transmit!","ast","edn-query-language.core/query->ast","cljs.core/random-uuid","G__49339","G__49340","cljs.core/identity","p__49341","map__49342","body","result","error?","map__49343","log","log-js","warn","js/console.log","js/console.warn","js/console.error","com.fulcrologic.fulcro.inspect.inspect-client/install","_","js/document.documentElement.setAttribute","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","js/goog.DEBUG","networking","state*","cljs.core/assoc","p1__49347#","p1__49350#","p2__49351#","p3__49348#","p4__49349#","cljs.core/add-watch","p__49359","p__49360","map__49361","map__49362","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","state-id-before","db-before","db-after","component-name","current-id","G__49364"],"sourcesContent":["(ns ^:no-doc com.fulcrologic.fulcro.inspect.inspect-client\n  \"Functions used by Fulcro to talk to Fulcro Inspect.\"\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.inspect.inspect-client))\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    #?@(:cljs [[goog.object :as gobj]\n               [com.fulcrologic.fulcro.inspect.diff :as diff]\n               [com.fulcrologic.fulcro.inspect.transit :as encode]\n               [cljs.core.async :as async]])\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]\n    [taoensso.encore :as enc]))\n\n#?(:cljs (goog-define INSPECT false))\n\n;; This is here so that you can include the element picker without killing React Native\n(defonce run-picker (atom nil))\n\n(declare handle-devtool-message)\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defonce send-ch #?(:clj nil :cljs (async/chan (async/dropping-buffer 50000))))\n(defn post-message [type data]\n  #?(:cljs (try\n             (async/put! send-ch [type data])\n             (catch :default e\n               (log/error \"Cannot send to inspect. Channel closed. See https://book.fulcrologic.com/#err-inspect-ch-closed\")))))\n\n(defn cljs?\n  \"Returns true when env is a cljs macro &env\"\n  [env]\n  (boolean (:ns env)))\n\n(defn- isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers so we don't have to include other nses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn app-state [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref))\n(defn runtime-atom [app] (some-> app :com.fulcrologic.fulcro.application/runtime-atom))\n(defn state-atom [app] (some-> app :com.fulcrologic.fulcro.application/state-atom))\n(defn app-uuid [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref (get app-uuid-key)))\n(defn remotes [app] (some-> (runtime-atom app) deref :com.fulcrologic.fulcro.application/remotes))\n(defn app-id [app] (some-> (app-state app) :fulcro.inspect.core/app-id))\n(defn fulcro-app-id [app] (:com.fulcrologic.fulcro.application/id app))\n(defn get-component-name [component] (when component (some-> (isoget component :fulcro$options) :displayName)))\n(defn comp-transact! [app tx options]\n  (let [tx! (ah/app-algorithm app :tx!)]\n    (tx! app tx options)))\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn current-history-id\n  \"Current time in the recorded history of states\"\n  [app]\n  (or (-> app (runtime-atom) deref ::time) 1))\n\n(defn record-history-entry!\n  \"Record a state change in this history. Returns the ID of the newly recorded entry.\"\n  [app state]\n  (let [now (current-history-id app)]\n    (swap! (runtime-atom app)\n      (fn [runtime]\n        (let [history        (::history runtime)\n              pruned-history (cond\n                               (nil? history) []\n                               (> (count history) MAX_HISTORY_SIZE) (subvec history 1)\n                               :else history)\n              new-history    (conj pruned-history {:id    now\n                                                   :value state})]\n          (assoc runtime\n            ::time (inc now)\n            ::history new-history))))\n    now))\n\n(defn get-history-entry [app id]\n  (let [history (-> app runtime-atom deref ::history)\n        entry   (first (filter\n                         (fn [{entry-id :id}] (= id entry-id))\n                         (seq history)))]\n    entry))\n\n\n(defn db-changed!\n  \"Notify Inspect that the database changed\"\n  [app old-state new-state]\n  #?(:cljs\n     (let [app-uuid (app-uuid app)\n           state-id (record-history-entry! app new-state)]\n       (post-message :fulcro.inspect.client/db-changed! {app-uuid-key                    app-uuid\n                                                         :fulcro.inspect.client/state-id state-id}))))\n\n(defn event-data [event]\n  #?(:cljs (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read)))\n\n(defn start-send-message-loop []\n  #?(:cljs\n     (async/go-loop []\n       (when-let [[type data] (async/<! send-ch)]\n         (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n         (recur)))))\n\n(defn listen-local-messages []\n  #?(:cljs\n     (.addEventListener js/window \"message\"\n       (fn [^js event]\n         (cond\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n           (handle-devtool-message (event-data event))\n\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n           (start-send-message-loop)))\n       false)))\n\n(defn transact-inspector!\n  ([tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx tx}))\n  ([ref tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx-ref ref :fulcro.inspect.client/tx tx})))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message :fulcro.inspect.client/dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message :fulcro.inspect.client/set-active-app {app-uuid-key app-uuid}))\n\n#_(defn inspect-app [app]\n    #?(:cljs\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (random-uuid)]\n\n         (swap! apps* assoc app-uuid app)\n         #_(update-state-history app @state*)\n\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*\n                                                        :fulcro.inspect.client/state-hash    (hash @state*)})\n\n         (add-watch state* app-uuid #(db-update app app-uuid %3 %4))\n\n         (swap! state* assoc app-uuid-key app-uuid)\n\n         app)))\n\n(defn send-started! [app remote tx-id txn]\n  #?(:cljs\n     (let [start    (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                      :fulcro.inspect.ui.network/request-id         tx-id\n                                                      :fulcro.inspect.ui.network/request-started-at start\n                                                      :fulcro.inspect.ui.network/request-edn        txn})]))))\n\n(defn send-finished! [app remote tx-id response]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/response-edn        response})]))))\n\n(defn send-failed! [app tx-id error]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/error               error})]))))\n\n;; LANDMARK: Incoming message handler for Inspect\n(defn handle-devtool-message [{:keys [type data] :as message}]\n  (log/debug \"Devtools Message received\" message)\n  #?(:cljs\n     (case type\n       :fulcro.inspect.client/request-page-apps\n       (do\n         (doseq [app (vals @apps*)]\n           (let [state        (app-state app)\n                 state-id     (record-history-entry! app state)\n                 remote-names (remotes app)]\n             (post-message :fulcro.inspect.client/init-app\n               {app-uuid-key                                (app-uuid app)\n                :fulcro.inspect.core/app-id                 (app-id app)\n                :fulcro.inspect.client/remotes              (sort-by (juxt #(not= :remote %) str)\n                                                              (keys remote-names))\n                :fulcro.inspect.client/initial-history-step {:id    state-id\n                                                             :value state}}))))\n\n       :fulcro.inspect.client/reset-app-state\n       (let [{:keys                     [target-state]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (let [render! (ah/app-algorithm app :schedule-render!)]\n             (when (:id target-state)\n               (let [{:keys [id]} target-state]\n                 (enc/when-let [app (get @apps* app-uuid)\n                                {:keys [value]} (get-history-entry app id)]\n                   (reset! (state-atom app) value))))\n             (render! app {:force-root? true}))\n           (log/info \"Reset app on invalid uuid\" app-uuid)))\n\n       ;; Remote tool has asked for the history step at id, and can accept a diff from the given closest entry\n       :fulcro.inspect.client/fetch-history-step\n       (let [{:keys                     [id based-on]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (enc/when-let [app (get @apps* app-uuid)\n                        {:keys [value]} (get-history-entry app id)]\n           (let [prior-state (get-history-entry app based-on)\n                 diff        (when prior-state (diff/diff prior-state value))]\n             (post-message :fulcro.inspect.client/history-entry\n               (cond-> {app-uuid-key                  app-uuid\n                        :fulcro.inspect.core/state-id id}\n                 diff (assoc :fulcro.inspect.client/diff diff\n                             :based-on based-on)\n                 (not diff) (assoc :fulcro.inspect.client/state value))))))\n\n\n       :fulcro.inspect.client/transact\n       (let [{:keys                     [tx tx-ref]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (if tx-ref\n             (comp-transact! app tx {:ref tx-ref})\n             (comp-transact! app tx {}))\n           (log/error \"Transact on invalid uuid\" app-uuid \"See https://book.fulcrologic.com/#err-inspect-invalid-app-uuid\")))\n\n       :fulcro.inspect.client/pick-element\n       (if @run-picker\n         (@run-picker data)\n         (try\n           (js/alert \"Element picker not installed. Add it to your preload.\")\n           (catch :default _e\n             (log/error \"Element picker not installed in app. You must add it to you preloads. See https://book.fulcrologic.com/#err-inspect-elm-picker-missing\"))))\n\n       ;; These couple us to react, and side-effect are often tied to React lifecycle, so they are not worth the glamor\n       #_#_:fulcro.inspect.client/show-dom-preview\n           (encore/if-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                           app (some-> @apps* (get app-uuid))\n                           {:keys [value]} (get-history-entry app (:fulcro.inspect.client/state-id data))]\n             (if (map? value)\n               (binding [fdn/*denormalize-time* 900000000   ; force our props to seem like the most recent\n                         comp/*app*             app\n                         rc/*shared*            {}          ;; TODO: don't have historical shared props...\n                         comp/*depth*           0]\n                 (render-state! app value))\n           (log/error \"Unable to find app/state for preview. See https://book.fulcrologic.com/#err-inspect-cant-find-app\")))\n\n       #_#_:fulcro.inspect.client/hide-dom-preview\n           (encore/when-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                             app     (some-> @apps* (get app-uuid))\n                             render! (ah/app-algorithm app :render!)]\n             (render! app {:force-root? true}))\n\n       :fulcro.inspect.client/network-request\n       (let [{:keys                          [query mutation]\n              remote-name                    :fulcro.inspect.client/remote\n              :fulcro.inspect.ui-parser/keys [msg-id]\n              :fulcro.inspect.core/keys      [app-uuid]} data]\n         (encore/when-let [app       (get @apps* app-uuid)\n                           remote    (get (remotes app) remote-name)\n                           transmit! (-> remote :transmit!)\n                           ast       (eql/query->ast (or query mutation))\n                           tx-id     (random-uuid)]\n           (send-started! app remote-name tx-id (or query mutation))\n           (transmit! remote {:com.fulcrologic.fulcro.algorithms.tx-processing/id             tx-id\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/ast            ast\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/idx            0\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/options        {}\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler identity\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler (fn [{:keys [body] :as result}]\n                                                                                                (let [error? (ah/app-algorithm app :remote-error?)]\n                                                                                                  (if (error? result)\n                                                                                                    (send-failed! app tx-id result)\n                                                                                                    (send-finished! app remote-name tx-id body)))\n                                                                                                (post-message :fulcro.inspect.client/message-response\n                                                                                                  {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                                                   :fulcro.inspect.ui-parser/msg-response body}))})))\n\n       :fulcro.inspect.client/console-log\n       (let [{:keys [log log-js warn error]} data]\n         (cond\n           log\n           (js/console.log log)\n\n           log-js\n           (js/console.log (clj->js log-js))\n\n           warn\n           (js/console.warn warn)\n\n           error\n           (js/console.error error)))\n\n       :fulcro.inspect.client/check-client-version\n       (post-message :fulcro.inspect.client/client-version {:version \"3.0.0\"})\n\n       (log/debug \"Unknown message\" type))))\n\n\n(defn install [_]\n  #?(:cljs\n     (do\n       (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n       (when-not @started?*\n         (log/info \"Installing Fulcro 3.x Inspect\" {})\n\n         (reset! started?* true)\n\n         (listen-local-messages)))))\n\n(defn app-started!\n  \"Register the application with Inspect, if it is available.\"\n  [app]\n  #?(:cljs\n     (when (and (or goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (fulcro-app-id app)]\n         (swap! apps* assoc app-uuid app)\n         (record-history-entry! app @state*)\n         (swap! state* assoc app-uuid-key app-uuid)\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*})\n         (add-watch state* app-uuid #(db-changed! app %3 %4))))))\n\n(defn optimistic-action-finished!\n  \"Notify inspect that a transaction finished.\n\n   app - The app\n   env - The mutation env that completed.\"\n  [app\n   {:keys [component ref state com.fulcrologic.fulcro.algorithms.tx-processing/options]}\n   {:keys [tx-id tx state-id-before db-before db-after]}]\n  #?(:cljs\n     (let [component-name (get-component-name component)\n           current-id     (current-history-id app)\n           tx             (cond-> {:fulcro.inspect.ui.transactions/tx-id                    tx-id\n                                   :fulcro.history/client-time                              (js/Date.)\n                                   :fulcro.history/tx                                       tx\n                                   :fulcro.history/db-before-id                             state-id-before\n                                   :fulcro.history/db-after-id                              current-id\n                                   :fulcro.history/network-sends                            []\n                                   :com.fulcrologic.fulcro.algorithms.tx-processing/options options}\n                            component-name (assoc :component component-name)\n                            ref (assoc :ident-ref ref))\n           app-uuid       (app-uuid app)]\n       (post-message :fulcro.inspect.client/new-client-transaction {app-uuid-key              app-uuid\n                                                                    :fulcro.inspect.client/tx tx}))))\n\n(defmacro ido\n  \"Wrap a block of code that will only run if Inspect is enabled.  Code in these blocks will also be removed via\n  DCE in Closure.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [& body]\n  (when (cljs? &env)\n    `(when (and (or ~'goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (try\n         ~@body\n         (catch :default ~'e)))))\n\n(defmacro ilet\n  \"Like `clojure.core/let`, but elides the block if Inspect isn't enabled.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [bindings & body]\n  (when (cljs? &env)\n    `(ido\n       (let ~bindings\n         ~@body))))\n"]}