{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$llvm.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqBpHC,QAASA,OAAM,CAAC,GAAGC,IAAJ,CAAU,CAEvB,MADeA,KAAKC,CAAAA,GAAL,CAAUC,CAAD,EAAO,CAVH,CAAA,CAUUA,CAXtC,CACkB,QAAlB,GAAI,MAUkCA,EAVtC,CAUsCA,CAVtC,CAUsCA,CAR5BC,CAAAA,MAHV,CAAgB,IAWe,OAAA,EAAA,CAAhB,CAA2BC,CAAAA,IAA3BC,CAAgC,EAAhCA,CADQ,CAqIzBR,MAAOC,CAAAA,OAAP,CAtHAQ,QAAa,CAACC,IAAD,CAAO,CAClB,IAAMC,SAAW,wBA8BjB,OAAMC,SAAW,CACfC,UAAW,UADI,CAEfC,SAAU,CACR,CAAEC,MAAOb,MAAA,CAAO,GAAP,CAAYS,QAAZ,CAAT,CADQ,CAER,CAAEI,MAAO,MAAT,CAFQ,CAGR,CAAEA,MAAO,MAAT,CAHQ,CAFK,CAQXC,SAAAA,CAAW,CACfH,UAAW,OADI,CAEfC,SAAU,CACR,CAAEC,MAAOb,MAAA,CAAO,GAAP,CAAYS,QAAZ,CAAT,CADQ,CAER,CAAEI,MAAO,MAAT,CAFQ,CAGR,CAAEA,MAAOb,MAAA,CAAO,GAAP,CAAYS,QAAZ,CAAT,CAHQ;AAIR,CAAEI,MAAOb,MAAA,CAAO,MAAP,CAAeS,QAAf,CAAT,CAJQ,CAOR,CAAEI,MAAO,MAAT,CAPQ,CAFK,CAajB,OAAO,CACLE,KAAM,SADD,CAGLC,SACE,wsDAJG;AAyCLC,SAAU,CA3FCC,CACXP,UAAW,MADAO,CAEXL,MAAO,iBAFIK,CA2FD,CAKRV,IAAKW,CAAAA,OAAL,CAAa,OAAb,CAAsB,IAAtB,CAA4B,CAAEC,UAAW,CAAb,CAA5B,CALQ,CAMRZ,IAAKW,CAAAA,OAAL,CAAa,GAAb,CAAkB,GAAlB,CANQ,CAORX,IAAKa,CAAAA,iBAPG,CAQR,CACEV,UAAW,QADb,CAEEC,SAAU,CAER,CAAEC,MAAO,GAAT,CAAcS,IAAK,QAAnB,CAFQ,CAFZ,CARQ,CAeRR,QAfQ,CAlFQS,CAClBZ,UAAW,aADOY,CAElBH,UAAW,CAFOG,CAGlBV,MAAO,GAHWU,CAkFR,CAvFKC,CACfb,UAAW,UADIa,CAEfJ,UAAW,CAFII,CAGfX,MAAO,GAHQW,CAuFL,CAkBRd,QAlBQ,CArEEe,CACZd,UAAW,QADCc,CAEZb,SAAU,CACN,CAAEC,MAAO,aAAT,CADM,CAFEY,CAKZL,UAAW,CALCK,CAqEF,CA7EGC,CACbf,UAAW,QADEe,CAEbd,SAAU,CACN,CAAEC,MAAO,mBAAT,CADM,CAEN,CAAEA,MAAO,8CAAT,CAFM,CAFGa,CAMbN,UAAW,CANEM,CA6EH,CAzCL,CApDW,CApCgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/llvm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$llvm\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: LLVM IR\nAuthor: Michael Rodler <contact@f0rki.at>\nDescription: language used as intermediate representation in the LLVM compiler framework\nWebsite: https://llvm.org/docs/LangRef.html\nCategory: assembler\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction llvm(hljs) {\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\n  const TYPE = {\n    className: 'type',\n    begin: /\\bi\\d+(?=\\s|\\b)/\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    begin: /=/\n  };\n  const PUNCTUATION = {\n    className: 'punctuation',\n    relevance: 0,\n    begin: /,/\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [\n        { begin: /0[xX][a-fA-F0-9]+/ },\n        { begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/ }\n    ],\n    relevance: 0\n  };\n  const LABEL = {\n    className: 'symbol',\n    variants: [\n        { begin: /^\\s*[a-z]+:/ }, // labels\n    ],\n    relevance: 0\n  };\n  const VARIABLE = {\n    className: 'variable',\n    variants: [\n      { begin: concat(/%/, IDENT_RE) },\n      { begin: /%\\d+/ },\n      { begin: /#\\d+/ },\n    ]\n  };\n  const FUNCTION = {\n    className: 'title',\n    variants: [\n      { begin: concat(/@/, IDENT_RE) },\n      { begin: /@\\d+/ },\n      { begin: concat(/!/, IDENT_RE) },\n      { begin: concat(/!\\d+/, IDENT_RE) },\n      // https://llvm.org/docs/LangRef.html#namedmetadatastructure\n      // obviously a single digit can also be used in this fashion\n      { begin: /!\\d+/ }\n    ]\n  };\n\n  return {\n    name: 'LLVM IR',\n    // TODO: split into different categories of keywords\n    keywords:\n      'begin end true false declare define global ' +\n      'constant private linker_private internal ' +\n      'available_externally linkonce linkonce_odr weak ' +\n      'weak_odr appending dllimport dllexport common ' +\n      'default hidden protected extern_weak external ' +\n      'thread_local zeroinitializer undef null to tail ' +\n      'target triple datalayout volatile nuw nsw nnan ' +\n      'ninf nsz arcp fast exact inbounds align ' +\n      'addrspace section alias module asm sideeffect ' +\n      'gc dbg linker_private_weak attributes blockaddress ' +\n      'initialexec localdynamic localexec prefix unnamed_addr ' +\n      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +\n      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +\n      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +\n      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +\n      'cc c signext zeroext inreg sret nounwind ' +\n      'noreturn noalias nocapture byval nest readnone ' +\n      'readonly inlinehint noinline alwaysinline optsize ssp ' +\n      'sspreq noredzone noimplicitfloat naked builtin cold ' +\n      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +\n      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +\n      'uwtable returned type opaque eq ne slt sgt ' +\n      'sle sge ult ugt ule uge oeq one olt ogt ' +\n      'ole oge ord uno ueq une x acq_rel acquire ' +\n      'alignstack atomic catch cleanup filter inteldialect ' +\n      'max min monotonic nand personality release seq_cst ' +\n      'singlethread umax umin unordered xchg add fadd ' +\n      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +\n      'frem shl lshr ashr and or xor icmp fcmp ' +\n      'phi call trunc zext sext fptrunc fpext uitofp ' +\n      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +\n      'addrspacecast select va_arg ret br switch invoke ' +\n      'unwind unreachable indirectbr landingpad resume ' +\n      'malloc alloca free load store getelementptr ' +\n      'extractelement insertelement shufflevector getresult ' +\n      'extractvalue insertvalue atomicrmw cmpxchg fence ' +\n      'argmemonly double',\n    contains: [\n      TYPE,\n      // this matches \"empty comments\"...\n      // ...because it's far more likely this is a statement terminator in\n      // another language than an actual comment\n      hljs.COMMENT(/;\\s*$/, null, { relevance: 0 }),\n      hljs.COMMENT(/;/, /$/),\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          // Double-quoted string\n          { begin: /\"/, end: /[^\\\\]\"/ },\n        ]\n      },\n      FUNCTION,\n      PUNCTUATION,\n      OPERATOR,\n      VARIABLE,\n      LABEL,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = llvm;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","llvm","hljs","IDENT_RE","VARIABLE","className","variants","begin","FUNCTION","name","keywords","contains","TYPE","COMMENT","relevance","QUOTE_STRING_MODE","end","PUNCTUATION","OPERATOR","LABEL","NUMBER"]
}
