{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$scala.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4IrHD,MAAOC,CAAAA,OAAP,CAnIAC,QAAc,CAACC,IAAD,CAAO,CAOnB,MAAMC,MAAQ,CACZC,UAAW,OADC,CAEZC,SAAU,CACR,CACEC,MAAO,kBADT,CADQ,CAIR,CACEA,MAAO,MADT,CAEEC,IAAK,IAFP,CAJQ,CAFE,CAAd,CAmDMC,KAAO,CACXJ,UAAW,MADA,CAEXE,MAAO,uBAFI,CAGXG,UAAW,CAHA,CAnDb,CAyDMC,KAAO,CACXN,UAAW,OADA,CAEXE,MAAO,gFAFI,CAGXG,UAAW,CAHA,CA+Cb,OAAO,CACLE,KAAM,OADD,CAELC,SAAU,CACRC,QAAS,iBADD,CAERC,QAAS,uPAFD,CAFL;AAMLC,SAAU,CACRb,IAAKc,CAAAA,mBADG,CAERd,IAAKe,CAAAA,oBAFG,CAjGGC,CACbd,UAAW,QADEc,CAEbb,SAAU,CACR,CACEC,MAAO,KADT,CAEEC,IAAK,KAFP,CADQ,CAKR,CACED,MAAO,GADT,CAEEC,IAAK,GAFP,CAGEY,QAAS,KAHX,CAIEJ,SAAU,CAAEb,IAAKkB,CAAAA,gBAAP,CAJZ,CALQ,CAWR,CACEd,MAAO,SADT,CAEEC,IAAK,GAFP,CAGEY,QAAS,KAHX,CAIEJ,SAAU,CACRb,IAAKkB,CAAAA,gBADG,CAERjB,KAFQ,CAJZ,CAXQ,CAoBR,CACEC,UAAW,QADb,CAEEE,MAAO,WAFT,CAGEC,IAAK,KAHP,CAIEQ,SAAU,CAAEZ,KAAF,CAJZ,CAKEM,UAAW,EALb,CApBQ,CAFGS,CAiGH,CAhEGG,CACbjB,UAAW,QADEiB,CAEbf,MAAO,qBAFMe,CAgEH,CAKRb,IALQ,CAdGc,CACblB,UAAW,UADEkB,CAEbC,cAAe,KAFFD,CAGbf,IAAK,aAHQe,CAIbE,WAAY,CAAA,CAJCF,CAKbP,SAAU,CAAEL,IAAF,CALGY,CAcH,CA/CEG,CACZrB,UAAW,OADCqB;AAEZF,cAAe,yBAFHE,CAGZlB,IAAK,YAHOkB,CAIZD,WAAY,CAAA,CAJAC,CAKZV,SAAU,CACRb,IAAKc,CAAAA,mBADG,CAERd,IAAKe,CAAAA,oBAFG,CAGR,CACEM,cAAe,cADjB,CAEEd,UAAW,EAFb,CAHQ,CAOR,CACEH,MAAO,IADT,CAEEC,IAAK,IAFP,CAGEmB,aAAc,CAAA,CAHhB,CAIEF,WAAY,CAAA,CAJd,CAKEf,UAAW,CALb,CAMEM,SAAU,CAAEP,IAAF,CANZ,CAPQ,CAeR,CACEJ,UAAW,QADb,CAEEE,MAAO,IAFT,CAGEC,IAAK,IAHP,CAIEmB,aAAc,CAAA,CAJhB,CAKEF,WAAY,CAAA,CALd,CAMEf,UAAW,CANb,CAOEM,SAAU,CAAEP,IAAF,CAPZ,CAfQ,CAwBRE,IAxBQ,CALEe,CA+CF,CAQRvB,IAAKyB,CAAAA,aARG,CApHOC,CACjBxB,UAAW,MADMwB,CAEjBtB,MAAO,YAFUsB,CAoHP,CANL,CA/GY,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/scala.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$scala\"] = function(global,require,module,exports) {\n/*\nLanguage: Scala\nCategory: functional\nAuthor: Jan Berkel <jan.berkel@gmail.com>\nContributors: Erik Osheim <d_m@plastic-idolatry.com>\nWebsite: https://www.scala-lang.org\n*/\n\nfunction scala(hljs) {\n  const ANNOTATION = {\n    className: 'meta',\n    begin: '@[A-Za-z]+'\n  };\n\n  // used in strings for escaping/interpolation/substitution\n  const SUBST = {\n    className: 'subst',\n    variants: [\n      {\n        begin: '\\\\$[A-Za-z0-9_]+'\n      },\n      {\n        begin: /\\$\\{/,\n        end: /\\}/\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    variants: [\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"'\n      },\n      {\n        begin: '\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '[a-z]+\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          SUBST\n        ]\n      },\n      {\n        className: 'string',\n        begin: '[a-z]+\"\"\"',\n        end: '\"\"\"',\n        contains: [ SUBST ],\n        relevance: 10\n      }\n    ]\n\n  };\n\n  const SYMBOL = {\n    className: 'symbol',\n    begin: '\\'\\\\w[\\\\w\\\\d_]*(?!\\')'\n  };\n\n  const TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n    relevance: 0\n  };\n\n  const NAME = {\n    className: 'title',\n    begin: /[^0-9\\n\\t \"'(),.`{}\\[\\]:;][^\\n\\t \"'(),.`{}\\[\\]:;]+|[^0-9\\n\\t \"'(),.`{}\\[\\]:;=]/,\n    relevance: 0\n  };\n\n  const CLASS = {\n    className: 'class',\n    beginKeywords: 'class object trait type',\n    end: /[:={\\[\\n;]/,\n    excludeEnd: true,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        beginKeywords: 'extends with',\n        relevance: 10\n      },\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0,\n        contains: [ TYPE ]\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0,\n        contains: [ TYPE ]\n      },\n      NAME\n    ]\n  };\n\n  const METHOD = {\n    className: 'function',\n    beginKeywords: 'def',\n    end: /[:={\\[(\\n;]/,\n    excludeEnd: true,\n    contains: [ NAME ]\n  };\n\n  return {\n    name: 'Scala',\n    keywords: {\n      literal: 'true false null',\n      keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      STRING,\n      SYMBOL,\n      TYPE,\n      METHOD,\n      CLASS,\n      hljs.C_NUMBER_MODE,\n      ANNOTATION\n    ]\n  };\n}\n\nmodule.exports = scala;\n\n};"],
"names":["shadow$provide","global","require","module","exports","scala","hljs","SUBST","className","variants","begin","end","TYPE","relevance","NAME","name","keywords","literal","keyword","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","STRING","illegal","BACKSLASH_ESCAPE","SYMBOL","METHOD","beginKeywords","excludeEnd","CLASS","excludeBegin","C_NUMBER_MODE","ANNOTATION"]
}
