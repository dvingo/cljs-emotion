{"version":3,"sources":["devcards/system.cljs"],"mappings":"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","names":["devcards.system/l","x","js/console","devcards.system/devcards-app-element-id","devcards.system/devcards-rendered-card-class","devcards.system/prevent->","f","e","devcards.system/get-element-by-id","id","js/document","devcards.system/devcards-app-node","devcards.system/path->unique-card-id","path","clojure.string.join","cljs.core.map","cljs.core/name","cljs.core/cons","devcards.system/create-element*","tag","style-text","el","js/document.createElement","js/document.createTextNode","devcards.system/create-style-element","cljs.core.partial","devcards.system/create-script-element","devcards.system/prepend-child","node","node2","temp__5751__auto__","first-child","devcards.system/add-css-if-necessary!","heads","head","devcards.system/render-base-if-necessary!","js/devcards","js/devcards.system","js/devcards.system.history","devcards.system/history","devcards.util.utils/html-env?","h","js/goog.History","devcards.system/path->token","devcards.system/token->path","token","cljs.core/vec","cljs.core/keyword","clojure.string/replace-first","clojure.string.split","devcards.system/hash-navigate","devcards.system/hash-routing-init","state-atom","p1__51657#","goog.events/listen","goog.history.EventType/NAVIGATE","cljs.core.swap_BANG_","devcards.system/set-current-path","temp__5753__auto__","devcards.system.goog$module$goog$object.get","js/location","devcards.system/devcard?","d","and__4251__auto__","cljs.core/map?","devcards.system/path-collision","state","c","cljs.core.get","cljs.core.concat","cljs.core/butlast","cljs.core.keyword","cljs.core/last","devcards.system/register-collision","cljs.core.update_in","cljs.core/inc","js/devcards.system.dev-trans","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__51674","cljs.core/MultiFn","cljs.core.symbol","devcards.system/dev-trans","cljs.core/first","msg","p__51675","vec__51676","cljs.core.nth","map__51679","cljs.core/--destructure-map","_","options","func","position","new-path","dc","devcards.system/devcard-initial-data","js/devcards.system.app-state","devcards.system/app-state","devcards.system/valid-path?","or__4253__auto__","cljs.core._EQ_","cljs.core.get_in","devcards.system/enforce-valid-path","p__51695","map__51696","devcards.system/add-to-current-path","current-path","cljs.core.assoc","cljs.core.conj","p__51700","map__51704","cljs.core.not_EQ_","devcards.system/set-current-path!","devcards.system/current-page","data","devcards.system/display-single-card?","devcards.system/display-dir-paths","cur","cljs.core.filter","cljs.core/complement","cljs.core.comp","cljs.core/second","devcards.system/display-cards","p1__51729#","cljs.core/not","devcards.system/*devcard-data*","p__51731","map__51732","devcards.system/card-template","card","G__51733","G__51734","G__51735","sablono.interpreter/interpret","sablono.core/create-element","*devcard-data*-orig-val__51736","*devcard-data*-temp-val__51737","devcards.system/render-cards","cards","cljs.core.sort_by","devcards.system/main-cards-template","cljs.core/deref","p__51756","map__51757","devcards.system/breadcrumbs","cpath","crumbs","cljs.core.juxt","cljs.core/rest","cljs.core.map_indexed","i","v","cljs.core.subvec","cljs.core.take","cljs.core/count","cljs.core.repeat","devcards.system/breadcrumbs-templ","counter","sep-fn","G__51770","G__51771","G__51772","G__51775","G__51776","G__51777","G__51778","cljs.core.interleave","cljs.core/iterate","p__51780","vec__51781","n","G__51785","G__51786","G__51787","G__51788","G__51789","G__51791","devcards.system/cljs-logo","devcards.system/navigate-to-path","key","s","new-s","devcards.system/dir-links","dirs","cljs.core/empty?","attrs51800","cljs.core.apply","sablono.interpreter/attributes","sablono.normalize.merge_with_class","p__51802","vec__51803","child-tree","G__51808","G__51809","G__51810","G__51814","G__51815","G__51816","G__51811","G__51817","G__51818","G__51819","G__51820","p__51823","vec__51824","devcards.system/main-template","G__51841","G__51842","G__51843","attrs51836","attrs51839","attrs51840","clojure.string/replace","dir-paths","ctor__50818__auto__","props__50815__auto__","this__50816__auto__","devcards.util.utils/react-holder","js/goog.inherits","x51869","devcards.system/DevcardsRoot","this","cljs.core/add-watch","devcards.system/renderer","js/module$node_modules$react_dom$index.render","js/module$node_modules$react$index.createElement","devcards.system/merge-in-new-data","new-state","cljs.core.merge","devcards.system/off-the-books","channel","start-data","first-message","initial-data","cljs.core.dissoc","c__45178__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45179__auto__","switch__45092__auto__","state_51950","state_val_51952","inst_51944","statearr-51960","inst_51893","inst_51894","statearr-51964","statearr-51965","inst_51904","statearr-51968","statearr-51970","statearr-51973","statearr-51976","inst_51939","statearr-51977","statearr-51982","inst_51946","cljs.core.async.impl.ioc-helpers/return-chan","statearr-51985","inst_51899","inst_51900","cljs.core/PersistentVector","inst_51901","inst_51902","statearr-51994","cljs.core.async/ioc-alts!","inst_51926","statearr-51998","inst_51916","inst_51924","statearr-52003","statearr-52004","inst_51913","inst_51917","inst_51918","inst_51919","statearr-52011","statearr-52014","statearr-52015","inst_51930","inst_51931","inst_51932","inst_51933","statearr-52020","statearr-52022","inst_51937","statearr-52025","inst_51941","statearr-52026","inst_51922","statearr-52031","statearr-52043","state-machine__45093__auto__","ret-value__45094__auto__","result__45095__auto__","cljs.core/keyword-identical?","ex__45096__auto__","e52050","statearr-52051","cljs.core/seq","statearr-52053","state__45180__auto__","statearr-52055","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","devcards.system/load-data-from-channel!","state_52083","state_val_52084","inst_52075","inst_52076","inst_52077","cljs.core.async.impl.ioc-helpers/take!","inst_52079","inst_52080","statearr-52111","e52113","statearr-52115","statearr-52117","statearr-52123","cljs.core/reset!","devcards.system/start-ui-with-renderer","renderer","js/devcards.system.devcards-ui-setup","devcards.system/devcards-ui-setup","js/module$node_modules$react$index","js/module$node_modules$react$index.initializeTouchEvents","state_52172","state_val_52173","statearr-52174","inst_52145","inst_52169","inst_52155","inst_52158","inst_52159","inst_52147","inst_52148","inst_52149","inst_52150","inst_52151","statearr-52215","statearr-52224","inst_52161","inst_52162","inst_52163","statearr-52242","statearr-52244","statearr-52257","statearr-52267","statearr-52272","inst_52167","statearr-52281","statearr-52283","e52285","statearr-52286","statearr-52287","statearr-52298","js/setTimeout","devcards.system/start-ui","state_52346","state_val_52347","statearr-52354","inst_52312","inst_52343","inst_52327","inst_52330","inst_52331","inst_52317","inst_52318","inst_52319","inst_52320","inst_52321","statearr-52393","statearr-52400","inst_52333","inst_52335","inst_52336","statearr-52412","statearr-52417","statearr-52424","statearr-52426","statearr-52428","inst_52341","statearr-52431","statearr-52435","e52436","statearr-52437","statearr-52442","statearr-52454","devcards.system/cljs-logo-svg"],"sourcesContent":["(ns devcards.system\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [put! <! chan timeout]]\n   [sablono.core :as sab]\n   [devcards.util.edn-renderer :as edn-rend]\n   [goog.object :as gobj]\n   [goog.events :as events]\n   [goog.history.EventType :as EventType]\n   [devcards.util.utils :as utils :refer-macros [define-react-class]]\n   [react :as react]\n   [react-dom :as react-dom])\n  (:require-macros\n   [cljs.core.async.macros :refer [go go-loop]]\n   [devcards.system :refer [inline-resouce-file]])\n  (:import\n   [goog History]))\n\n(defn l [x]\n  (.log js/console x)\n  x)\n\n(def devcards-app-element-id \"com-rigsomelight-devcards-main\")\n\n(def devcards-rendered-card-class \"com-rigsomelight-devcards_rendered-card\")\n\n(defn prevent-> [f] (fn [e] (.preventDefault e) (f e)))\n\n(defn get-element-by-id [id] (.getElementById js/document id))\n\n(defn devcards-app-node [] (get-element-by-id devcards-app-element-id))\n\n(defn path->unique-card-id [path]\n  (string/join \".\" (map (fn [x] (str \"[\" x \"]\"))\n                        (map name (cons :cardpath path)))))\n\n#_(defn unique-card-id->path [card-id]\n  (mapv keyword\n       (-> (subs card-id 1\n                 (dec (count card-id)))\n           (string/split #\"\\].\\[\")\n           rest)))\n\n(defn create-element* [tag id style-text]\n  (let [el (js/document.createElement tag)]\n    (set! (.-id el) id)\n    (.appendChild el (js/document.createTextNode style-text))\n    el))\n\n(def create-style-element (partial create-element* \"style\"))\n(def create-script-element (partial create-element* \"script\"))\n\n(defn prepend-child [node node2]\n  (if-let [first-child (.-firstChild node)]\n    (.insertBefore node node2 first-child)\n    (.appendChild node node2)))\n\n(defn add-css-if-necessary! []\n  (if-let [heads (.getElementsByTagName js/document \"head\")]\n    (let [head (aget heads 0)]\n      (when-not (get-element-by-id \"com-rigsomelight-code-highlight-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-code-highlight-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_github_highlight.css\"))))\n\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-addons-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-addons-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards_addons.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-edn-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-edn-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_edn_flex.css\")))))))\n\n(defn render-base-if-necessary! []\n  (add-css-if-necessary!)\n  (when-not (devcards-app-node)\n    (let [el (js/document.createElement \"div\")]\n      (set! (.-id el) devcards-app-element-id)\n      (prepend-child (.-body js/document) el))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Hashbang routing\n\n(declare set-current-path history)\n\n(defonce history\n  (when (utils/html-env?)\n    (let [h (History.)]\n      (.setEnabled h true)\n      h)))\n\n(defn path->token [path]\n  (str \"!/\" (string/join \"/\" (map name path))))\n\n(defn token->path [token]\n  (vec (map keyword\n            (-> token\n              (string/replace-first #\"#\" \"\")\n              (string/replace-first #\"!/\" \"\")\n              (string/split #\"/\")))))\n\n#_(prn (token->path (.getToken history)))\n\n#_(prn (token->path (gobj/get js/location \"hash\")))\n\n(defn hash-navigate [path]\n  (.setToken history (path->token path)))\n\n(defn hash-routing-init [state-atom]\n  (events/listen history EventType/NAVIGATE\n                 #(swap! state-atom set-current-path (token->path (.-token %))))\n  ;; we should probably just get the location and parse this out to\n  ;; avoid the initial race condition where .getToken isn't populated\n  (when-let [token (gobj/get js/location \"hash\")]\n    (swap! state-atom set-current-path (token->path token))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn devcard? [d]\n  (and (map? d)\n       #_(:data-atom d)\n       (:func d)\n       (:path d)\n       (:position d)\n       d))\n\n(defn path-collision [state path]\n  (if-let [c (get (:path-collision-count state) path)]\n    (vec (concat (butlast (vec path))\n                 [(keyword (str (name (last path)) \"-\" c))]))\n    path))\n\n(defn register-collision [state path]\n  (update-in state [:path-collision-count path] inc))\n\n(defmulti dev-trans first)\n\n(defmethod dev-trans :default [msg state] state)\n\n(defmethod dev-trans :register-card [[_ {:keys [path options func]}] state]\n  (let [position (:position state)\n        new-path (path-collision state path)]\n    (-> state\n        (update-in [:position] inc)\n        (update-in (cons :cards new-path)\n                   (fn [dc]\n                     { :path new-path\n                       :func func\n                       :position position }))\n        (register-collision path))))\n\n(def devcard-initial-data { :current-path []\n                            :position 0\n                            :cards {}\n                            :path-collision-count {}\n                            :base-card-options { :frame true\n                                                 :heading true\n                                                 :padding true\n                                                 :hidden false\n                                                 :inspect-data false\n                                                 :watch-atom true\n                                                 :history false } })\n\n(defonce app-state (atom devcard-initial-data))\n\n(defn valid-path? [state path]\n  (or (= [] path)\n      (get-in (:cards state) path)))\n\n(defn enforce-valid-path [state path]\n  (vec (if (valid-path? state path) path [])))\n\n(defn add-to-current-path [{:keys [current-path] :as state} path]\n  (assoc state\n         :current-path\n         (enforce-valid-path state (conj current-path (keyword path)))))\n\n(defn set-current-path [{:keys [current-path] :as state} path]\n  (let [path (vec (map keyword path))]\n    (if (not= current-path path)\n      (-> state\n        (assoc :current-path (enforce-valid-path state path))\n        #_add-navigate-effect)\n      state)))\n\n(defn set-current-path! [state-atom path]\n  (swap! state-atom set-current-path path)\n  (hash-navigate path))\n\n(defn current-page [data]\n  (and (:current-path data)\n       (:cards data)\n       (get-in (:cards data) (:current-path data))))\n\n(defn display-single-card? [state]\n  (devcard? (current-page state)))\n\n(defn display-dir-paths [state]\n  (let [cur (current-page state)]\n    (filter (complement (comp devcard? second)) cur)))\n\n(defn display-cards [cur]\n  (filter (comp #(and (not (:delete-card %))\n                      (devcard? %)) second) cur))\n\n(def ^:dynamic *devcard-data* nil)\n\n(defn card-template [state-atom {:keys [path options func] :as card}]\n  (sab/html\n   [:div.com-rigsomelight-devcard {:key (path->unique-card-id path)}\n    (cljs.core/binding [*devcard-data* card]\n      (func))]))\n\n(defn render-cards [cards state-atom]\n  (map (comp (partial card-template state-atom) second)\n       (sort-by (comp :position second) cards)))\n\n(defn main-cards-template [state-atom]\n  (let [data @state-atom]\n    (if (display-single-card? data)\n      (card-template state-atom (current-page data))\n      (render-cards (display-cards (current-page data)) state-atom))))\n\n(defn breadcrumbs [{:keys [current-path] :as state}]\n  (let [cpath (map name (cons :devcards current-path))\n        crumbs\n        (map (juxt last rest)\n             (rest (map-indexed\n                    (fn [i v] (subvec v 0 i))\n                    (take (inc (count cpath))\n                          (repeat (vec cpath))))))]\n    crumbs))\n\n(declare cljs-logo)\n\n(defn breadcrumbs-templ [crumbs state-atom]\n  (let [counter (atom 0)\n        sep-fn (fn [_] (sab/html [:span.com-rigsomelight-devcards-breadcrumb-sep\n                                 {:key (do (swap! counter inc) @counter)}\n                                 \"/\"]))]\n    (sab/html\n     [:div.com-rigsomelight-devcards-card-base.com-rigsomelight-devcards-breadcrumbs.com-rigsomelight-devcards-typog\n      {:key \"breadcrumbs-templ\"}\n      (rest\n       (interleave\n        (iterate sep-fn (sep-fn nil))\n       (map (fn [[n path]]\n              (sab/html\n               [:span {:style {:display \"inline-block\" }\n                       :key (path->unique-card-id path)}\n                [:a.com-rigsomelight-devcards_set-current-path\n                 {:href \"#\"\n                  :onClick      (prevent-> #(set-current-path! state-atom path))}\n                 (str n)]]))\n            crumbs)))\n      (cljs-logo)])))\n\n(defn navigate-to-path [key state-atom]\n  (swap! state-atom\n         (fn [s]\n           (let [new-s (add-to-current-path s key)]\n             (hash-navigate (:current-path new-s))\n             new-s))))\n\n(defn dir-links [dirs state-atom]\n  (when-not (empty? dirs)\n    (sab/html\n     [:div.com-rigsomelight-devcards-list-group.com-rigsomelight-devcards-typog\n      (map (fn [[key child-tree]]\n             (sab/html\n              [:a.com-rigsomelight-devcards-list-group-item\n               {:href \"#\"\n                :key (str key)\n                :onClick\n                (prevent->\n                 (fn [e] (navigate-to-path key state-atom)))\n                #_:onTouchStart\n                #_(prevent->\n                 (fn [e] (navigate-to-path key state-atom)))}\n               [:span.com-rigsomelight-devcards-badge\n                {:style {:float \"right\"}}\n                (count child-tree)]\n               [:span \" \" (name key)]]))\n           (sort-by (fn [[key _]] (name key))  dirs))])))\n\n(defn main-template [state-atom]\n  (let [data @state-atom]\n    (sab/html\n     [:div\n      {:className\n       (str \"com-rigsomelight-devcards-base \"\n            (when-let [n (first (:current-path data))]\n              (string/replace (name n) \".\" \"-\")))}\n      #_[:div.com-rigsomelight-devcards-navbar\n       [:div.com-rigsomelight-devcards-container\n        [:span.com-rigsomelight-devcards-brand\n         \"(:devcards ClojureScript)\"]]]\n      [:div.com-rigsomelight-devcards-container\n       (when-let [crumbs (breadcrumbs data)]\n         (breadcrumbs-templ crumbs state-atom))\n       (when-not (display-single-card? data)\n         (let [dir-paths (display-dir-paths data)]\n           (dir-links dir-paths state-atom)))\n       [:div\n        (main-cards-template state-atom)]]])))\n\n(define-react-class DevcardsRoot\n  (componentDidMount\n   [this]\n   (add-watch app-state :renderer-watch (fn [_ _ _ _] (.forceUpdate this))))\n  (render [this] (main-template app-state)))\n\n(defn renderer [state-atom]\n  #_(prn \"Rendering\")\n  (react-dom/render\n   (react/createElement DevcardsRoot)\n   #_(sab/html [:div\n              (main-template state-atom)\n              #_(edn-rend/html-edn @state-atom)])\n   (devcards-app-node)))\n\n(comment\n\n\n  a debug option :debug-card true\n\n  when initial state changes we should reset the state\n\n  an iterator to delinate a card in many states\n\n  speed test pprint and hightlighting versus edn-renderer\n\n  use a pure component for the edn renderer to memoize rerenders\n\n  look at upndown.js and marked.js\n\n  probably switch to marked for markdown parsing\n\n  fix loading race\n\n  move highlighting out and force folks to require hljs if they want it?\n\n  generate blog posts from a namespace with devcards\n  - can implement code modules\n  - look at dev mode and prod mode for this\n  - front matter in ns meta data\n\n  fix style of history so that there is no margin under it\n    when there is no data being inspected\n\n  move documentation cards into more descriptive namespaces\n  fill out details better\n\n  look at being able to render cursors\n\n  BACKBURNER\n  make slider component\n  consider web-components for hiding css styling!!!\n  turn system into react component?\n\n  )\n\n(defn merge-in-new-data [state new-state]\n  (assoc state\n         :path-collision-count {}\n         :position (:position new-state)\n         :cards    (merge\n                    (:cards state)\n                    (:cards new-state))))\n\n;; the only major potential problem here is that If we only register\n;; some of the cards of a namespace then the other cards in the\n;; namespace will dissapear. If one is doing calculations at the top\n;; level that take more than the wait time this could be a problem\n(defn off-the-books\n  \"Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards\n   that have arrived. This prevents multiple renders and allows us\n   to delete cards live.\"\n  [channel start-data first-message]\n  (let [;timer (timeout 3000)\n        initial-data (-> start-data\n                       (assoc :path-collision-count {})\n                       (dissoc :cards))]\n    #_(prn \"off the books\")\n    (go-loop [data (dev-trans first-message initial-data)]\n      #_(prn \"here\")\n      (let [timer (timeout 500)] ;; needs to be longer for mobile think\n        (when-let [[[msg-name payload] ch] (alts! [channel timer])]\n          (cond\n            (= ch timer)           (merge-in-new-data start-data data)\n            ;; this will function without jsreload. but allows us to\n            ;; render a tick faster\n            (= msg-name :jsreload) (merge-in-new-data start-data data)\n            :else\n            (do\n              (recur (dev-trans [msg-name payload] data)))))))))\n\n(defn load-data-from-channel! [channel]\n  (go (let [new-state (<! (off-the-books channel @app-state []))]\n        (reset! app-state new-state))))\n\n(defn start-ui-with-renderer [channel renderer]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? react/initializeTouchEvents)\n        (react/initializeTouchEvents true))\n      (go\n        (<! (load-data-from-channel! channel))\n\n        (js/setTimeout #(renderer app-state) 0)\n\n        (js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n\n(defn start-ui [channel]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? react/initializeTouchEvents)\n        (react/initializeTouchEvents true))\n      (render-base-if-necessary!)\n      (go\n        ;; initial load\n        #_(prn \"INITIAL loading\")\n        ;; consume all register card messages\n        ;; and then load the accumulated state into the\n        ;; app-state\n        (<! (load-data-from-channel! channel))\n\n        #_(let [new-state (<! (off-the-books channel @app-state []))]\n          (reset! app-state new-state))\n\n        ;; escape core async context for better errors\n        (js/setTimeout #(renderer app-state) 0)\n\n        #_(js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (js/setTimeout #(hash-routing-init app-state) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n(def cljs-logo-svg\n  \"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>\n<svg class='cljs-logo' width='49px' height='49px' style='float: right; display: inline-block; position:relative; top:-13px; right: 0px;' version='1.1'\n  xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px'\n  viewBox='0 0 428 428' enable-background='new 0 0 428 428' xml:space='preserve'>\n<circle fill='#fff' cx='213' cy='214' r='213' />\n<g>\n<path fill='#96CA4B' d='M122,266.6c-12.7,0-22.3-3.7-28.9-11.1c-6.6-7.4-9.9-18-9.9-31.8c0-14.1,3.4-24.9,10.3-32.5\n  s16.8-11.4,29.9-11.4c8.8,0,16.8,1.6,23.8,4.9l-5.4,14.3c-7.5-2.9-13.7-4.4-18.6-4.4c-14.5,0-21.7,9.6-21.7,28.8\n  c0,9.4,1.8,16.4,5.4,21.2c3.6,4.7,8.9,7.1,15.9,7.1c7.9,0,15.4-2,22.5-5.9v15.5c-3.2,1.9-6.6,3.2-10.2,4\n  C131.5,266.2,127.1,266.6,122,266.6z'/>\n<path fill='#96CA4B' d='M194.4,265.1h-17.8V147.3h17.8V265.1z'/>\n<path fill='#5F7FBF' d='M222.9,302.3c-5.3,0-9.8-0.6-13.3-1.9v-14.1c3.4,0.9,6.9,1.4,10.5,1.4c7.6,0,11.4-4.3,11.4-12.9v-93.5h17.8\n  v94.7c0,8.6-2.3,15.2-6.8,19.6C237.9,300.1,231.4,302.3,222.9,302.3z M230.4,159.2c0-3.2,0.9-5.6,2.6-7.3c1.7-1.7,4.2-2.6,7.5-2.6\n  c3.1,0,5.6,0.9,7.3,2.6c1.7,1.7,2.6,4.2,2.6,7.3c0,3-0.9,5.4-2.6,7.2c-1.7,1.7-4.2,2.6-7.3,2.6c-3.2,0-5.7-0.9-7.5-2.6\n  C231.2,164.6,230.4,162.2,230.4,159.2z'/>\n<path fill='#5F7FBF' d='M342.5,241.3c0,8.2-3,14.4-8.9,18.8c-6,4.4-14.5,6.5-25.6,6.5c-11.2,0-20.1-1.7-26.9-5.1v-15.4\n  c9.8,4.5,19,6.8,27.5,6.8c10.9,0,16.4-3.3,16.4-9.9c0-2.1-0.6-3.9-1.8-5.3c-1.2-1.4-3.2-2.9-6-4.4c-2.8-1.5-6.6-3.2-11.6-5.1\n  c-9.6-3.7-16.2-7.5-19.6-11.2c-3.4-3.7-5.1-8.6-5.1-14.5c0-7.2,2.9-12.7,8.7-16.7c5.8-4,13.6-5.9,23.6-5.9c9.8,0,19.1,2,27.9,6\n  l-5.8,13.4c-9-3.7-16.6-5.6-22.8-5.6c-9.4,0-14.1,2.7-14.1,8c0,2.6,1.2,4.8,3.7,6.7c2.4,1.8,7.8,4.3,16,7.5\n  c6.9,2.7,11.9,5.1,15.1,7.3c3.1,2.2,5.4,4.8,7,7.7C341.7,233.7,342.5,237.2,342.5,241.3z'/>\n</g>\n<path fill='#96CA4B' stroke='#96CA4B' stroke-width='6' stroke-miterlimit='10' d='M197,392.7c-91.2-8.1-163-85-163-178.3\n  S105.8,44.3,197,36.2V16.1c-102.3,8.2-183,94-183,198.4s80.7,190.2,183,198.4V392.7z'/>\n<path fill='#5F7FBF' stroke='#5F7FBF' stroke-width='6' stroke-miterlimit='10' d='M229,16.1v20.1c91.2,8.1,163,85,163,178.3\n  s-71.8,170.2-163,178.3v20.1c102.3-8.2,183-94,183-198.4S331.3,24.3,229,16.1z'/>\n</svg>\")\n\n(defn cljs-logo []\n  (react/createElement \"span\"\n    #js {:key \"cljs-logo\"\n         :dangerouslySetInnerHTML\n         #js {:__html cljs-logo-svg}}))\n"]}