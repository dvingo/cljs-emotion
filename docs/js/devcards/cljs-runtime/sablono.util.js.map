{"version":3,"sources":["sablono/util.cljc"],"mappings":"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","names":["sablono.util/*base-url*","sablono$util$ToString$to_str$dyn","x__4550__auto__","m__4551__auto__","sablono.util/to-str","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sablono.util/ToString","x","sablono$util$ToURI$to_uri$dyn","sablono.util/to-uri","sablono.util/ToURI","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sablono.util/as-str","seq46967","self__4852__auto__","cljs.core/seq","xs","clojure.string.join","cljs.core.map","sablono.util/camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__47016","seq__47017","first__47018","cljs.core/first","cljs.core/next","first-word","words","cljs.core/name","cljs.core/empty?","cljs.core._EQ_","clojure.string/capitalize","cljs.core.conj","cljs.core.keyword","sablono.util/camel-case-keys","m","cljs.core/map?","cljs.core.into","p__47034","vec__47037","cljs.core.nth","v","G__47041","cljs.core.update","sablono.util/element?","cljs.core/vector?","sablono.util/html-to-dom-attrs","attrs","clojure.set/rename-keys","sablono.util/join-classes","classes","cljs.core.comp","cljs.core.mapcat","cljs.core.remove","cljs.core/nil?","cljs.core/PROTOCOL_SENTINEL","js/goog.Uri","or__4253__auto__","cljs.core/not","cljs.core/re-matches","base","cljs.core.subs","_"],"sourcesContent":["(ns sablono.util\n  #?(:cljs (:import goog.Uri))\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defprotocol ToString\n  (to-str [x] \"Convert a value into a string.\"))\n\n(defprotocol ToURI\n  (to-uri [x] \"Convert a value into a URI.\"))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (str/join (map to-str xs)))\n\n(defn camel-case\n  \"Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.\"\n  [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (.split (name k) \"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join\n            keyword)))\n    k))\n\n(defn camel-case-keys\n  \"Recursively transforms all map keys into camel case.\"\n  [m]\n  (if (map? m)\n    (let [m (into {}\n                  (map (fn [[k v]] [(camel-case k) v]))\n                  m)]\n      (cond-> m\n        (map? (:style m))\n        (update :style camel-case-keys)))\n    m))\n\n(defn element?\n  \"Return true if `x` is an HTML element. True when `x` is a vector\n  and the first element is a keyword, e.g. `[:div]` or `[:div [:span \\\"x\\\"]`.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(defn html-to-dom-attrs\n  \"Converts all HTML attributes to their DOM equivalents.\"\n  [attrs]\n  (rename-keys (camel-case-keys attrs)\n               {:class :className\n                :for :htmlFor}))\n\n(defn join-classes\n  \"Join the `classes` with a whitespace.\"\n  [classes]\n  (->> classes\n       (into [] (comp\n                 (mapcat (fn [x] (if (string? x) [x] (seq x))))\n                 (remove nil?)))\n       (str/join \" \")))\n\n#?(:cljs\n   (extend-protocol ToString\n     cljs.core.Keyword\n     (to-str [x]\n       (name x))\n     goog.Uri\n     (to-str [x]\n       (if (or (. x (hasDomain))\n               (nil? (. x (getPath)))\n               (not (re-matches #\"^/.*\" (. x (getPath)))))\n         (str x)\n         (let [base (str *base-url*)]\n           (if (re-matches #\".*/$\" base)\n             (str (subs base 0 (dec (count base))) x)\n             (str base x)))))\n     nil\n     (to-str [_]\n       \"\")\n     number\n     (to-str [x]\n       (str x))\n     default\n     (to-str [x]\n       (str x))))\n\n#?(:cljs\n   (extend-protocol ToURI\n     Uri\n     (to-uri [x] x)\n     default\n     (to-uri [x] (Uri. (str x)))))\n"]}