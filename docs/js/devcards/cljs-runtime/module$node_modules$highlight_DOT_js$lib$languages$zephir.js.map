{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$zephir.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4ItHD,MAAOC,CAAAA,OAAP,CAlIAC,QAAe,CAACC,IAAD,CAAO,CACpB,MAAMC,OAAS,CACbC,UAAW,QADE,CAEbC,SAAU,CAAEH,IAAKI,CAAAA,gBAAP,CAFG,CAGbC,SAAU,CACRL,IAAKM,CAAAA,OAAL,CAAaN,IAAKO,CAAAA,gBAAlB,CAAoC,CAClCC,QAAS,IADyB,CAApC,CADQ,CAIRR,IAAKM,CAAAA,OAAL,CAAaN,IAAKS,CAAAA,iBAAlB,CAAqC,CACnCD,QAAS,IAD0B,CAArC,CAJQ,CAHG,CAAf,CAYME,WAAaV,IAAKW,CAAAA,qBAZxB,CAaMC,OAAS,CACbP,SAAU,CACRL,IAAKa,CAAAA,kBADG,CAERb,IAAKc,CAAAA,aAFG,CADG,CAiCf,OAAO,CACLC,KAAM,QADD,CAELC,QAAS,CAAE,KAAF,CAFJ,CAGLC,SA5BAC,qfAyBK;AAILf,SAAU,CACRH,IAAKmB,CAAAA,mBADG,CAERnB,IAAKoB,CAAAA,OAAL,CACE,MADF,CAEE,MAFF,CAGE,CACEjB,SAAU,CACR,CACED,UAAW,QADb,CAEEmB,MAAO,YAFT,CADQ,CADZ,CAHF,CAFQ,CAcR,CACEnB,UAAW,QADb,CAEEmB,MAAO,mBAFT,CAGEC,IAAK,OAHP,CAIEnB,SAAU,CAAEH,IAAKI,CAAAA,gBAAP,CAJZ,CAdQ,CAoBR,CAEEiB,MAAO,kDAFT,CApBQ,CAwBR,CACEnB,UAAW,UADb,CAEEqB,cAAe,aAFjB,CAGED,IAAK,MAHP,CAIEE,WAAY,CAAA,CAJd,CAKEhB,QAAS,SALX,CAMEL,SAAU,CACRO,UADQ,CAER,CACER,UAAW,QADb,CAEEmB,MAAO,IAFT,CAGEC,IAAK,IAHP,CAIEL,SAjERC,qfA6DM;AAKEf,SAAU,CACR,MADQ,CAERH,IAAKyB,CAAAA,oBAFG,CAGRxB,MAHQ,CAIRW,MAJQ,CALZ,CAFQ,CANZ,CAxBQ,CA8CR,CACEV,UAAW,OADb,CAEEqB,cAAe,iBAFjB,CAGED,IAAK,IAHP,CAIEE,WAAY,CAAA,CAJd,CAKEhB,QAAS,QALX,CAMEL,SAAU,CACR,CACEoB,cAAe,oBADjB,CADQ,CAIRb,UAJQ,CANZ,CA9CQ,CA2DR,CACEa,cAAe,WADjB,CAEED,IAAK,GAFP,CAGEd,QAAS,MAHX,CAIEL,SAAU,CAAEO,UAAF,CAJZ,CA3DQ,CAiER,CACEa,cAAe,KADjB,CAEED,IAAK,GAFP,CAGEnB,SAAU,CAAEO,UAAF,CAHZ,CAjEQ,CAsER,CACEW,MAAO,IADT,CAtEQ,CAyERpB,MAzEQ,CA0ERW,MA1EQ,CAJL,CA/Ca,CAVgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/zephir.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$zephir\"] = function(global,require,module,exports) {\n/*\n Language: Zephir\n Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.\n Author: Oleg Efimov <efimovov@gmail.com>\n Website: https://zephir-lang.com/en\n Audit: 2020\n */\n\n/** @type LanguageFn */\nfunction zephir(hljs) {\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null\n      })\n    ]\n  };\n  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;\n  const NUMBER = {\n    variants: [\n      hljs.BINARY_NUMBER_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n  const KEYWORDS =\n    // classes and objects\n    'namespace class interface use extends ' +\n    'function return ' +\n    'abstract final public protected private static deprecated ' +\n    // error handling\n    'throw try catch Exception ' +\n    // keyword-ish things their website does NOT seem to highlight (in their own snippets)\n    // 'typeof fetch in ' +\n    // operators/helpers\n    'echo empty isset instanceof unset ' +\n    // assignment/variables\n    'let var new const self ' +\n    // control\n    'require ' +\n    'if else elseif switch case default ' +\n    'do while loop for continue break ' +\n    'likely unlikely ' +\n    // magic constants\n    // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php\n    '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ ' +\n    // types - https://docs.zephir-lang.com/0.12/en/types\n    'array boolean float double integer object resource string ' +\n    'char long unsigned bool int uint ulong uchar ' +\n    // built-ins\n    'true false null undefined';\n\n  return {\n    name: 'Zephir',\n    aliases: [ 'zep' ],\n    keywords: KEYWORDS,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(\n        /\\/\\*/,\n        /\\*\\//,\n        {\n          contains: [\n            {\n              className: 'doctag',\n              begin: /@[A-Za-z]+/\n            }\n          ]\n        }\n      ),\n      {\n        className: 'string',\n        begin: /<<<['\"]?\\w+['\"]?$/,\n        end: /^\\w+;/,\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        // swallow composed identifiers to avoid parsing them as keywords\n        begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function fn',\n        end: /[;{]/,\n        excludeEnd: true,\n        illegal: /\\$|\\[|%/,\n        contains: [\n          TITLE_MODE,\n          {\n            className: 'params',\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            contains: [\n              'self',\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface',\n        end: /\\{/,\n        excludeEnd: true,\n        illegal: /[:($\"]/,\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'namespace',\n        end: /;/,\n        illegal: /[.']/,\n        contains: [ TITLE_MODE ]\n      },\n      {\n        beginKeywords: 'use',\n        end: /;/,\n        contains: [ TITLE_MODE ]\n      },\n      {\n        begin: /=>/ // No markup, just a relevance booster\n      },\n      STRING,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = zephir;\n\n};"],
"names":["shadow$provide","global","require","module","exports","zephir","hljs","STRING","className","contains","BACKSLASH_ESCAPE","variants","inherit","APOS_STRING_MODE","illegal","QUOTE_STRING_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","NUMBER","BINARY_NUMBER_MODE","C_NUMBER_MODE","name","aliases","keywords","KEYWORDS","C_LINE_COMMENT_MODE","COMMENT","begin","end","beginKeywords","excludeEnd","C_BLOCK_COMMENT_MODE"]
}
