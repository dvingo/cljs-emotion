{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":";AAQA;;;;;sEAAA,tEAAMA,oJAIHC,IAAIC;AAJP,AAKE,IAAAC,6CAAUE;IAAVD,6CAAA;AAAA,AAAA,gEAAAA,/DAAUC;;AAAV,IAAA,AACE,IAAAC,aAAgEL;IAAhEK,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAiDK;IAAjDF,aAAA,AAAAC,gBACuFC;IADvFF,iBAAA,AAAAF,4BAAAE;mBAAA,AAAAD,4CAAAC,eAAA,1EACiDG;iBADjD,AAAAJ,4CAAAC,eAAA,xEAC8DI;iBAD9D,AAAAL,4CAAAC,eAAA,xEACyEK;IACnEC,UAAU,iBAAAC,mBAAI,2DAAA,3DAACC,uDAAiBhB;AAAtB,AAAA,oBAAAe;AAAAA;;AAAkDE;;;IAC5DC,QAAU,AAACC,0EAAeP,WAAWX;IACrCmB,YAAU,kBAAIF,OACF,AAACG,0DAAaH,MAAMjB,UAAUA,WAC9BA;AANlB,AAOE,oBAAM,iBAAAqB,oBAAKR;AAAL,AAAA,oBAAAQ;AAAQX;;AAARW;;;AAAN,AACE,IAAAC,WAAI,CAACZ,6CAAAA,wDAAAA,bAAaS,oCAAAA;IAAlBI,WAA6BX;AAA7B,AAAA,sFAAAU,SAAAC,8BAAAD,SAAAC,9HAACV,wCAAAA,2DAAAA;;AADH;;UARJ,AAAA,gEAAAZ,/DAAUE;;AAWZ;;;;;;;;;;;;gEAAA,4EAAAqB,5IAAME,wIAWH3B;AAXH,AAAA,IAAA0B,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;cAAAA,VAWyCI;wBAXzC,AAAAvB,4CAAAmB,eAAA,/EAWeE;qBAXf,AAAArB,4CAAAmB,eAAA,5EAW2BG;AAX3B,AAYE,IAAAE,6CAAU3B;IAAV4B,6CAAgCJ;AAAhC,AAAA,gEAAAI,/DAAU5B;;AAAV,IAAA,AACE,IAAA6B,aAA2EjC;IAA3EiC,iBAAA,AAAA3B,4BAAA2B;mBAAA,AAAA1B,4CAAA0B,eAAA,1EAAiDvB;iBAAjD,AAAAH,4CAAA0B,eAAA,xEAA8DE;IAA9DD,aAAA,AAAAzB,gBACuFC;IADvFwB,iBAAA,AAAA5B,4BAAA4B;mBAAA,AAAA3B,4CAAA2B,eAAA,1EACiDvB;iBADjD,AAAAJ,4CAAA2B,eAAA,xEAC8DtB;iBAD9D,AAAAL,4CAAA2B,eAAA,xEACyErB;IACnEC,UAAiB,kBAAIe,gBACF,iBAAAd,mBAAI,2DAAA,3DAACC,uDAAiBhB;AAAtB,AAAA,oBAAAe;AAAAA;;AAAA,IAAAA,uBAAmDqB;AAAnD,AAAA,oBAAArB;AAAAA;;AAAiFE;;;KACjF,iBAAAF,mBAAI,2DAAA,3DAACC,uDAAiBhB;AAAtB,AAAA,oBAAAe;AAAAA;;AAAkDE;;;gBAJ3E,AAAAR,ZAKMR,4BAAkBkC;IAClBjB,QAAiB,AAACC,0EAAeP,WAAWX;IAC5CmB,YAAiB,kBAAIF,OACF,AAACG,0DAAaH,MAAMjB,UAAUA,WAC9BA;IACnBoC,WACkB,gCAAA,dAAM1B,cACJ,iBAAA2B,WAAI,CAAC3B,6CAAAA,wDAAAA,bAAaS,oCAAAA;IAAlBmB,WAA6B1B;AAA7B,AAAA,sFAAAyB,SAAAC,8BAAAD,SAAAC,9HAACzB,wCAAAA,2DAAAA;KADH;AAXxB,AAaE,gFAAA,hFAAC0B,mDAAM9B,aAAa+B,+IAAmDJ;;AAC9DA;UAfb,AAAA,gEAAAN,/DAAU3B","names":["com.fulcrologic.fulcro.rendering.keyframe-render/render-state!","app","state-map","*blindly-render*-orig-val__49459","*blindly-render*-temp-val__49460","com.fulcrologic.fulcro.components/*blindly-render*","map__49462","cljs.core/--destructure-map","cljs.core.get","map__49463","cljs.core/deref","runtime-atom","root-factory","root-class","mount-node","r!","or__4253__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/ReactDOM.render","query","com.fulcrologic.fulcro.components.get_query","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","and__4251__auto__","G__49467","G__49468","p__49469","map__49470","com.fulcrologic.fulcro.rendering.keyframe-render/render!","force-root?","hydrate?","options","*blindly-render*-orig-val__49473","*blindly-render*-temp-val__49474","map__49475","map__49476","state-atom","js/ReactDOM.hydrate","app-root","G__49481","G__49482","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]\n    [taoensso.timbre :as log]))\n\n(defn render-state!\n  \"This function renders given state map over top of the current app. This allows you to render previews of state **without\n  actually changing the app state**. Used by Inspect for DOM preview. Forces a root-based render with no props diff optimization.\n  The app must already be mounted. Returns the result of render.\"\n  [app state-map]\n  (binding [comp/*blindly-render* true]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!        (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render))\n          query     (comp/get-query root-class state-map)\n          data-tree (if query\n                      (fdn/db->tree query state-map state-map)\n                      state-map)]\n      (when (and r! root-factory)\n        (r! (root-factory data-tree) mount-node)))))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `true` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?] :as options}]\n  (binding [comp/*blindly-render* force-root?]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!               (if hydrate?\n                             (or (ah/app-algorithm app :hydrate-root!) #?(:cljs js/ReactDOM.hydrate) #?(:cljs js/ReactDOM.render))\n                             (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render)))\n          state-map        @state-atom\n          query            (comp/get-query root-class state-map)\n          data-tree        (if query\n                             (fdn/db->tree query state-map state-map)\n                             state-map)\n          app-root #?(:clj {}\n                      :cljs (when root-factory\n                              (r! (root-factory data-tree) mount-node)))]\n      (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n      #?(:cljs app-root))))"]}