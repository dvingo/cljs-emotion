{"version":3,"sources":["com/fulcrologic/fulcro_css/css_injection.cljc"],"mappings":"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","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro-css.css-injection/error","seq58099","self__4852__auto__","cljs.core/seq","msg","cljs.core.apply","js/console.log","com.fulcrologic.fulcro-css.css-injection/component-css-includes-with-depth","component","breadth","depth","includes","com.fulcrologic.fulcro-css.css/get-includes","cljs.core.into","p1__58104#","cljs.core.map","cljs.core/PersistentHashMap","p1__58105#","cljs.core.mapcat","G__58108","G__58109","G__58110","p__58115","map__58116","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro-css.css-injection/find-css-nodes","order","state-map","query","cljs.core/map?","com.fulcrologic.fulcro.components.get_query","ast","edn-query-language.core/query->ast","cljs.core.atom","traverse","p__58120","map__58122","children","G__58123","and__4251__auto__","com.fulcrologic.fulcro-css.css/CSS?","cljs.core.conj","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","p1__58111#","traverse*","nodes","ordered-nodes","cljs.core._EQ_","cljs.core.sort_by","p1__58113#","unique-nodes","cljs.core.distinct","com.fulcrologic.fulcro_css.css_injection.error","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.core/seq?","get-rules","components","p1__58131#","p2__58132#","cljs.core.reduce","com.fulcrologic.fulcro-css.css/get-css-rules","com.fulcrologic.fulcro-css.css-injection/compute-css","props","js/Error","cljs.core/contains?","map__58134","auto-include?","garden-flags","rules","G__58137","com.fulcrologic.fulcro-css.css/get-css","G__58138","css","garden.core.css","options__48885__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__58144","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro-css","js/com.fulcrologic.fulcro-css.css-injection","js/com.fulcrologic.fulcro-css.css-injection.StyleElement","props__48886__auto__","this__48887__auto__","temp__5751__auto__","init-state__48888__auto__","obj58150","G__58151","G__58152","com.fulcrologic.fulcro.components/isoget","obj58155","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.fulcro-css.css-injection/StyleElement","this","key","com.fulcrologic.fulcro.components.set_state_BANG_","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.components.get_state","factory","com.fulcrologic.fulcro.components.factory","com.fulcrologic.fulcro-css.css-injection/style-element","G__58161","com.fulcrologic.fulcro.components/component?","cljs.core.assoc","G__58163","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.application.current_state","cljs.core.update","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro-css.css-injection/remove-from-dom","id","old-element","js/document","parent","com.fulcrologic.fulcro-css.css-injection/upsert-css","options","style-ele"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css-injection\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.application :as app]\n    [clojure.spec.alpha :as s]\n    [garden.core :as g]\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro-css.css :as css]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])))\n\n(defn error [& msg]\n  #?(:cljs (apply js/console.log msg)\n     :clj  (.println System/err (apply str msg))))\n\n(defn component-css-includes-with-depth [component breadth depth]\n  (let [includes (css/get-includes component)]\n    (-> (into []\n          (map #(hash-map ::depth (inc depth)\n                  ::breadth breadth\n                  ::component %))\n          includes)\n      (into (mapcat #(component-css-includes-with-depth % breadth (inc depth)) includes)))))\n\n(defn find-css-nodes\n  \"Scan the given component and return an ordered vector of the css rules in depth-first order.\n  `order` can be :depth-first (default) or :breadth-first\"\n  [{:keys [component order state-map]}]\n  (let [query         (if (map? state-map) (comp/get-query component state-map) (comp/get-query component))\n        ast           (eql/query->ast query)\n        breadth       (atom 0)\n        traverse      (fn traverse* [{:keys [children component]} depth]\n                        (into\n                          (cond-> []\n                            (and component (css/CSS? component)) (conj {::depth     depth\n                                                                        ::breadth   (swap! breadth inc)\n                                                                        ::component component})\n                            component (into (component-css-includes-with-depth component @breadth depth)))\n                          (mapcat #(traverse* % (inc depth)) (seq children))))\n        nodes         (traverse ast 0)\n        ordered-nodes (if (= order :breadth-first)\n                        (sort-by ::breadth nodes)\n                        (sort-by #(- (::depth %)) nodes))\n        unique-nodes  (distinct (map ::component ordered-nodes))]\n    (when-not query\n      (error \"Auto-include was used for CSS, but the component had no query! No CSS Found.\"))\n    unique-nodes))\n\n(s/fdef find-css-nodes\n  :args (s/cat :options map?)\n  :ret seq?)\n\n(let [get-rules (fn [components] (reduce #(into %1 (css/get-css-rules %2)) [] components))]\n  (defn compute-css\n    \"Compute the stringified CSS based on the given props. This can be used to generate a\n    server-side version of CSS for the initial DOM, and is used the other injection functions to compute\n    the CSS.\n\n    Props are as described in `style-element`.\n    \"\n    [props]\n    (assert (and (map? props) (contains? props :component)) \"Argument must be a map that contains the key :component\")\n    (let [{:keys [component auto-include? garden-flags] :or {garden-flags {}}} props\n          rules (if (false? auto-include?)\n                  (some-> component (css/get-css))\n                  (some-> (find-css-nodes props) get-rules))\n          css   (g/css garden-flags rules)]\n      css)))\n\n(defsc StyleElement [this {:keys [order key]}]\n  {:componentDidMount (fn [this]\n                        (let [css (compute-css (comp/props this))]\n                          (comp/set-state! this {:css css})))}\n  ;; This ensures best performance. React doesn't check/diff it this way.\n  (dom/style {:dangerouslySetInnerHTML {:__html (comp/get-state this :css)}}))\n\n(let [factory (comp/factory StyleElement)]\n  (defn style-element\n    \"Renders a style element. Valid props are:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n    The resulting React style element avoids re-rendering unless the props change, and the CSS is cached at component mount; therefore\n    this element will avoid all overhead on refresh. In development you may wish to have the CSS change on hot code reload, in which case\n    you can simply change the `:react-key` on the props to force a re-mount (which will recompute the CSS).\n    \"\n    [props]\n    (let [component (:component props)\n          props     (cond-> props\n                      (comp/component? component) (->\n                                                    (assoc :state-map (some-> component comp/any->app app/current-state))\n                                                    (update :component comp/react-type)))]\n      #?(:cljs (factory props)\n         :clj  (dom/style {}\n                 (compute-css props))))))\n\n#?(:cljs\n   (defn remove-from-dom \"Remove the given element from the DOM by ID\"\n     [id]\n     (if-let [old-element (.getElementById js/document id)]\n       (let [parent (.-parentNode old-element)]\n         (.removeChild parent old-element)))))\n\n#?(:clj\n   (defn upsert-css\n     \"In CLJ this is a STUB (to prevent compile errors in CLJC UI files).\n\n     Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"\n     [id options]\n     (error \"Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"))\n   :cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's low-level DOM with the co-located CSS of\n     the specified component.\n\n     The `options` is the same as passed to `style-element`:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n     ONLY WORKS FOR CLJS, since otherwise there is no DOM to change.\"\n     [id options]\n     (assert (and (map? options) (contains? options :component)) \"Argument must be a map that contains the key :component\")\n     (remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")\n           css       (compute-css options)]\n       (set! (.-innerHTML style-ele) css)\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n"]}