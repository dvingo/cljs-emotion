{"version":3,"sources":["sablono/interpreter.cljc"],"mappings":"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","names":["sablono$interpreter$IInterpreter$interpret$dyn","x__4550__auto__","m__4551__auto__","sablono.interpreter/interpret","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","sablono.interpreter/IInterpreter","this","sablono.interpreter/update-state","component","next-props","property","value","on-change","sablono.interpreter.goog$module$goog$object.getValueByKeys","next-state","sablono.interpreter.goog$module$goog$object.extend","sablono.interpreter.goog$module$goog$object.set","sablono.interpreter/wrap-form-element","element","ctor","props","state","js/goog.bind","sablono.interpreter.goog$module$goog$object.get","js/module$node_modules$react$index.Component","js/goog.inherits","x47552","event","temp__5753__auto__","handler","new-props","state-value","element-value","js/module$node_modules$react_dom$index.findDOMNode","cljs.core.not_EQ_","js/module$node_modules$react$index.createElement","sablono.interpreter/lazy-load-wrappers","sablono.interpreter/wrapped-textarea","sablono.interpreter/wrapped-input","sablono.interpreter/wrapped-checked","sablono.interpreter/wrapped-select","sablono.interpreter/controlled-input?","type","and__4251__auto__","cljs.core/object?","G__47562","sablono.interpreter/element-class","G__47585","G__47587","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sablono.interpreter/create-element","seq47593","G__47594","cljs.core/first","cljs.core/next","G__47595","self__4851__auto__","children","cljs.core.apply","sablono.interpreter/attributes","attrs","js-attrs","cljs.core/clj->js","sablono.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join","clojure.string/blank?","sablono.interpreter/interpret-seq","x","cljs.core.into","cljs.core.map","sablono.interpreter/element","vec__47624","cljs.core.nth","content","sablono.normalize/element","sablono.interpreter/interpret-vec","sablono.util/element?","cljs.core/PROTOCOL_SENTINEL","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/Cons","cljs.core/LazySeq","cljs.core/List","cljs.core/Subvec","cljs.core/PersistentVector"],"sourcesContent":["(ns sablono.interpreter\n  (:require #?(:clj [om.dom :as dom])\n            #?(:cljs [goog.object :as object])\n            #?(:cljs [react :as React])\n            #?(:cljs [react-dom :as ReactDOM])\n            [clojure.string :as str]\n            [clojure.string :refer [blank? join]]\n            [sablono.normalize :as normalize]\n            [sablono.util :as util]))\n\n(defprotocol IInterpreter\n  (interpret [this] \"Interpret a Clojure data structure as a React fn call.\"))\n\n#?(:cljs (defn update-state\n           \"Updates the state of the wrapped input element.\"\n           [component next-props property value]\n           (let [on-change (object/getValueByKeys component \"state\" \"onChange\")\n                 next-state #js {}]\n             (object/extend next-state next-props #js {:onChange on-change})\n             (object/set next-state property value)\n             (.setState component next-state))))\n\n;; A hack to force input elements to always update itself immediately,\n;; without waiting for requestAnimationFrame.\n\n#?(:cljs\n   (defn wrap-form-element [element property]\n     (let [ctor (fn [props]\n                  (this-as this\n                    (set! (.-state this)\n                          (let [state #js {}]\n                            (->> #js {:onChange (goog.bind (object/get this \"onChange\") this)}\n                                 (object/extend state props))\n                            state))\n                    (.call React/Component this props)))]\n       (set! (.-displayName ctor) (str \"wrapped-\" element))\n       (goog.inherits ctor React/Component)\n       (specify! (.-prototype ctor)\n         Object\n         (onChange [this event]\n           (when-let [handler (.-onChange (.-props this))]\n             (handler event)\n             (update-state\n              this (.-props this) property\n              (object/getValueByKeys event \"target\" property))))\n\n         (componentWillReceiveProps [this new-props]\n           (let [state-value (object/getValueByKeys this \"state\" property)\n                 element-value (object/get (ReactDOM/findDOMNode this) property)]\n             ;; On IE, onChange event might come after actual value of\n             ;; an element have changed. We detect this and render\n             ;; element as-is, hoping that next onChange will\n             ;; eventually come and bring our modifications anyways.\n             ;; Ignoring this causes skipped letters in controlled\n             ;; components\n             ;; https://github.com/facebook/react/issues/7027\n             ;; https://github.com/reagent-project/reagent/issues/253\n             ;; https://github.com/tonsky/rum/issues/86\n             ;; TODO: Find a better solution, since this conflicts\n             ;; with controlled/uncontrolled inputs.\n             ;; https://github.com/r0man/sablono/issues/148\n             (if (not= (str state-value) (str element-value))\n               (update-state this new-props property element-value)\n               (update-state this new-props property (object/get new-props property)))))\n\n         (render [this]\n           (React/createElement element (.-state this))))\n       ctor)))\n\n#?(:cljs (def wrapped-input))\n#?(:cljs (def wrapped-checked))\n#?(:cljs (def wrapped-select))\n#?(:cljs (def wrapped-textarea))\n\n#?(:cljs (defn lazy-load-wrappers []\n           (when-not wrapped-textarea\n             (set! wrapped-input (wrap-form-element \"input\" \"value\"))\n             (set! wrapped-checked (wrap-form-element \"input\" \"checked\"))\n             (set! wrapped-select (wrap-form-element \"select\" \"value\"))\n             (set! wrapped-textarea (wrap-form-element \"textarea\" \"value\")))))\n\n(defn ^boolean controlled-input?\n  \"Returns true if `type` and `props` are used a controlled input,\n  otherwise false.\"\n  [type props]\n  #?(:cljs (and (object? props)\n                (case type\n                  \"input\"\n                  (or (exists? (.-checked props))\n                      (exists? (.-value props)))\n                  \"select\"\n                  (exists? (.-value props))\n                  \"textarea\"\n                  (exists? (.-value props))\n                  false))))\n\n#?(:cljs\n   (defn element-class\n     \"Returns either `type` or a wrapped element for controlled\n     inputs.\"\n     [type props]\n     (if (controlled-input? type props)\n       (do (lazy-load-wrappers)\n           (case type\n             \"input\"\n             (case (and (object? props) (.-type props))\n               \"radio\" wrapped-checked\n               \"checkbox\" wrapped-checked\n               wrapped-input)\n             \"select\" wrapped-select\n             \"textarea\" wrapped-textarea\n             type))\n       type)))\n\n(defn create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type props & children]\n  #?(:clj (dom/element\n           {:attrs props\n            :children children\n            :react-key nil\n            :tag type})\n     :cljs (apply React/createElement (element-class type props) props children)))\n\n(defn attributes [attrs]\n  #?(:clj (-> (util/html-to-dom-attrs attrs)\n              (update :className #(some->> % (str/join \" \"))))\n     :cljs (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n             (let [class (.-className js-attrs)\n                   class (if (array? class) (join \" \" class) class)]\n               (if (blank? class)\n                 (js-delete js-attrs \"className\")\n                 (set! (.-className js-attrs) class))\n               js-attrs))))\n\n(defn- interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (into [] (map interpret) x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (apply create-element type\n           (attributes attrs)\n           (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(extend-protocol IInterpreter\n\n  #?(:clj clojure.lang.ChunkedCons\n     :cljs cljs.core.ChunkedCons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq\n     :cljs cljs.core.ChunkedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.Cons\n     :cljs cljs.core.Cons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.IndexedSeq\n     :cljs cljs.core.IndexedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.APersistentVector$SubVector\n     :cljs cljs.core.Subvec)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj Object :cljs default)\n  (interpret [this]\n    this)\n\n  nil\n  (interpret [this]\n    nil))\n"]}