{"version":3,"sources":["dv/cljs_emotion/fulcro_cards.cljs"],"mappings":";;AAaA,AAAA,AAAA;AAAA,IAAAA,+BAAA,2CAAA,wDAAA,mDAAeuB;AAAf,AAAA,0FAAA,gEAAA;GAAA,oDAAA,yDAAAtB,NAAesB,eAEQI;AAFvB,AAAA,IAAAzB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAgDwB;gBAAhD,AAAAtB,4CAAAF,eAAA,vEAA4BsB;WAA5B,AAAApB,4CAAAF,eAAA,lEAAsCuB;AAAtC,AAAA,0FAAA,wGAAA;GAAA,wEAAA,qEAGuBE;AAHvB,AAAA,kDAAA,sDAAA;GAAA,0DAAA,qDAAeJ;AAAf,AAAA,OAAAlB,uDAAA,NAAekB;AAAf,AAAA,IAAAjB,aAAA,CAAAC,wEAAAA,+EAAAA,TAAegB,2DAAAA;IAAfjB,iBAAA,AAAAH,4BAAAG;YAAAA,RAAgDoB;gBAAhD,AAAAtB,4CAAAE,eAAA,vEAA4BkB;WAA5B,AAAApB,4CAAAE,eAAA,lEAAsCmB;AAAtC,AAIE,OAAAG,8EAAA,MAAA,qZAAA,lUACE,AAAAA,8EAAA,SAAA,mFAAA,2CAAA,+FAAA,/BAAwBJ,kBAAWC;;;AALvC,AAAA,GAAA,QAAAjB,+BAAAC,4CAAAC,yDAAAC;AAAA;AAAA,AAAA;;;sCAAA,8CAAAC,pFAAOU;AAAP,AAAA,IAAAT,sBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAAV,4CAAAJ,6BAAA;AAAA,AAAA,oBAAAc;AAAA,IAAAC,kCAAAD;AAAA,AAAA,CAAA,AAAAD,4BAAA,iBAAAG,WAAA,EAAA,eAAA,iBAAAC,WAAAJ;IAAAK,WAAA,CAAAC,yEAAAA,uEAAAP,qBAAA,kBAAAO,mDAAAP,qBAAA;AAAA,AAAA,QAAAG,gEAAAA,8DAAAE,SAAAC,YAAAH,0CAAAE,SAAAC;;AAAA,AAAAF;;;AAAA,CAAA,AAAAH,4BAAA,iBAAAO,WAAA,EAAA,eAAA;AAAA,AAAAA;;;;AAAA;;;;AAAA,AAAAC,gGAAA,gHAAArB,pJAAOsB;AAOP,AAAKO,yCAAU,AAACC,iFAAoBR;AAEpC,GAAA,QAAAd,+BAAAC,4CAAAC,yDAAAqB;AAAA;AAAA,AAAA,AAASC,sCAAO,AAACC;;AAEjB,AAAKC,0CACH,+BAAA,2CAAA,6HAAA,uGAAA,mCAAA,sGAAA,KAAA,qJAAA,wFAAA,mCAAA,5sBAACC,mKAC8Bb,0YAGAU,8PAEAA;AAEjC,AAOA,AAAAI,4BAAA,2CAAA,qDAAA,mFAAA,oGAAA,6GAAA,qDAAA;AAAA,AAAA,OAAAC,wBAAA,2CAAA,qDAAA,+BAAA,uEAAA,KAAA,8DACE,AAAAC,6BACE,WAAKX,EAAEY;AAAP,AACE,4EAAA,2CAAA,6HAAA,sGAAA,KAAA,xVAACC,6BAAYN,4KACWZ,gQAEAU,4CACtBO;IAPR,sEAAA,mCAAA,yDAAA","names":["options__48885__auto__","p__82781","map__82782","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.components/wrapped-render","map__82784","com.fulcrologic.fulcro.components/props","js/dv","js/dv.cljs-emotion","js/dv.cljs-emotion.fulcro-cards","js/dv.cljs-emotion.fulcro-cards.Button","props__48886__auto__","this__48887__auto__","temp__5751__auto__","init-state__48888__auto__","obj82786","G__82787","G__82788","com.fulcrologic.fulcro.components/isoget","obj82796","com.fulcrologic.fulcro.components/configure-component!","dv.cljs-emotion.fulcro-cards/Button","this","className","text","props","_","com.fulcrologic.fulcro.dom.macro_create_element","dv.cljs-emotion.fulcro-cards/ui-button","com.fulcrologic.fulcro.components.computed_factory","js/dv.cljs-emotion.fulcro-cards.app-id","dv.cljs-emotion.fulcro-cards/app-id","cljs.core/random-uuid","dv.cljs-emotion.fulcro-cards/fulcro-app","dv.devcards-fulcro3/upsert-app","devcards.core/register-card","devcards.core/card-base","devcards.core/dom-node*","dom-node","dv.devcards-fulcro3/mount-at"],"sourcesContent":["(ns dv.cljs-emotion.fulcro-cards\n  (:require\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as fr]\n    [devcards.core :as dc :refer (defcard)]\n    [dv.cljs-emotion.target-styled]\n    [dv.cljs-emotion.reagent-cards]\n    [dv.devcards-fulcro3 :as f3]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.components :as fc :refer [defsc]]\n    [sablono.core :as sab :refer [html]]\n    [\"polished\" :as p :refer [darken]]\n    [dv.cljs-emotion :as em :refer [css defstyled keyframes global-style theme-provider]]))\n\n(defsc Button [this {:keys [className text] :as props}]\n  {:query         [:className :text]\n   :ident         (fn [_] [::id :button])\n   :initial-state (fn [_] {:text \"Hello world\"})}\n  (dom/div\n    (dom/button {:className className} text)))\n\n(def ui-button (fc/computed-factory Button))\n\n(defonce app-id (random-uuid))\n\n(def fulcro-app\n  (f3/upsert-app\n    {::f3/root                   Button\n     ::f3/root-state             {}\n     ::f3/wrap-root?             true\n     ::f3/persistence-key        app-id\n     ::f3/app                    {}\n     :fulcro.inspect.core/app-id app-id}))\n\n(comment\n  (println \"HI\")\n\n  (fr/with-app-context\n    fulcro-app\n    (ui-button {:className \"TEST CLS\"})))\n\n(defcard dv-test-fulcro-styled-button\n  (dc/dom-node\n    (fn [_ dom-node]\n      (f3/mount-at fulcro-app\n        {::f3/root            Button\n         ::f3/wrap-root?      true\n         ::f3/persistence-key app-id}\n        dom-node))))\n\n;(f3/make-card Button)\n\n;; the thought is to do this:\n;(defstyled ui-fulcro-btn Button {:color \"red\"})\n\n; and then figure out the best way to pass the className to the returned react-element before rendering -\n;; probably in render middleware?\n; and have this pass the className to fulcro\n"]}