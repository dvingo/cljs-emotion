{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$swift.js",
"lineCount":21,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/swift.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$swift\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(\n  /\\b/,\n  keyword,\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n);\n\n// Keywords that require a leading dot.\nconst dotKeywords = [\n  'Protocol', // contextual\n  'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n  'init',\n  'self'\n].map(keywordWrapper);\n\n// should register as keyword, not type\nconst keywordTypes = [\n  'Any',\n  'Self'\n];\n\n// Regular keywords and literals.\nconst keywords = [\n  // strings below will be fed into the regular `keywords` engine while regex\n  // will result in additional modes being created to scan for those keywords to\n  // avoid conflicts with other rules\n  'associatedtype',\n  /as\\?/, // operator\n  /as!/, // operator\n  'as', // operator\n  'break',\n  'case',\n  'catch',\n  'class',\n  'continue',\n  'convenience', // contextual\n  'default',\n  'defer',\n  'deinit',\n  'didSet', // contextual\n  'do',\n  'dynamic', // contextual\n  'else',\n  'enum',\n  'extension',\n  'fallthrough',\n  /fileprivate\\(set\\)/,\n  'fileprivate',\n  'final', // contextual\n  'for',\n  'func',\n  'get', // contextual\n  'guard',\n  'if',\n  'import',\n  'indirect', // contextual\n  'infix', // contextual\n  /init\\?/,\n  /init!/,\n  'inout',\n  /internal\\(set\\)/,\n  'internal',\n  'in',\n  'is', // operator\n  'lazy', // contextual\n  'let',\n  'mutating', // contextual\n  'nonmutating', // contextual\n  /open\\(set\\)/, // contextual\n  'open', // contextual\n  'operator',\n  'optional', // contextual\n  'override', // contextual\n  'postfix', // contextual\n  'precedencegroup',\n  'prefix', // contextual\n  /private\\(set\\)/,\n  'private',\n  'protocol',\n  /public\\(set\\)/,\n  'public',\n  'repeat',\n  'required', // contextual\n  'rethrows',\n  'return',\n  'set', // contextual\n  'some', // contextual\n  'static',\n  'struct',\n  'subscript',\n  'super',\n  'switch',\n  'throws',\n  'throw',\n  /try\\?/, // operator\n  /try!/, // operator\n  'try', // operator\n  'typealias',\n  /unowned\\(safe\\)/, // contextual\n  /unowned\\(unsafe\\)/, // contextual\n  'unowned', // contextual\n  'var',\n  'weak', // contextual\n  'where',\n  'while',\n  'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nconst literals = [\n  'false',\n  'nil',\n  'true'\n];\n\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n  'assignment',\n  'associativity',\n  'higherThan',\n  'left',\n  'lowerThan',\n  'none',\n  'right'\n];\n\n// Keywords that start with a number sign (#).\n// #available is handled separately.\nconst numberSignKeywords = [\n  '#colorLiteral',\n  '#column',\n  '#dsohandle',\n  '#else',\n  '#elseif',\n  '#endif',\n  '#error',\n  '#file',\n  '#fileID',\n  '#fileLiteral',\n  '#filePath',\n  '#function',\n  '#if',\n  '#imageLiteral',\n  '#keyPath',\n  '#line',\n  '#selector',\n  '#sourceLocation',\n  '#warn_unqualified_access',\n  '#warning'\n];\n\n// Global functions in the Standard Library.\nconst builtIns = [\n  'abs',\n  'all',\n  'any',\n  'assert',\n  'assertionFailure',\n  'debugPrint',\n  'dump',\n  'fatalError',\n  'getVaList',\n  'isKnownUniquelyReferenced',\n  'max',\n  'min',\n  'numericCast',\n  'pointwiseMax',\n  'pointwiseMin',\n  'precondition',\n  'preconditionFailure',\n  'print',\n  'readLine',\n  'repeatElement',\n  'sequence',\n  'stride',\n  'swap',\n  'swift_unboxFromSwiftValueWithType',\n  'transcode',\n  'type',\n  'unsafeBitCast',\n  'unsafeDowncast',\n  'withExtendedLifetime',\n  'withUnsafeMutablePointer',\n  'withUnsafePointer',\n  'withVaList',\n  'withoutActuallyEscaping',\n  'zip'\n];\n\n// Valid first characters for operators.\nconst operatorHead = either(\n  /[/=\\-+!*%<>&|^~?]/,\n  /[\\u00A1-\\u00A7]/,\n  /[\\u00A9\\u00AB]/,\n  /[\\u00AC\\u00AE]/,\n  /[\\u00B0\\u00B1]/,\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n  /[\\u2016-\\u2017]/,\n  /[\\u2020-\\u2027]/,\n  /[\\u2030-\\u203E]/,\n  /[\\u2041-\\u2053]/,\n  /[\\u2055-\\u205E]/,\n  /[\\u2190-\\u23FF]/,\n  /[\\u2500-\\u2775]/,\n  /[\\u2794-\\u2BFF]/,\n  /[\\u2E00-\\u2E7F]/,\n  /[\\u3001-\\u3003]/,\n  /[\\u3008-\\u3020]/,\n  /[\\u3030]/\n);\n\n// Valid characters for operators.\nconst operatorCharacter = either(\n  operatorHead,\n  /[\\u0300-\\u036F]/,\n  /[\\u1DC0-\\u1DFF]/,\n  /[\\u20D0-\\u20FF]/,\n  /[\\uFE00-\\uFE0F]/,\n  /[\\uFE20-\\uFE2F]/\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n  // /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nconst identifierHead = either(\n  /[a-zA-Z_]/,\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n  /[\\u1E00-\\u1FFF]/,\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n  // The following characters are also allowed, but the regexes aren't supported yet.\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nconst identifierCharacter = either(\n  identifierHead,\n  /\\d/,\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n);\n\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\nconst keywordAttributes = [\n  'autoclosure',\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n  'discardableResult',\n  'dynamicCallable',\n  'dynamicMemberLookup',\n  'escaping',\n  'frozen',\n  'GKInspectable',\n  'IBAction',\n  'IBDesignable',\n  'IBInspectable',\n  'IBOutlet',\n  'IBSegueAction',\n  'inlinable',\n  'main',\n  'nonobjc',\n  'NSApplicationMain',\n  'NSCopying',\n  'NSManaged',\n  concat(/objc\\(/, identifier, /\\)/),\n  'objc',\n  'objcMembers',\n  'propertyWrapper',\n  'requires_stored_property_inits',\n  'testable',\n  'UIApplicationMain',\n  'unknown',\n  'usableFromInline'\n];\n\n// Contextual keywords used in @available and #available.\nconst availabilityKeywords = [\n  'iOS',\n  'iOSApplicationExtension',\n  'macOS',\n  'macOSApplicationExtension',\n  'macCatalyst',\n  'macCatalystApplicationExtension',\n  'watchOS',\n  'watchOSApplicationExtension',\n  'tvOS',\n  'tvOSApplicationExtension',\n  'swift'\n];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  const BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    {\n      contains: [ 'self' ]\n    }\n  );\n  const COMMENTS = [\n    hljs.C_LINE_COMMENT_MODE,\n    BLOCK_COMMENT\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  const DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\n    end: either(...dotKeywords, ...optionalDotKeywords),\n    excludeBegin: true\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords\n    .filter(kw => typeof kw === 'string')\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n  const REGEX_KEYWORDS = keywords\n    .filter(kw => typeof kw !== 'string') // find regex\n    .concat(keywordTypes)\n    .map(keywordWrapper);\n  const KEYWORD = {\n    variants: [\n      {\n        className: 'keyword',\n        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n      }\n    ]\n  };\n  // find all the regular keywords\n  const KEYWORDS = {\n    $pattern: either(\n      /\\b\\w+/, // regular keywords\n      /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS\n      .concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [\n    DOT_KEYWORD,\n    KEYWORD_GUARD,\n    KEYWORD\n  ];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [\n    BUILT_IN_GUARD,\n    BUILT_IN\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [\n      {\n        match: operator\n      },\n      {\n        // dot-operator: only operators that start with a dot are allowed to use dots as\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n        // characters that may also include dots.\n        match: `\\\\.(\\\\.|${operatorCharacter})+`\n      }\n    ]\n  };\n  const OPERATORS = [\n    OPERATOR_GUARD,\n    OPERATOR\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      {\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      {\n        match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // octal-literal\n      {\n        match: /\\b0o([0-7]_*)+\\b/\n      },\n      // binary-literal\n      {\n        match: /\\b0b([01]_*)+\\b/\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    variants: [\n      {\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      },\n      {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }\n    ]\n  });\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n  });\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    label: \"interpol\",\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n    end: /\\)/\n  });\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"\"\"/),\n    end: concat(/\"\"\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      ESCAPED_NEWLINE(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"/),\n    end: concat(/\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const STRING = {\n    className: 'string',\n    variants: [\n      MULTILINE_STRING(),\n      MULTILINE_STRING(\"#\"),\n      MULTILINE_STRING(\"##\"),\n      MULTILINE_STRING(\"###\"),\n      SINGLE_LINE_STRING(),\n      SINGLE_LINE_STRING(\"#\"),\n      SINGLE_LINE_STRING(\"##\"),\n      SINGLE_LINE_STRING(\"###\")\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  const QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [\n    QUOTED_IDENTIFIER,\n    IMPLICIT_PARAMETER,\n    PROPERTY_WRAPPER_PROJECTION\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: availabilityKeywords,\n          contains: [\n            ...OPERATORS,\n            NUMBER,\n            STRING\n          ]\n        }\n      ]\n    }\n  };\n  const KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either(...keywordAttributes))\n  };\n  const USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  const ATTRIBUTES = [\n    AVAILABLE_ATTRIBUTE,\n    KEYWORD_ATTRIBUTE,\n    USER_DEFINED_ATTRIBUTE\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [\n      { // Common Apple frameworks, for relevance boost\n        className: 'type',\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n      },\n      { // Type identifier\n        className: 'type',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      { // Optional type\n        match: /[?!]+/,\n        relevance: 0\n      },\n      { // Variadic parameter\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      { // Protocol composition\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n        relevance: 0\n      }\n    ]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...ATTRIBUTES,\n      OPERATOR_GUARD,\n      TYPE\n    ]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      TUPLE_ELEMENT_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n  const FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [\n      {\n        className: 'title',\n        match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n        // Required to make sure the opening < of the generic parameter clause\n        // isn't parsed as a second title.\n        endsParent: true,\n        relevance: 0\n      },\n      WHITESPACE\n    ]\n  };\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [\n      ...COMMENTS,\n      TYPE\n    ]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(\n      lookahead(concat(identifier, /\\s*:/)),\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n    ),\n    end: /:/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'keyword',\n        match: /\\b_\\b/\n      },\n      {\n        className: 'params',\n        match: identifier\n      }\n    ]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      FUNCTION_PARAMETER_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  const FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [\n      FUNC_PLUS_TITLE,\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: [\n      /\\[/,\n      /%/\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  const INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  const OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: operator,\n        endsParent: true,\n        relevance: 0\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  const PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      {\n        begin: /{/,\n        end: /}/,\n        relevance: 0,\n        endsParent: true,\n        keywords: [\n          ...precedencegroupKeywords,\n          ...literals\n        ],\n        contains: [ TYPE ]\n      }\n    ]\n  };\n\n  // Add supported submodes to string interpolation.\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n    interpolation.keywords = KEYWORDS;\n    const submodes = [\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS\n    ];\n    interpolation.contains = [\n      ...submodes,\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\n          'self',\n          ...submodes\n        ]\n      }\n    ];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      FUNCTION,\n      INIT_SUBSCRIPT,\n      {\n        className: 'class',\n        beginKeywords: 'struct protocol class extension enum',\n        end: '\\\\{',\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n          }),\n          ...KEYWORD_MODES\n        ]\n      },\n      OPERATOR_DECLARATION,\n      PRECEDENCEGROUP,\n      {\n        beginKeywords: 'import',\n        end: /$/,\n        contains: [ ...COMMENTS ],\n        relevance: 0\n      },\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ]\n  };\n}\n\nmodule.exports = swift;\n\n};"],
"names":["shadow$provide","global","require","module","exports","lookahead","re","concat","args","map","x","source","join","joined","either","keywordWrapper","keyword","test","dotKeywords","optionalDotKeywords","keywordTypes","keywords","literals","precedencegroupKeywords","numberSignKeywords","builtIns","operatorHead","operatorCharacter","operator","identifierHead","identifierCharacter","identifier","typeIdentifier","keywordAttributes","availabilityKeywords","swift","hljs","WHITESPACE","match","relevance","BLOCK_COMMENT","COMMENT","contains","COMMENTS","C_LINE_COMMENT_MODE","DOT_KEYWORD","className","begin","end","excludeBegin","KEYWORD_GUARD","PLAIN_KEYWORDS","filter","kw","REGEX_KEYWORDS","KEYWORD","variants","KEYWORDS","$pattern","literal","KEYWORD_MODES","BUILT_IN_GUARD","BUILT_IN","BUILT_INS","OPERATOR_GUARD","OPERATORS","OPERATOR","NUMBER","ESCAPED_CHARACTER","rawDelimiter","ESCAPED_NEWLINE","INTERPOLATION","label","MULTILINE_STRING","SINGLE_LINE_STRING","STRING","QUOTED_IDENTIFIER","IDENTIFIERS","IMPLICIT_PARAMETER","PROPERTY_WRAPPER_PROJECTION","AVAILABLE_ATTRIBUTE","starts","KEYWORD_ATTRIBUTE","USER_DEFINED_ATTRIBUTE","ATTRIBUTES","TYPE","GENERIC_ARGUMENTS","push","TUPLE_ELEMENT_NAME","TUPLE","FUNC_PLUS_TITLE","beginKeywords","endsParent","GENERIC_PARAMETERS","FUNCTION_PARAMETER_NAME","FUNCTION_PARAMETERS","illegal","FUNCTION","INIT_SUBSCRIPT","OPERATOR_DECLARATION","MATCH_NOTHING_RE","PRECEDENCEGROUP","variant","interpolation","find","mode","submodes","name","excludeEnd","inherit","TITLE_MODE"]
}
