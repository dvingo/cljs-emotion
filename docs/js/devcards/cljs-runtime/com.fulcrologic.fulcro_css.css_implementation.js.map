{"version":3,"sources":["com/fulcrologic/fulcro_css/css_implementation.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro-css.css-implementation/cssify","str","clojure.string/replace","com.fulcrologic.fulcro-css.css-implementation/fqname","comp-class","com.fulcrologic.fulcro.components/class->registry-key","var_args","G__56323","com.fulcrologic.fulcro-css.css-implementation/local-class","js/Error","nm","cljs.core/name","com.fulcrologic.fulcro-css.css-implementation/set-classname","m","subclasses","cljs.core/clj->js","cljs.core.assoc","cljs.core.dissoc","com.fulcrologic.fulcro-css.css-implementation/CSS?","x","cljs.core/boolean","G__56339","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.fulcro-css.css-implementation/get-local-rules","component","temp__5751__auto__","entry","G__56345","cljs.core/fn?","cljs.core/vector?","cljs.core.println","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro-css.css-implementation/get-global-rules","G__56356","com.fulcrologic.fulcro-css.css-implementation/prefixed-name?","cljs.core/re-matches","com.fulcrologic.fulcro-css.css-implementation/get-prefix","vec__56377","cljs.core.nth","_","prefix","com.fulcrologic.fulcro-css.css-implementation/prefixed-keyword?","kw","cljs.core/Keyword","com.fulcrologic.fulcro-css.css-implementation/remove-prefix","cljs.core.subs","cljs.core/count","com.fulcrologic.fulcro-css.css-implementation/remove-prefix-kw","cljs.core.keyword","com.fulcrologic.fulcro-css.css-implementation/get-includes","includes","G__56417","or__4253__auto__","com.fulcrologic.fulcro-css.css-implementation/get-nested-includes","direct-children","cljs.core/empty?","cljs.core.concat","p1__56430#","p2__56431#","cljs.core.reduce","com.fulcrologic.fulcro-css.css-implementation/localize-name","comp","no-prefix","G__56441","com.fulcrologic.fulcro_css.css_implementation.local_class","com.fulcrologic.fulcro-css.css-implementation/localize-kw","com.fulcrologic.fulcro-css.css-implementation/kw->localized-classname","G__56475","com.fulcrologic.fulcro-css.css-implementation/selector?","e56489","cljs.core._EQ_","js/garden.selectors.CSSSelector","cljs.core/type","e","com.fulcrologic.fulcro-css.css-implementation/get-selector-keywords","selector","val","garden.selectors/css-selector","classnames","p1__56493#","cljs.core.filter","clojure.string.split","cljs.core.map","cljs.core/keyword","com.fulcrologic.fulcro-css.css-implementation/get-class-keys","rules","flattened-rules","cljs.core/flatten","selectors","prefixed-kws","cljs.core.distinct","com.fulcrologic.fulcro-css.css-implementation/get-classnames","local-class-keys","global-class-keys","local-classnames","cljs.core/zipmap","p1__56513#","global-classnames","cljs.core.merge"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css-implementation\n  \"Implementation details for co-located CSS. Do not use these directly.\"\n  ;; IMPORTANT: DO NOT INCLUDE GARDEN HERE!!!!\n  (:require\n    [cljs.tagged-literals]\n    [garden.selectors :as gs]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str])\n  #?(:clj\n     (:import [garden.selectors CSSSelector])))\n\n;; from core\n(defn cssify\n  \"Replaces slashes and dots with underscore.\"\n  [str] (when str (str/replace str #\"[./]\" \"_\")))\n\n(defn fqname [comp-class] (-> comp-class comp/class->registry-key str (str/replace #\"^:\" \"\")))\n\n(defn local-class\n  \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ([comp-class]\n   (str (cssify (fqname comp-class))))\n  ([comp-class nm]\n   (str (cssify (fqname comp-class)) \"__\" (name nm))))\n\n(defn set-classname\n  [m subclasses]\n  #?(:clj  (-> m\n             (assoc :className subclasses)\n             (dissoc :class))\n     :cljs (cljs.core/clj->js (-> m\n                                (assoc :className subclasses)\n                                (dissoc :class)))))\n\n(defn CSS?\n  \"Returns true if the given component has css\"\n  [x]\n  (boolean (some-> x comp/component-options :css)))\n\n(defn get-local-rules\n  \"Get the *raw* value from the local-rules of a component.\"\n  [component]\n  (if-let [entry (some-> component comp/component-options :css)]\n    (cond\n      (fn? entry) (entry)\n      (vector? entry) entry\n      :otherwise (do\n                   (println \"Invalid :css on \" (comp/component-name component))\n                   entry))\n    []))\n\n(defn get-global-rules\n  \"Get the *raw* value from the global-rules of a component.\"\n  [component]\n  (if-let [entry (some-> component comp/component-options :css-global)]\n    (cond\n      (fn? entry) (entry)\n      (vector? entry) entry\n      :otherwise (do\n                   (println \"Invalid :css-global on \" (comp/component-name component))\n                   entry))\n    []))\n\n(defn prefixed-name?\n  \"Returns true if the given string starts with one of [. $ &$ &.]\"\n  [nm]\n  (some? (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)))\n\n(defn get-prefix\n  \"Returns the prefix of a string. [. $ &$ &.]\"\n  [nm]\n  (let [[_ prefix] (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)]\n    prefix))\n\n(defn prefixed-keyword?\n  \"Returns true if the given keyword starts with one of [. $ &$ &.]\"\n  [kw]\n  (and (keyword? kw)\n    (prefixed-name? (name kw))))\n\n(defn remove-prefix\n  \"Removes the prefix of a string.\"\n  [nm]\n  (subs nm (count (get-prefix nm))))\n\n(defn remove-prefix-kw\n  \"Removes the prefix of a keyword.\"\n  [kw]\n  (keyword (remove-prefix (name kw))))\n\n(defn get-includes\n  \"Returns the list of components from the include-children method of a component\"\n  [component]\n  (let [includes (some-> component comp/component-options :css-include)]\n    (if (fn? includes)\n      (includes)\n      (or includes []))))\n\n(defn get-nested-includes\n  \"Recursively finds all includes starting at the given component.\"\n  [component]\n  (let [direct-children (get-includes component)]\n    (if (empty? direct-children)\n      []\n      (concat direct-children (reduce #(concat %1 (get-nested-includes %2)) [] direct-children)))))\n\n(defn localize-name\n  [nm comp]\n  (let [no-prefix (remove-prefix nm)\n        prefix    (get-prefix nm)]\n    (case prefix\n      (\".\" \"&.\") (str prefix (local-class comp (keyword no-prefix)))\n      \"$\" (str \".\" no-prefix)\n      \"&$\" (str \"&.\" no-prefix))))\n\n(defn localize-kw\n  [kw comp]\n  (keyword (localize-name (name kw) comp)))\n\n(defn kw->localized-classname\n  \"Gives the localized classname for the given keyword.\"\n  [comp kw]\n  (let [nm        (name kw)\n        prefix    (get-prefix nm)\n        no-prefix (subs nm (count prefix))]\n    (case prefix\n      (\"$\" \"&$\") no-prefix\n      (\".\" \"&.\") (local-class comp no-prefix))))\n\n(defn selector?\n  [x]\n  (try\n    #?(:clj  (= garden.selectors.CSSSelector (type x))\n       :cljs (= js/garden.selectors.CSSSelector (type x)))\n    (catch #?(:cljs :default :clj Throwable) e\n      false)))\n\n(defn get-selector-keywords\n  \"Gets all the keywords that are present in a selector\"\n  [selector]\n  (let [val        (gs/css-selector selector)\n        classnames (filter #(re-matches #\"[.$].*\" %) (str/split val #\" \"))]\n    (map keyword classnames)))\n\n(defn get-class-keys\n  \"Gets all used classnames in from the given rules as keywords\"\n  [rules]\n  (let [flattened-rules (flatten rules)\n        selectors       (filter selector? flattened-rules)\n        prefixed-kws    (filter prefixed-keyword? flattened-rules)]\n    (distinct (concat (flatten (map get-selector-keywords selectors)) prefixed-kws))))\n\n(defn get-classnames\n  \"Returns a map from user-given CSS rule names to localized names of the given component.\"\n  [comp]\n  (let [local-class-keys  (get-class-keys (get-local-rules comp))\n        global-class-keys (map remove-prefix-kw (get-class-keys (get-global-rules comp)))\n        local-classnames  (zipmap (map remove-prefix-kw local-class-keys) (map #(kw->localized-classname comp %) local-class-keys))\n        global-classnames (zipmap global-class-keys (map name global-class-keys))]\n    (merge local-classnames global-classnames)))\n"]}