{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$htmlbars.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/htmlbars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$htmlbars\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ]\n  };\n\n  const LITERALS = {\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ]\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(\n    DOUBLE_QUOTED_ID_REGEX,\n    SINGLE_QUOTED_ID_REGEX,\n    BRACKET_QUOTED_ID_REGEX,\n    PLAIN_ID_REGEX\n    );\n\n  const IDENTIFIER_REGEX = concat(\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n    ANY_ID,\n    anyNumberOfTimes(concat(\n      PATH_DELIMITER_REGEX,\n      ANY_ID\n    ))\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n\n  return {\n    name: 'Handlebars',\n    aliases: [\n      'hbs',\n      'html.hbs',\n      'html.handlebars',\n      'htmlbars'\n    ],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {\n          end: /\\{\\{\\{\\{\\//,\n          returnEnd: true,\n          subLanguage: 'xml'\n        }\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else if)/,\n        end: /\\}\\}/,\n        keywords: 'else if'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\n/*\n Language: HTMLBars (legacy)\n Requires: xml.js\n Description: Matcher for Handlebars as well as EmberJS additions.\n Website: https://github.com/tildeio/htmlbars\n Category: template\n */\n\nfunction htmlbars(hljs) {\n  const definition = handlebars(hljs);\n\n  definition.name = \"HTMLbars\";\n\n  // HACK: This lets handlebars do the auto-detection if it's been loaded (by\n  // default the build script will load in alphabetical order) and if not (perhaps\n  // an install is only using `htmlbars`, not `handlebars`) then this will still\n  // allow HTMLBars to participate in the auto-detection\n\n  // worse case someone will have HTMLbars and handlebars competing for the same\n  // content and will need to change their setup to only require handlebars, but\n  // I don't consider this a breaking change\n  if (hljs.getLanguage(\"handlebars\")) {\n    definition.disableAutodetect = true;\n  }\n\n  return definition;\n}\n\nmodule.exports = htmlbars;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","either","htmlbars","hljs","BUILT_INS","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","ANY_ID","DOUBLE_QUOTED_ID_REGEX","SINGLE_QUOTED_ID_REGEX","IDENTIFIER_REGEX","re","PATH_DELIMITER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","begin","lexemes","HELPER_PARAMETER","inherit","keywords","LITERALS","literal","SUB_EXPRESSION","end","HELPER_PARAMETERS","contains","NUMBER_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","BLOCK_PARAMS","keyword","HASH","className","relevance","starts","returnEnd","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","aliases","case_insensitive","subLanguage","ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH","skip","PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH","COMMENT","getLanguage","definition","disableAutodetect"]
}
