{"version":3,"sources":["devtools/formatters/state.cljs"],"mappings":"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","names":["devtools.formatters.state/*current-state*","devtools.formatters.state/valid-current-state?","devtools.formatters.state/get-default-state","js/Error","devtools.formatters.state/get-current-state","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","devtools.formatters.state/update-current-state!","seq40435","G__40436","cljs.core/first","cljs.core/next","self__4851__auto__","f","args","cljs.core.apply","devtools.formatters.state/push-object-to-current-history!","object","devtools.formatters.state.update_current_state_BANG_","cljs.core/update","cljs.core/conj","devtools.formatters.state/get-current-history","devtools.formatters.state/is-circular?","history","p1__40446#","cljs.core/some","devtools.formatters.state/get-last-object-from-current-history","devtools.formatters.state/get-second-last-object-from-current-history","cljs.core/second","devtools.formatters.state/present-path-segment","v","cljs.core/Keyword","devtools.formatters.state/seek-path-segment","coll","val","*","p__40464","vec__40466","cljs.core.nth","k","devtools.formatters.state/build-path-segment","parent-object","cljs.core/map?","cljs.core/seq","cljs.core/sequential?","cljs.core.map_indexed","i","x","devtools.formatters.state/mapping?","obj","obj-kw","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","and__4251__auto__","cljs.core/contains?","devtools.formatters.state/extend-path-info","path-info","cljs.core.conj","or__4253__auto__","devtools.formatters.state/add-object-to-current-path-info!","devtools.formatters.state/get-current-path-info","devtools.formatters.state/prevent-recursion?","cljs.core/boolean","devtools.formatters.state/set-prevent-recursion","state","cljs.core.assoc","cljs.core.dissoc","devtools.formatters.state/get-managed-print-level","devtools.formatters.state/set-managed-print-level","devtools.formatters.state/get-depth-budget","devtools.formatters.state/set-depth-budget","devtools.formatters.state/reset-depth-limits"],"sourcesContent":["(ns devtools.formatters.state)\n\n; - state management --------------------------------------------------------------------------------------------------------\n;\n; we have to maintain some state:\n; a) to prevent infinite recursion in some pathological cases (https://github.com/binaryage/cljs-devtools/issues/2)\n; b) to keep track of printed objects to visually signal circular data structures\n;\n; We dynamically bind *current-config* to the config passed from \"outside\" when entering calls to our API methods.\n; Initially the state is empty, but we accumulate there a history of seen values when rendering individual values\n; in depth-first traversal order. See alt-printer-impl where we re-bind *current-config* for each traversal level.\n; But there is a catch. For larger data structures our printing methods usually do not print everything at once.\n; We can include so called \"object references\" which are just placeholders which can be expanded later\n; by DevTools UI (when user clicks a disclosure triangle).\n; For proper continuation in rendering of those references we have to carry our existing state over.\n; We use \"config\" feature of custom formatters system to pass current state to future API calls.\n\n(def ^:dynamic *current-state* nil)\n\n(defn valid-current-state? []\n  (some? *current-state*))\n\n(defn get-default-state []\n  {})\n\n(defn get-current-state []\n  {:pre [(valid-current-state?)]}\n  *current-state*)\n\n(defn update-current-state! [f & args]\n  {:pre [(valid-current-state?)]}\n  (set! *current-state* (apply f *current-state* args)))\n\n; -- high level API ---------------------------------------------------------------------------------------------------------\n\n(defn push-object-to-current-history! [object]\n  (update-current-state! update :history conj object))\n\n(defn get-current-history []\n  (:history (get-current-state)))\n\n(defn is-circular? [object]\n  (let [history (get-current-history)]\n    (some #(identical? % object) history)))\n\n(defn get-last-object-from-current-history []\n  (first (get-current-history)))                                                                                              ; note the list is reversed\n\n(defn get-second-last-object-from-current-history []\n  (second (get-current-history)))                                                                                              ; note the list is reversed\n\n(defn present-path-segment [v]\n  (cond\n    (string? v) v\n    ;; we'd like to preserve keywords for easy get\n    (keyword? v) v\n    (number? v) v\n    :else \"?\"))\n\n(defn seek-path-segment [coll val]\n  (let [* (fn [[k v]]\n            (cond\n              ;; we need to know the paths for keywords, these are clickable\n              (identical? k val)\n              (present-path-segment k)\n\n              (identical? v val)\n              (present-path-segment k)))]\n    (some * coll)))\n\n(defn build-path-segment [parent-object object]\n  (cond\n    (map? parent-object) (seek-path-segment (seq parent-object) object)\n    (sequential? parent-object) (seek-path-segment (map-indexed (fn [i x] [i x]) parent-object) object)))\n\n;; This function checks a unique situation of looping an immediate child element `obj` of a parent element `history`\n;; say we have a general map {:a 2 :b {:gh 45} :c 4}\n;; and we call devtools.formatters.core/body-api-call with the map, the map ends up in\n;; devtools.formatters.markup/<details> which then calls devtools.formatters.markup/body-lines\n;; where the map will get seq'd resulting in ([:a 2] [:b {:gh 45}] [:c 4])\n;; these 3 vectors will then be pushed to history which will result in an issue when generating the path\n;; for example if we are looping over at `obj` as 2 and `history` as `[:a 2]` `build-path-segment` will return\n;; the path as 1 since the immediate history is a vector instead of a map.\n;; This function detects the condition that this is the case and then the next operation will be to\n;; get the first item in the vector which is the path.\n(defn mapping?\n  [history obj]\n  (let [obj-kw (when (and (vector? obj)\n                          (= (count obj) 2)\n                          ;; the map keys must always be one of these\n                          (or\n                            (-> obj first keyword?)\n                            (-> obj first string?)\n                            (-> obj first number?)))\n                 (first obj))]\n    (when (and (map? history) obj-kw)\n      (contains? history obj-kw))))\n\n(defn extend-path-info [path-info object]\n  (let [parent-object (get-last-object-from-current-history)]\n    (cond\n      ;; if the current item we are looping at is an artificial vector (explained at `mapping` above),\n      ;; dont append to the path\n      (and (map? parent-object) (mapping? parent-object object))\n      path-info\n      ;; if the previous item is an artificial vector, lets append to the path info but take the first item\n      ;; in the vector as the path. (Explained in `mapping` above)\n      (and (map? (get-second-last-object-from-current-history))\n           (mapping? (get-second-last-object-from-current-history) parent-object))\n      (conj (or path-info []) (first parent-object))\n      ;; the current object is an item within the parent object\n      (some? (build-path-segment parent-object object))\n      (conj (or path-info []) (build-path-segment parent-object object))\n      :else path-info)))\n\n(defn add-object-to-current-path-info! [object]\n  (update-current-state! update :path-info extend-path-info object))\n\n(defn get-current-path-info []\n  (:path-info (get-current-state)))\n\n(defn ^bool prevent-recursion? []\n  (boolean (:prevent-recursion (get-current-state))))\n\n(defn set-prevent-recursion [state val]\n  (if (some? val)\n    (assoc state :prevent-recursion val)\n    (dissoc state :prevent-recursion)))\n\n(defn get-managed-print-level []\n  (:managed-print-level (get-current-state)))\n\n(defn set-managed-print-level [state val]\n  (if (some? val)\n    (assoc state :managed-print-level val)\n    (dissoc state :managed-print-level)))\n\n(defn get-depth-budget []\n  (:depth-budget (get-current-state)))\n\n(defn set-depth-budget [state val]\n  (if (some? val)\n    (assoc state :depth-budget val)\n    (dissoc state :depth-budget)))\n\n(defn reset-depth-limits [state]\n  (-> state\n      (set-depth-budget nil)\n      (set-managed-print-level nil)))\n"]}